/////////////////////////////////////////
//			State Manage class		   //
/////////////////////////////////////////

#include "ActionManage.h"
#include "StateMainMenu.h"
#include "StateManage.h"
#include "IDriver.h"
#include "UI.h"
#include "Bfont.h"
#include "Particle.h"
#include "ShaderManage.h"
#include "Texture.h"
#include "Log.h"
#include "Emitter.h"
#include "EmitterManager.h"
#include <string>
#include "UIManager.h"
#include "Camera.h"
#include "SkyBox.h"
#include "SecenManage.h"
#include "SaveHelper.h"
#include "GameResourceList.h"
#include "MessageBox.h"
#include "ActiveBString.h"
#include "SoundManage.h"
#include "Language.h"
#include "GameSetting.h"
#include "UIAnimation.h"
#include "Game.h"


//test
#include "Explosion.h"
#include "Texture.h"
#include "CubeNode.h"
#include "RendBuffer.h"
#include "ShaderManage.h"
#include "ActionManage.h"
class TestRender : public IRenderNode
{
	bool	m_isInstance;
	const static int Count = 1500;
	PhysicCube* TestCube[Count];
	Texture2D*	tex;
	VertexBuffer*	ver;
	RendBuffer*	render;
public:
	TestRender()
	{
		m_isInstance = false;
		//instance
		render = new RendBuffer( VertexTextureNormal::Layout(), CubeNode::GetRenderMode() );
		ver = new VertexBuffer( 		
			CubeNode::GetElementCountPerVertex(),
			CubeNode::GetCountOfVertex(),
			CubeNode::GetCountOfIndes(),
			Count );

		//传统的
		tex = new Texture2D();
		tex->LoadTexture(TextureFileName[tex_Tetris]);
		ver->UseInstance();
		for ( int i = 0 ; i < Count; i ++)
		{
			TestCube[i] = new PhysicCube(
				vector3f( fRandom(-100,100),fRandom(-100,100),fRandom(-100,100) ),
				vector3f( fRandom(5.0,10.0),fRandom(5.0,10.0),fRandom(5.0,10.0) )
				);
			static CubeNode cube( vector3f(), vector3f(), vector2f(0,0), vector2f(1,1) );
			TestCube[i]->CopyCoordinate( cube );
			TestCube[i]->Explosion( -1,
				vector3f(),
				vector3f( fRandom(-1,1),fRandom(-1,1),fRandom(-1,1) ).NormalizeSelf() ,
				fRandom(-1,1));
			TestCube[i]->Update( IDriver::Instance(), 0 );
			TestCube[i]->getver( *ver );
			ver->AddMatrix( TestCube[i]->gettran() );
		}
		render->MakeVertexBuffer(
			ver->VertexPtr(),
			ver->CountOfAllVertex(),
			ver->BiteOfPerVertex(),
			IDriver::STATIC );
		render->MakeIndiesBuffer(
			ver->IndiesPtr(),
			ver->CountOfAllIndies(),
			IDriver::STATIC);
		render->MakeGeometBuffer(
			ver->InstancePtr(),
			ver->CountOfAllVertex(),
			IDriver::DYNAMIC);
	}
	void Instance()
	{
		m_isInstance = !m_isInstance;
		if( m_isInstance )
		{
			DEBUGLOG("Instance\n");
		}
		else
		{
			DEBUGLOG("No Instance\n");
		}
	}
	void Render(IDriver& driver) const
	{
		if ( m_isInstance )
		{
			render->FlushGeometBuffer( ver->InstancePtr(), ver->CountOfAllVertex() );
			PrePixelLightInstance& ppli = driver.GetShaderManage().GetShader<PrePixelLightInstance>(ShaderManage::PrePixelLightInstance);
			driver.Draw( *render, ppli, tex );
		}
		else
		{
			for( int i = 0 ; i < Count ;i ++)
			{
				TestCube[i]->Render(driver, tex);
			}
		}
	}
};

TestRender* test;
#include <iostream>
//-------------------------------------------------------------------------------------------------------
void StateMainMenu::LoadResource(IDriver& driver)
{
	driver.GetCamera().LookAt(	vector3f( 0.0f, 100.0f, 300.0f ),//n4
		vector3f( 0.0f, 0.0f, 0.0f ),
		vector3f( 0.0f, 1.0f,  0.0f ));
	driver.GetCamera().CreatePerspectiveProjection( 150.0f , 400.0f );
	driver.AddLight( 0.2, vector3f(0,0,100), vector3f(0,0,-1),Color(0.8,0.8,0.8,1.0));
	test = new TestRender();
/*
	SaveHelper::Instance().CheckSave();//检查是否有存档
	Game::Instance().InitializationMessageBox();//初始化退出对话框

	m_pBack = driver.GetUIManager().LoadUIGroup(UIFileName[ui_MainMenuBack]);
	m_pYellowPlane = driver.GetUIManager().LoadUIGroup(UIFileName[ui_YellowPlane]);
	m_pYellowPlane->SetCorlor( Color(1,1,1,0.6) );
	m_pMenu = driver.GetUIManager().LoadUIGroup(UIFileName[ui_MainMenu]);
	UIAnimation anim(1000);
	anim.ColorAnimation( Color(1,1,1,0), Color(1,1,1,1) );
	m_pMenu->SetUIAnimation(anim, MEMBER_FUNC_PTR(&StateMainMenu::OnAnimationDone) );


	UIButton* temp = m_pMenu->Control<UIButton>("Button1");
	temp->AddResponse( MEMBER_FUNC_PTR(&StateMainMenu::OnButtonGameClick) );

	temp = m_pMenu->Control<UIButton>("Button2");
	temp->AddResponse( MEMBER_FUNC_PTR(&StateMainMenu::OnButtonOptionClick) );

	m_pHighScore = NEW Number(10, Number::Pink_Small);
	m_pHighScore->SetRight( m_pMenu->Control<UIStatic>("High")->GetCenter() + vector2f( 0.22, -0.04 ) );

	m_MessageBox = NEW GameMessageBox();
	m_MessageBox->SetResponse( MEMBER_FUNC_PTR(&StateMainMenu::OnButtonNewClick), MEMBER_FUNC_PTR(&StateMainMenu::OnButtonLoadClick) );
	m_pParticle1 = driver.GetEmitterManager().CreateEmitter(
		true,
		vector4f(0,0,0),
		vector3f(0,1,0),
		vector3f(0.0,0.0,0.0),
		vector2f(0.01,0.02),
		0.03,
		vector3f(PI,0,PI),
		Color(0,0,0,1),
		Color(1,1,1,1),
		vector2d( SEC(3), SEC(5)),
		vector2f(4,5),
		vector2f(6,7),
		vector2d(100,150),
		-1,	false,
		TextureFileName[tex_MenuParticle1]);
	m_pParticle2 = driver.GetEmitterManager().CreateEmitter(
		false,
		vector4f(0,0,0),
		vector3f(0,1,0),
		vector3f(0.0,0.0,0.0),
		vector2f(0.01,0.04),
		0.05,
		vector3f(PI,0,PI),
		Color(1,1,1,1),
		Color(1,1,1,1),
		vector2d( SEC(2), SEC(3)),
		vector2f(4,6),
		vector2f(6,8),
		vector2d(80,100),
		-1,	false,
		TextureFileName[tex_MenuParticle2]);
	m_pParticle1->ForceStop();
	m_pParticle2->ForceStop();
	*/
}
//-------------------------------------------------------------------------------------------------------
void StateMainMenu::ReleaseResource(IDriver& driver)
{
	//SAFE_DELETE( m_pHighScore );
	//SAFE_DELETE( m_MessageBox );
	//driver.GetEmitterManager().DeleteEmitter(m_pParticle1);
	//driver.GetEmitterManager().DeleteEmitter(m_pParticle2);
	//driver.GetUIManager().UnloadUIGroup(m_pMenu);
	//driver.GetUIManager().UnloadUIGroup(m_pBack);
	//driver.GetUIManager().UnloadUIGroup(m_pYellowPlane);
}
//-------------------------------------------------------------------
void StateMainMenu::OnEnter(IDriver& driver, StateManage::GameState Previous)
{
	//m_isPopupMessagebox = false;
	//driver.GetCamera().LookAt(	vector3f( 0.0f, 0.0f, 50.0f ),	//主界面摄像机
	//	vector3f( 0.0f, 0.0f, 0.0f ),
	//	vector3f( 0.0f, 1.0f, 0.0f ));
	//driver.GetCamera().CreatePerspectiveProjection( 10.0f , 450.0f );
	//driver.SetClearScreenColor(0.0,0.0,0.0,1.0);

	//m_pBack->SetShow(true);
	//m_pMenu->SetShow(true);
	//m_pYellowPlane->SetShow(true);
	//m_pMenu->ResetAnimation();
	//m_pHighScore->SetScore( GameSetting::Instance().GetHighScore() );
	//m_MessageBox->SetContext( STRING.GetString( LanguageControl::New ),
	//	STRING.GetString( LanguageControl::Load ),
	//	STRING.GetString( LanguageControl::LoadOrNew ) + SaveHelper::Instance().GetScoreStr());
	//UIButton* temp = m_pMenu->Control<UIButton>("Button1");
	//temp->SetString( vector2f(0.06f, 0.08f), Color::BloodRed,  true, STRING.GetString( LanguageControl::Game ) );
	//temp = m_pMenu->Control<UIButton>("Button2");
	//temp->SetString( vector2f(0.06f, 0.08f), Color::BloodRed,  true, STRING.GetString( LanguageControl::Option ) );
}
//-------------------------------------------------------------------
void StateMainMenu::OnLeave(IDriver& driver)
{
	//m_pBack->SetShow(false);
	//m_pMenu->SetShow(false);
	//m_pYellowPlane->SetShow(false);
	//m_pHighScore->Hide();
	//m_pParticle1->ForceStop();
	//m_pParticle2->ForceStop();
}
//-------------------------------------------------------------------
void StateMainMenu::Update(StateManage& state, IDriver& driver, uint millisecond)
{
	if( driver.GetActionManage().isAction(ActionManage::ACTION_EXIT) )
		test->Instance();
	//if( m_isPopupMessagebox )
	//{
	//	m_isPopupMessagebox = false;
	//	m_MessageBox->Popup( );
	//}
}
//-------------------------------------------------------------------
bool StateMainMenu::OnButtonLoadClick(UIBase& sender)
{
	SaveHelper::Instance().SetLoad( true );
	StateManage::Instance().ChangeState(StateManage::State_Main_Game, true);
	return true;
}
//-------------------------------------------------------------------
bool StateMainMenu::OnButtonNewClick(UIBase& sender)
{
	SaveHelper::Instance().SetLoad( false );
	StateManage::Instance().ChangeState(StateManage::State_Main_Game, true);
	return true;
}
//-------------------------------------------------------------------
bool StateMainMenu::OnButtonGameClick(UIBase& sender)
{
	if( SaveHelper::Instance().hasSaveData() )
	{
		m_isPopupMessagebox = true;
		m_pMenu->setResponse( false );
	}
	else
	{
		SaveHelper::Instance().SetLoad( false );
		if( GameSetting::Instance().isFirstTime() )
		{
			StateManage::Instance().ChangeState(StateManage::State_Tutorial, true);
		}
		else
		{
			StateManage::Instance().ChangeState(StateManage::State_Main_Game, true);
		}
	}
	return true;
}
//-------------------------------------------------------------------
bool StateMainMenu::OnButtonOptionClick(UIBase& sender)
{
	StateManage::Instance().ChangeState(StateManage::State_Option, false);
	return true;
}
//-------------------------------------------------------------------
bool StateMainMenu::OnAnimationDone(UIGroup& sender)
{
	m_pParticle1->Relife();
	m_pParticle2->Relife();
	return true;
}
