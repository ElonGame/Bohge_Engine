; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	f:\3DTetris\trunk\Librarys\Bohge\External\Json\src\lib_json\json_reader.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	??0Features@Json@@QAE@XZ			; Json::Features::Features
; Function compile flags: /Odtp
; File f:\3dtetris\trunk\librarys\bohge\external\json\src\lib_json\json_reader.cpp
;	COMDAT ??0Features@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Features@Json@@QAE@XZ PROC				; Json::Features::Features, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0

; 23   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Features@Json@@QAE@XZ ENDP				; Json::Features::Features
_TEXT	ENDS
PUBLIC	?all@Features@Json@@SA?AV12@XZ			; Json::Features::all
; Function compile flags: /Odtp
;	COMDAT ?all@Features@Json@@SA?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?all@Features@Json@@SA?AV12@XZ PROC			; Json::Features::all, COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp

; 29   :    return Features();

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Features@Json@@QAE@XZ		; Json::Features::Features
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 30   : }

	pop	ebp
	ret	0
?all@Features@Json@@SA?AV12@XZ ENDP			; Json::Features::all
_TEXT	ENDS
PUBLIC	?strictMode@Features@Json@@SA?AV12@XZ		; Json::Features::strictMode
; Function compile flags: /Odtp
;	COMDAT ?strictMode@Features@Json@@SA?AV12@XZ
_TEXT	SEGMENT
_features$ = -4						; size = 2
___$ReturnUdt$ = 8					; size = 4
?strictMode@Features@Json@@SA?AV12@XZ PROC		; Json::Features::strictMode, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 36   :    Features features;

	lea	ecx, DWORD PTR _features$[ebp]
	call	??0Features@Json@@QAE@XZ		; Json::Features::Features

; 37   :    features.allowComments_ = false;

	mov	BYTE PTR _features$[ebp], 0

; 38   :    features.strictRoot_ = true;

	mov	BYTE PTR _features$[ebp+1], 1

; 39   :    return features;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cx, WORD PTR _features$[ebp]
	mov	WORD PTR [eax], cx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 40   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?strictMode@Features@Json@@SA?AV12@XZ ENDP		; Json::Features::strictMode
_TEXT	ENDS
PUBLIC	??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::~stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
PUBLIC	??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
PUBLIC	??0Reader@Json@@QAE@XZ				; Json::Reader::Reader
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Reader@Json@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@XZ$3
__ehfuncinfo$??0Reader@Json@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0Reader@Json@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Reader@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Reader@Json@@QAE@XZ PROC				; Json::Reader::Reader, COMDAT
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Reader@Json@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	call	?all@Features@Json@@SA?AV12@XZ		; Json::Features::all
	add	esp, 4

; 112  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Reader@Json@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0Reader@Json@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
__unwindfunclet$??0Reader@Json@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$??0Reader@Json@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0Reader@Json@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Reader@Json@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Reader@Json@@QAE@XZ ENDP				; Json::Reader::Reader
PUBLIC	??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::~deque<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
;	COMDAT ??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::~stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::~deque<Json::Value *,std::allocator<Json::Value *> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::~stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
_TEXT	ENDS
PUBLIC	??0Reader@Json@@QAE@ABVFeatures@1@@Z		; Json::Reader::Reader
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Reader@Json@@QAE@ABVFeatures@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$2
__ehfuncinfo$??0Reader@Json@@QAE@ABVFeatures@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0Reader@Json@@QAE@ABVFeatures@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Reader@Json@@QAE@ABVFeatures@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_features$ = 8						; size = 4
??0Reader@Json@@QAE@ABVFeatures@1@@Z PROC		; Json::Reader::Reader, COMDAT
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Reader@Json@@QAE@ABVFeatures@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _features$[ebp]
	mov	cx, WORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+140], cx

; 118  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
__unwindfunclet$??0Reader@Json@@QAE@ABVFeatures@1@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0Reader@Json@@QAE@ABVFeatures@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Reader@Json@@QAE@ABVFeatures@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Reader@Json@@QAE@ABVFeatures@1@@Z ENDP		; Json::Reader::Reader
PUBLIC	?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z	; Json::Reader::parse
PUBLIC	?parse@Reader@Json@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVValue@2@_N@Z ; Json::Reader::parse
EXTRN	__imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ?parse@Reader@Json@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVValue@2@_N@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_end$ = -8						; size = 4
_begin$ = -4						; size = 4
_document$ = 8						; size = 4
_root$ = 12						; size = 4
_collectComments$ = 16					; size = 1
?parse@Reader@Json@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVValue@2@_N@Z PROC ; Json::Reader::parse, COMDAT
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 126  :    document_ = document;

	mov	eax, DWORD PTR _document$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 127  :    const char *begin = document_.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _begin$[ebp], eax

; 128  :    const char *end = begin + document_.length();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	add	eax, DWORD PTR _begin$[ebp]
	mov	DWORD PTR _end$[ebp], eax

; 129  :    return parse( begin, end, root, collectComments );

	movzx	ecx, BYTE PTR _collectComments$[ebp]
	push	ecx
	mov	edx, DWORD PTR _root$[ebp]
	push	edx
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _begin$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z ; Json::Reader::parse

; 130  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?parse@Reader@Json@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVValue@2@_N@Z ENDP ; Json::Reader::parse
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z ; Json::Reader::parse
EXTRN	__imp_??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z$0
__ehfuncinfo$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T64064 = -45						; size = 1
_doc$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_sin$ = 8						; size = 4
_root$ = 12						; size = 4
_collectComments$ = 16					; size = 1
?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z PROC ; Json::Reader::parse, COMDAT
; _this$ = ecx

; 137  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 138  :    //std::istream_iterator<char> begin(sin);
; 139  :    //std::istream_iterator<char> end;
; 140  :    // Those would allow streamed input from a file, if parse() were a
; 141  :    // template function.
; 142  : 
; 143  :    // Since std::string is reference-counted, this at least does not
; 144  :    // create an extra copy.
; 145  :    std::string doc;

	lea	ecx, DWORD PTR _doc$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 146  :    std::getline(sin, doc, (char)EOF);

	push	-1
	lea	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sin$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	add	esp, 12					; 0000000cH

; 147  :    return parse( doc, root, collectComments );

	movzx	edx, BYTE PTR _collectComments$[ebp]
	push	edx
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	lea	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?parse@Reader@Json@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVValue@2@_N@Z ; Json::Reader::parse
	mov	BYTE PTR $T64064[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _doc$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64064[ebp]

; 148  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z$0:
	lea	ecx, DWORD PTR _doc$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z ENDP ; Json::Reader::parse
PUBLIC	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
PUBLIC	??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5ei@ ; `string'
PUBLIC	?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z ; Json::Reader::skipCommentTokens
PUBLIC	?readValue@Reader@Json@@AAE_NXZ			; Json::Reader::readValue
PUBLIC	?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push
PUBLIC	?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop
PUBLIC	?empty@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QBE_NXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty
PUBLIC	?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	?isObject@Value@Json@@QBE_NXZ:PROC		; Json::Value::isObject
EXTRN	?isArray@Value@Json@@QBE_NXZ:PROC		; Json::Value::isArray
EXTRN	?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z:PROC ; Json::Value::setComment
EXTRN	__imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
;	COMDAT ??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5ei@
CONST	SEGMENT
??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5ei@ DB 'A valid JS'
	DB	'ON document must be either an array or an object value.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z$0
__ehfuncinfo$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T64075 = -60						; size = 28
$T64074 = -32						; size = 4
_successful$ = -25					; size = 1
_token$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_beginDoc$ = 8						; size = 4
_endDoc$ = 12						; size = 4
_root$ = 16						; size = 4
_collectComments$ = 20					; size = 1
?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z PROC	; Json::Reader::parse, COMDAT
; _this$ = ecx

; 154  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 155  :    if ( !features_.allowComments_ )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+140]
	test	ecx, ecx
	jne	SHORT $LN6@parse

; 156  :    {
; 157  :       collectComments = false;

	mov	BYTE PTR _collectComments$[ebp], 0
$LN6@parse:

; 158  :    }
; 159  : 
; 160  :    begin_ = beginDoc;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _beginDoc$[ebp]
	mov	DWORD PTR [edx+92], eax

; 161  :    end_ = endDoc;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _endDoc$[ebp]
	mov	DWORD PTR [ecx+96], edx

; 162  :    collectComments_ = collectComments;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _collectComments$[ebp]
	mov	BYTE PTR [eax+142], cl

; 163  :    current_ = begin_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR [edx+100], ecx

; 164  :    lastValueEnd_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+104], 0

; 165  :    lastValue_ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+108], 0

; 166  :    commentsBefore_ = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 167  :    errors_.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear
$LN5@parse:

; 168  :    while ( !nodes_.empty() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QBE_NXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@parse

; 169  :       nodes_.pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop
	jmp	SHORT $LN5@parse
$LN4@parse:

; 170  :    nodes_.push( &root );

	mov	edx, DWORD PTR _root$[ebp]
	mov	DWORD PTR $T64074[ebp], edx
	lea	eax, DWORD PTR $T64074[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push

; 171  :    
; 172  :    bool successful = readValue();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readValue@Reader@Json@@AAE_NXZ		; Json::Reader::readValue
	mov	BYTE PTR _successful$[ebp], al

; 173  :    Token token;
; 174  :    skipCommentTokens( token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z ; Json::Reader::skipCommentTokens

; 175  :    if ( collectComments_  &&  !commentsBefore_.empty() )

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+142]
	test	eax, eax
	je	SHORT $LN3@parse
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@parse

; 176  :       root.setComment( commentsBefore_, commentAfter );

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	ecx, DWORD PTR _root$[ebp]
	call	?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment
$LN3@parse:

; 177  :    if ( features_.strictRoot_ )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+141]
	test	ecx, ecx
	je	SHORT $LN2@parse

; 178  :    {
; 179  :       if ( !root.isArray()  &&  !root.isObject() )

	mov	ecx, DWORD PTR _root$[ebp]
	call	?isArray@Value@Json@@QBE_NXZ		; Json::Value::isArray
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@parse
	mov	ecx, DWORD PTR _root$[ebp]
	call	?isObject@Value@Json@@QBE_NXZ		; Json::Value::isObject
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@parse

; 180  :       {
; 181  :          // Set error location to start of doc, ideally should be first token found in doc
; 182  :          token.type_ = tokenError;

	mov	DWORD PTR _token$[ebp], 13		; 0000000dH

; 183  :          token.start_ = beginDoc;

	mov	ecx, DWORD PTR _beginDoc$[ebp]
	mov	DWORD PTR _token$[ebp+4], ecx

; 184  :          token.end_ = endDoc;

	mov	edx, DWORD PTR _endDoc$[ebp]
	mov	DWORD PTR _token$[ebp+8], edx

; 185  :          addError( "A valid JSON document must be either an array or an object value.",
; 186  :                    token );

	push	OFFSET ??_C@_0EC@HCHNIDLM@A?5valid?5JSON?5document?5must?5be?5ei@
	lea	ecx, DWORD PTR $T64075[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64075[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64075[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 187  :          return false;

	xor	al, al
	jmp	SHORT $LN7@parse
$LN2@parse:

; 188  :       }
; 189  :    }
; 190  :    return successful;

	mov	al, BYTE PTR _successful$[ebp]
$LN7@parse:

; 191  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z$0:
	lea	ecx, DWORD PTR $T64075[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?parse@Reader@Json@@QAE_NPBD0AAVValue@2@_N@Z ENDP	; Json::Reader::parse
PUBLIC	??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5a@ ; `string'
PUBLIC	?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::decodeString
PUBLIC	?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::decodeNumber
PUBLIC	?readArray@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::readArray
PUBLIC	?readObject@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::readObject
PUBLIC	?currentValue@Reader@Json@@AAEAAVValue@2@XZ	; Json::Reader::currentValue
EXTRN	??0Value@Json@@QAE@W4ValueType@1@@Z:PROC	; Json::Value::Value
EXTRN	??1Value@Json@@QAE@XZ:PROC			; Json::Value::~Value
EXTRN	??4Value@Json@@QAEAAV01@ABV01@@Z:PROC		; Json::Value::operator=
EXTRN	??0Value@Json@@QAE@_N@Z:PROC			; Json::Value::Value
;	COMDAT ??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5a@
CONST	SEGMENT
??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5a@ DB 'Syntax err'
	DB	'or: value, object or array expected.', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?readValue@Reader@Json@@AAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$3
__ehfuncinfo$?readValue@Reader@Json@@AAE_NXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?readValue@Reader@Json@@AAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?readValue@Reader@Json@@AAE_NXZ
_TEXT	SEGMENT
tv175 = -124						; size = 4
tv141 = -120						; size = 4
tv82 = -116						; size = 4
_this$ = -112						; size = 4
$T64089 = -108						; size = 28
$T64088 = -77						; size = 1
$T64087 = -76						; size = 16
$T64086 = -60						; size = 16
$T64085 = -44						; size = 16
_successful$ = -25					; size = 1
_token$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
?readValue@Reader@Json@@AAE_NXZ PROC			; Json::Reader::readValue, COMDAT
; _this$ = ecx

; 196  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?readValue@Reader@Json@@AAE_NXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 197  :    Token token;
; 198  :    skipCommentTokens( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z ; Json::Reader::skipCommentTokens

; 199  :    bool successful = true;

	mov	BYTE PTR _successful$[ebp], 1

; 200  : 
; 201  :    if ( collectComments_  &&  !commentsBefore_.empty() )

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+142]
	test	edx, edx
	je	SHORT $LN12@readValue
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@readValue

; 202  :    {
; 203  :       currentValue().setComment( commentsBefore_, commentBefore );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment

; 204  :       commentsBefore_ = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN12@readValue:

; 205  :    }
; 206  : 
; 207  : 
; 208  :    switch ( token.type_ )

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR tv82[ebp], edx
	mov	eax, DWORD PTR tv82[ebp]
	sub	eax, 1
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 8
	ja	$LN2@readValue
	mov	ecx, DWORD PTR tv82[ebp]
	jmp	DWORD PTR $LN20@readValue[ecx*4]
$LN9@readValue:

; 209  :    {
; 210  :    case tokenObjectBegin:
; 211  :       successful = readObject( token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readObject@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readObject
	mov	BYTE PTR _successful$[ebp], al

; 212  :       break;

	jmp	$LN10@readValue
$LN8@readValue:

; 213  :    case tokenArrayBegin:
; 214  :       successful = readArray( token );

	lea	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readArray@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readArray
	mov	BYTE PTR _successful$[ebp], al

; 215  :       break;

	jmp	$LN10@readValue
$LN7@readValue:

; 216  :    case tokenNumber:
; 217  :       successful = decodeNumber( token );

	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::decodeNumber
	mov	BYTE PTR _successful$[ebp], al

; 218  :       break;

	jmp	$LN10@readValue
$LN6@readValue:

; 219  :    case tokenString:
; 220  :       successful = decodeString( token );

	lea	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::decodeString
	mov	BYTE PTR _successful$[ebp], al

; 221  :       break;

	jmp	$LN10@readValue
$LN5@readValue:

; 222  :    case tokenTrue:
; 223  :       currentValue() = true;

	push	1
	lea	ecx, DWORD PTR $T64085[ebp]
	call	??0Value@Json@@QAE@_N@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T64085[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64085[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 224  :       break;

	jmp	$LN10@readValue
$LN4@readValue:

; 225  :    case tokenFalse:
; 226  :       currentValue() = false;

	push	0
	lea	ecx, DWORD PTR $T64086[ebp]
	call	??0Value@Json@@QAE@_N@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T64086[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64086[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 227  :       break;

	jmp	SHORT $LN10@readValue
$LN3@readValue:

; 228  :    case tokenNull:
; 229  :       currentValue() = Value();

	push	0
	lea	ecx, DWORD PTR $T64087[ebp]
	call	??0Value@Json@@QAE@W4ValueType@1@@Z	; Json::Value::Value
	mov	DWORD PTR tv141[ebp], eax
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR tv175[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv175[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64087[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 230  :       break;

	jmp	SHORT $LN10@readValue
$LN2@readValue:

; 231  :    default:
; 232  :       return addError( "Syntax error: value, object or array expected.", token );

	push	OFFSET ??_C@_0CP@GDDNKEK@Syntax?5error?3?5value?0?5object?5or?5a@
	lea	ecx, DWORD PTR $T64089[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	push	0
	lea	ecx, DWORD PTR _token$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64089[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T64088[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64089[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64088[ebp]
	jmp	SHORT $LN13@readValue
$LN10@readValue:

; 233  :    }
; 234  : 
; 235  :    if ( collectComments_ )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+142]
	test	ecx, ecx
	je	SHORT $LN1@readValue

; 236  :    {
; 237  :       lastValueEnd_ = current_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR [edx+104], ecx

; 238  :       lastValue_ = &currentValue();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+108], eax
$LN1@readValue:

; 239  :    }
; 240  : 
; 241  :    return successful;

	mov	al, BYTE PTR _successful$[ebp]
$LN13@readValue:

; 242  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@readValue:
	DD	$LN9@readValue
	DD	$LN2@readValue
	DD	$LN8@readValue
	DD	$LN2@readValue
	DD	$LN6@readValue
	DD	$LN7@readValue
	DD	$LN5@readValue
	DD	$LN4@readValue
	DD	$LN3@readValue
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$0:
	lea	ecx, DWORD PTR $T64085[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$1:
	lea	ecx, DWORD PTR $T64086[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$2:
	lea	ecx, DWORD PTR $T64087[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?readValue@Reader@Json@@AAE_NXZ$3:
	lea	ecx, DWORD PTR $T64089[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?readValue@Reader@Json@@AAE_NXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?readValue@Reader@Json@@AAE_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?readValue@Reader@Json@@AAE_NXZ ENDP			; Json::Reader::readValue
PUBLIC	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::readToken
; Function compile flags: /Odtp
;	COMDAT ?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_token$ = 8						; size = 4
?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z PROC	; Json::Reader::skipCommentTokens, COMDAT
; _this$ = ecx

; 247  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 248  :    if ( features_.allowComments_ )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+140]
	test	ecx, ecx
	je	SHORT $LN5@skipCommen
$LN4@skipCommen:

; 249  :    {
; 250  :       do
; 251  :       {
; 252  :          readToken( token );

	mov	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken

; 253  :       }
; 254  :       while ( token.type_ == tokenComment );

	mov	eax, DWORD PTR _token$[ebp]
	cmp	DWORD PTR [eax], 12			; 0000000cH
	je	SHORT $LN4@skipCommen

; 255  :    }
; 256  :    else

	jmp	SHORT $LN6@skipCommen
$LN5@skipCommen:

; 257  :    {
; 258  :       readToken( token );

	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
$LN6@skipCommen:

; 259  :    }
; 260  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?skipCommentTokens@Reader@Json@@AAEXAAVToken@12@@Z ENDP	; Json::Reader::skipCommentTokens
_TEXT	ENDS
PUBLIC	?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z ; Json::Reader::expectToken
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z$0
__ehfuncinfo$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T64106 = -44						; size = 28
$T64105 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_token$ = 12						; size = 4
_message$ = 16						; size = 4
?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z PROC ; Json::Reader::expectToken, COMDAT
; _this$ = ecx

; 265  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 266  :    readToken( token );

	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken

; 267  :    if ( token.type_ != type )

	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _type$[ebp]
	je	SHORT $LN1@expectToke

; 268  :       return addError( message, token );

	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64106[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64106[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T64105[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64106[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64105[ebp]
	jmp	SHORT $LN2@expectToke
$LN1@expectToke:

; 269  :    return true;

	mov	al, 1
$LN2@expectToke:

; 270  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z$0:
	lea	ecx, DWORD PTR $T64106[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?expectToken@Reader@Json@@AAE_NW4TokenType@12@AAVToken@12@PBD@Z ENDP ; Json::Reader::expectToken
PUBLIC	??_C@_03KNPGGKC@ull?$AA@			; `string'
PUBLIC	??_C@_04KCECFHEP@alse?$AA@			; `string'
PUBLIC	?match@Reader@Json@@AAE_NPBDH@Z			; Json::Reader::match
PUBLIC	??_C@_03FFDNHNKN@rue?$AA@			; `string'
PUBLIC	?readNumber@Reader@Json@@AAEXXZ			; Json::Reader::readNumber
PUBLIC	?readComment@Reader@Json@@AAE_NXZ		; Json::Reader::readComment
PUBLIC	?readString@Reader@Json@@AAE_NXZ		; Json::Reader::readString
PUBLIC	?getNextChar@Reader@Json@@AAEDXZ		; Json::Reader::getNextChar
PUBLIC	?skipSpaces@Reader@Json@@AAEXXZ			; Json::Reader::skipSpaces
;	COMDAT ??_C@_03KNPGGKC@ull?$AA@
CONST	SEGMENT
??_C@_03KNPGGKC@ull?$AA@ DB 'ull', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KCECFHEP@alse?$AA@
CONST	SEGMENT
??_C@_04KCECFHEP@alse?$AA@ DB 'alse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFDNHNKN@rue?$AA@
CONST	SEGMENT
??_C@_03FFDNHNKN@rue?$AA@ DB 'rue', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?readToken@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv70 = -12						; size = 4
_this$ = -8						; size = 4
_c$ = -2						; size = 1
_ok$ = -1						; size = 1
_token$ = 8						; size = 4
?readToken@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::readToken, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 276  :    skipSpaces();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?skipSpaces@Reader@Json@@AAEXXZ		; Json::Reader::skipSpaces

; 277  :    token.start_ = current_;

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR [eax+4], edx

; 278  :    Char c = getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	mov	BYTE PTR _c$[ebp], al

; 279  :    bool ok = true;

	mov	BYTE PTR _ok$[ebp], 1

; 280  :    switch ( c )

	movsx	eax, BYTE PTR _c$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 125		; 0000007dH
	ja	$LN2@readToken
	mov	ecx, DWORD PTR tv70[ebp]
	movzx	edx, BYTE PTR $LN20@readToken[ecx]
	jmp	DWORD PTR $LN21@readToken[edx*4]
$LN15@readToken:

; 281  :    {
; 282  :    case '{':
; 283  :       token.type_ = tokenObjectBegin;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 1

; 284  :       break;

	jmp	$LN16@readToken
$LN14@readToken:

; 285  :    case '}':
; 286  :       token.type_ = tokenObjectEnd;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 2

; 287  :       break;

	jmp	$LN16@readToken
$LN13@readToken:

; 288  :    case '[':
; 289  :       token.type_ = tokenArrayBegin;

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx], 3

; 290  :       break;

	jmp	$LN16@readToken
$LN12@readToken:

; 291  :    case ']':
; 292  :       token.type_ = tokenArrayEnd;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 4

; 293  :       break;

	jmp	$LN16@readToken
$LN11@readToken:

; 294  :    case '"':
; 295  :       token.type_ = tokenString;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 5

; 296  :       ok = readString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readString@Reader@Json@@AAE_NXZ	; Json::Reader::readString
	mov	BYTE PTR _ok$[ebp], al

; 297  :       break;

	jmp	$LN16@readToken
$LN10@readToken:

; 298  :    case '/':
; 299  :       token.type_ = tokenComment;

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx], 12			; 0000000cH

; 300  :       ok = readComment();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readComment@Reader@Json@@AAE_NXZ	; Json::Reader::readComment
	mov	BYTE PTR _ok$[ebp], al

; 301  :       break;

	jmp	$LN16@readToken
$LN9@readToken:

; 302  :    case '0':
; 303  :    case '1':
; 304  :    case '2':
; 305  :    case '3':
; 306  :    case '4':
; 307  :    case '5':
; 308  :    case '6':
; 309  :    case '7':
; 310  :    case '8':
; 311  :    case '9':
; 312  :    case '-':
; 313  :       token.type_ = tokenNumber;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 6

; 314  :       readNumber();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readNumber@Reader@Json@@AAEXXZ		; Json::Reader::readNumber

; 315  :       break;

	jmp	SHORT $LN16@readToken
$LN8@readToken:

; 316  :    case 't':
; 317  :       token.type_ = tokenTrue;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 7

; 318  :       ok = match( "rue", 3 );

	push	3
	push	OFFSET ??_C@_03FFDNHNKN@rue?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?match@Reader@Json@@AAE_NPBDH@Z		; Json::Reader::match
	mov	BYTE PTR _ok$[ebp], al

; 319  :       break;

	jmp	SHORT $LN16@readToken
$LN7@readToken:

; 320  :    case 'f':
; 321  :       token.type_ = tokenFalse;

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx], 8

; 322  :       ok = match( "alse", 4 );

	push	4
	push	OFFSET ??_C@_04KCECFHEP@alse?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?match@Reader@Json@@AAE_NPBDH@Z		; Json::Reader::match
	mov	BYTE PTR _ok$[ebp], al

; 323  :       break;

	jmp	SHORT $LN16@readToken
$LN6@readToken:

; 324  :    case 'n':
; 325  :       token.type_ = tokenNull;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 9

; 326  :       ok = match( "ull", 3 );

	push	3
	push	OFFSET ??_C@_03KNPGGKC@ull?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?match@Reader@Json@@AAE_NPBDH@Z		; Json::Reader::match
	mov	BYTE PTR _ok$[ebp], al

; 327  :       break;

	jmp	SHORT $LN16@readToken
$LN5@readToken:

; 328  :    case ',':
; 329  :       token.type_ = tokenArraySeparator;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx], 10			; 0000000aH

; 330  :       break;

	jmp	SHORT $LN16@readToken
$LN4@readToken:

; 331  :    case ':':
; 332  :       token.type_ = tokenMemberSeparator;

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx], 11			; 0000000bH

; 333  :       break;

	jmp	SHORT $LN16@readToken
$LN3@readToken:

; 334  :    case 0:
; 335  :       token.type_ = tokenEndOfStream;

	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax], 0

; 336  :       break;

	jmp	SHORT $LN16@readToken
$LN2@readToken:

; 337  :    default:
; 338  :       ok = false;

	mov	BYTE PTR _ok$[ebp], 0
$LN16@readToken:

; 339  :       break;
; 340  :    }
; 341  :    if ( !ok )

	movzx	ecx, BYTE PTR _ok$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@readToken

; 342  :       token.type_ = tokenError;

	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx], 13			; 0000000dH
$LN1@readToken:

; 343  :    token.end_ = current_;

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR [eax+8], edx

; 344  :    return true;

	mov	al, 1

; 345  : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN21@readToken:
	DD	$LN3@readToken
	DD	$LN11@readToken
	DD	$LN5@readToken
	DD	$LN9@readToken
	DD	$LN10@readToken
	DD	$LN4@readToken
	DD	$LN13@readToken
	DD	$LN12@readToken
	DD	$LN7@readToken
	DD	$LN6@readToken
	DD	$LN8@readToken
	DD	$LN15@readToken
	DD	$LN14@readToken
	DD	$LN2@readToken
$LN20@readToken:
	DB	0
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	1
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	2
	DB	3
	DB	13					; 0000000dH
	DB	4
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	5
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	6
	DB	13					; 0000000dH
	DB	7
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	8
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	9
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	10					; 0000000aH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	11					; 0000000bH
	DB	13					; 0000000dH
	DB	12					; 0000000cH
?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::readToken
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?skipSpaces@Reader@Json@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$56327 = -1						; size = 1
?skipSpaces@Reader@Json@@AAEXXZ PROC			; Json::Reader::skipSpaces, COMDAT
; _this$ = ecx

; 350  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN5@skipSpaces:

; 351  :    while ( current_ != end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+100]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN6@skipSpaces

; 352  :    {
; 353  :       Char c = *current_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$56327[ebp], dl

; 354  :       if ( c == ' '  ||  c == '\t'  ||  c == '\r'  ||  c == '\n' )

	movsx	eax, BYTE PTR _c$56327[ebp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN2@skipSpaces
	movsx	ecx, BYTE PTR _c$56327[ebp]
	cmp	ecx, 9
	je	SHORT $LN2@skipSpaces
	movsx	edx, BYTE PTR _c$56327[ebp]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN2@skipSpaces
	movsx	eax, BYTE PTR _c$56327[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN3@skipSpaces
$LN2@skipSpaces:

; 355  :          ++current_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], edx

; 356  :       else

	jmp	SHORT $LN1@skipSpaces
$LN3@skipSpaces:

; 357  :          break;

	jmp	SHORT $LN6@skipSpaces
$LN1@skipSpaces:

; 358  :    }

	jmp	SHORT $LN5@skipSpaces
$LN6@skipSpaces:

; 359  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?skipSpaces@Reader@Json@@AAEXXZ ENDP			; Json::Reader::skipSpaces
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?match@Reader@Json@@AAE_NPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = -4						; size = 4
_pattern$ = 8						; size = 4
_patternLength$ = 12					; size = 4
?match@Reader@Json@@AAE_NPBDH@Z PROC			; Json::Reader::match, COMDAT
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 366  :    if ( end_ - current_ < patternLength )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+96]
	sub	edx, DWORD PTR [ecx+100]
	cmp	edx, DWORD PTR _patternLength$[ebp]
	jge	SHORT $LN4@match

; 367  :       return false;

	xor	al, al
	jmp	SHORT $LN5@match
$LN4@match:

; 368  :    int index = patternLength;

	mov	eax, DWORD PTR _patternLength$[ebp]
	mov	DWORD PTR _index$[ebp], eax
$LN3@match:

; 369  :    while ( index-- )

	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _index$[ebp]
	sub	edx, 1
	mov	DWORD PTR _index$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN2@match

; 370  :       if ( current_[index] != pattern[index] )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _index$[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _pattern$[ebp]
	add	ecx, DWORD PTR _index$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN1@match

; 371  :          return false;

	xor	al, al
	jmp	SHORT $LN5@match
$LN1@match:

; 372  :    current_ += patternLength;

	jmp	SHORT $LN3@match
$LN2@match:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	add	ecx, DWORD PTR _patternLength$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], ecx

; 373  :    return true;

	mov	al, 1
$LN5@match:

; 374  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?match@Reader@Json@@AAE_NPBDH@Z ENDP			; Json::Reader::match
_TEXT	ENDS
PUBLIC	?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z ; Json::Reader::addComment
PUBLIC	?readCppStyleComment@Reader@Json@@AAE_NXZ	; Json::Reader::readCppStyleComment
PUBLIC	?readCStyleComment@Reader@Json@@AAE_NXZ		; Json::Reader::readCStyleComment
; Function compile flags: /Odtp
;	COMDAT ?readComment@Reader@Json@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_placement$56353 = -12					; size = 4
_c$ = -6						; size = 1
_successful$ = -5					; size = 1
_commentBegin$ = -4					; size = 4
?readComment@Reader@Json@@AAE_NXZ PROC			; Json::Reader::readComment, COMDAT
; _this$ = ecx

; 379  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 380  :    Location commentBegin = current_ - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	sub	ecx, 1
	mov	DWORD PTR _commentBegin$[ebp], ecx

; 381  :    Char c = getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	mov	BYTE PTR _c$[ebp], al

; 382  :    bool successful = false;

	mov	BYTE PTR _successful$[ebp], 0

; 383  :    if ( c == '*' )

	movsx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN8@readCommen

; 384  :       successful = readCStyleComment();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readCStyleComment@Reader@Json@@AAE_NXZ	; Json::Reader::readCStyleComment
	mov	BYTE PTR _successful$[ebp], al
	jmp	SHORT $LN7@readCommen
$LN8@readCommen:

; 385  :    else if ( c == '/' )

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN7@readCommen

; 386  :       successful = readCppStyleComment();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readCppStyleComment@Reader@Json@@AAE_NXZ ; Json::Reader::readCppStyleComment
	mov	BYTE PTR _successful$[ebp], al
$LN7@readCommen:

; 387  :    if ( !successful )

	movzx	ecx, BYTE PTR _successful$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@readCommen

; 388  :       return false;

	xor	al, al
	jmp	SHORT $LN9@readCommen
$LN5@readCommen:

; 389  : 
; 390  :    if ( collectComments_ )

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+142]
	test	eax, eax
	je	SHORT $LN4@readCommen

; 391  :    {
; 392  :       CommentPlacement placement = commentBefore;

	mov	DWORD PTR _placement$56353[ebp], 0

; 393  :       if ( lastValueEnd_  &&  !containsNewLine( lastValueEnd_, commentBegin ) )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN3@readCommen
	mov	edx, DWORD PTR _commentBegin$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	call	?containsNewLine@Json@@YA_NPBD0@Z	; Json::containsNewLine
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@readCommen

; 394  :       {
; 395  :          if ( c != '*'  ||  !containsNewLine( commentBegin, current_ ) )

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN1@readCommen
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR _commentBegin$[ebp]
	push	eax
	call	?containsNewLine@Json@@YA_NPBD0@Z	; Json::containsNewLine
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@readCommen
$LN1@readCommen:

; 396  :             placement = commentAfterOnSameLine;

	mov	DWORD PTR _placement$56353[ebp], 1
$LN3@readCommen:

; 397  :       }
; 398  : 
; 399  :       addComment( commentBegin, current_, placement );

	mov	edx, DWORD PTR _placement$56353[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _commentBegin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z ; Json::Reader::addComment
$LN4@readCommen:

; 400  :    }
; 401  :    return true;

	mov	al, 1
$LN9@readCommen:

; 402  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readComment@Reader@Json@@AAE_NXZ ENDP			; Json::Reader::readComment
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?containsNewLine@Json@@YA_NPBD0@Z
_TEXT	SEGMENT
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
?containsNewLine@Json@@YA_NPBD0@Z PROC			; Json::containsNewLine, COMDAT

; 62   : {

	push	ebp
	mov	ebp, esp

; 63   :    for ( ;begin < end; ++begin )

	jmp	SHORT $LN5@containsNe
$LN4@containsNe:
	mov	eax, DWORD PTR _begin$[ebp]
	add	eax, 1
	mov	DWORD PTR _begin$[ebp], eax
$LN5@containsNe:
	mov	ecx, DWORD PTR _begin$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jae	SHORT $LN3@containsNe

; 64   :       if ( *begin == '\n'  ||  *begin == '\r' )

	mov	edx, DWORD PTR _begin$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN1@containsNe
	mov	ecx, DWORD PTR _begin$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN2@containsNe
$LN1@containsNe:

; 65   :          return true;

	mov	al, 1
	jmp	SHORT $LN6@containsNe
$LN2@containsNe:

; 66   :    return false;

	jmp	SHORT $LN4@containsNe
$LN3@containsNe:
	xor	al, al
$LN6@containsNe:

; 67   : }

	pop	ebp
	ret	0
?containsNewLine@Json@@YA_NPBD0@Z ENDP			; Json::containsNewLine
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z:PROC
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z$1
__ehfuncinfo$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z
_TEXT	SEGMENT
tv95 = -88						; size = 4
tv129 = -84						; size = 4
tv93 = -80						; size = 4
tv128 = -76						; size = 4
_this$ = -72						; size = 4
$T64129 = -68						; size = 28
$T64128 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
_placement$ = 16					; size = 4
?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z PROC ; Json::Reader::addComment, COMDAT
; _this$ = ecx

; 409  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 410  :    assert( collectComments_ );
; 411  :    if ( placement == commentAfterOnSameLine )

	cmp	DWORD PTR _placement$[ebp], 1
	jne	SHORT $LN3@addComment

; 412  :    {
; 413  :       assert( lastValue_ != 0 );
; 414  :       lastValue_->setComment( std::string( begin, end ), placement );

	mov	eax, DWORD PTR _placement$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _begin$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T64128[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR tv128[ebp], eax
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR tv93[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv93[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	call	?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64128[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 415  :    }
; 416  :    else

	jmp	SHORT $LN4@addComment
$LN3@addComment:

; 417  :    {
; 418  :       if ( !commentsBefore_.empty() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@addComment

; 419  :          commentsBefore_ += "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN1@addComment:

; 420  :       commentsBefore_ += std::string( begin, end );

	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _begin$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T64129[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR tv129[ebp], eax
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR tv95[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv95[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64129[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@addComment:

; 421  :    }
; 422  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z$0:
	lea	ecx, DWORD PTR $T64128[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z$1:
	lea	ecx, DWORD PTR $T64129[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?addComment@Reader@Json@@AAEXPBD0W4CommentPlacement@2@@Z ENDP ; Json::Reader::addComment
; Function compile flags: /Odtp
;	COMDAT ?readCStyleComment@Reader@Json@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$56471 = -1						; size = 1
?readCStyleComment@Reader@Json@@AAE_NXZ PROC		; Json::Reader::readCStyleComment, COMDAT
; _this$ = ecx

; 427  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN3@readCStyle:

; 428  :    while ( current_ != end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+100]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN2@readCStyle

; 429  :    {
; 430  :       Char c = getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	mov	BYTE PTR _c$56471[ebp], al

; 431  :       if ( c == '*'  &&  *current_ == '/' )

	movsx	eax, BYTE PTR _c$56471[ebp]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN1@readCStyle
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN1@readCStyle

; 432  :          break;

	jmp	SHORT $LN2@readCStyle
$LN1@readCStyle:

; 433  :    }

	jmp	SHORT $LN3@readCStyle
$LN2@readCStyle:

; 434  :    return getNextChar() == '/';

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	movsx	ecx, al
	xor	eax, eax
	cmp	ecx, 47					; 0000002fH
	sete	al

; 435  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readCStyleComment@Reader@Json@@AAE_NXZ ENDP		; Json::Reader::readCStyleComment
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?readCppStyleComment@Reader@Json@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$56479 = -1						; size = 1
?readCppStyleComment@Reader@Json@@AAE_NXZ PROC		; Json::Reader::readCppStyleComment, COMDAT
; _this$ = ecx

; 440  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN4@readCppSty:

; 441  :    while ( current_ != end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+100]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN3@readCppSty

; 442  :    {
; 443  :       Char c = getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	mov	BYTE PTR _c$56479[ebp], al

; 444  :       if (  c == '\r'  ||  c == '\n' )

	movsx	eax, BYTE PTR _c$56479[ebp]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN1@readCppSty
	movsx	ecx, BYTE PTR _c$56479[ebp]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN2@readCppSty
$LN1@readCppSty:

; 445  :          break;

	jmp	SHORT $LN3@readCppSty
$LN2@readCppSty:

; 446  :    }

	jmp	SHORT $LN4@readCppSty
$LN3@readCppSty:

; 447  :    return true;

	mov	al, 1

; 448  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readCppStyleComment@Reader@Json@@AAE_NXZ ENDP		; Json::Reader::readCppStyleComment
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?readNumber@Reader@Json@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?readNumber@Reader@Json@@AAEXXZ PROC			; Json::Reader::readNumber, COMDAT
; _this$ = ecx

; 453  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@readNumber:

; 454  :    while ( current_ != end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+100]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN5@readNumber

; 455  :    {
; 456  :       if ( !(*current_ >= '0'  &&  *current_ <= '9')  &&
; 457  :            !in( *current_, '.', 'e', 'E', '+', '-' ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN1@readNumber
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 57					; 00000039H
	jle	SHORT $LN2@readNumber
$LN1@readNumber:
	push	45					; 0000002dH
	push	43					; 0000002bH
	push	69					; 00000045H
	push	101					; 00000065H
	push	46					; 0000002eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	?in@Json@@YA_NDDDDDD@Z			; Json::in
	add	esp, 24					; 00000018H
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@readNumber

; 458  :          break;

	jmp	SHORT $LN5@readNumber
$LN2@readNumber:

; 459  :       ++current_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], edx

; 460  :    }

	jmp	SHORT $LN4@readNumber
$LN5@readNumber:

; 461  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readNumber@Reader@Json@@AAEXXZ ENDP			; Json::Reader::readNumber
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?in@Json@@YA_NDDDDDD@Z
_TEXT	SEGMENT
tv79 = -4						; size = 4
_c$ = 8							; size = 1
_c1$ = 12						; size = 1
_c2$ = 16						; size = 1
_c3$ = 20						; size = 1
_c4$ = 24						; size = 1
_c5$ = 28						; size = 1
?in@Json@@YA_NDDDDDD@Z PROC				; Json::in, COMDAT

; 54   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 55   :    return c == c1  ||  c == c2  ||  c == c3  ||  c == c4  ||  c == c5;

	movsx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _c1$[ebp]
	cmp	eax, ecx
	je	SHORT $LN3@in
	movsx	edx, BYTE PTR _c$[ebp]
	movsx	eax, BYTE PTR _c2$[ebp]
	cmp	edx, eax
	je	SHORT $LN3@in
	movsx	ecx, BYTE PTR _c$[ebp]
	movsx	edx, BYTE PTR _c3$[ebp]
	cmp	ecx, edx
	je	SHORT $LN3@in
	movsx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _c4$[ebp]
	cmp	eax, ecx
	je	SHORT $LN3@in
	movsx	edx, BYTE PTR _c$[ebp]
	movsx	eax, BYTE PTR _c5$[ebp]
	cmp	edx, eax
	je	SHORT $LN3@in
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN4@in
$LN3@in:
	mov	DWORD PTR tv79[ebp], 1
$LN4@in:
	mov	al, BYTE PTR tv79[ebp]

; 56   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?in@Json@@YA_NDDDDDD@Z ENDP				; Json::in
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?readString@Reader@Json@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = -1						; size = 1
?readString@Reader@Json@@AAE_NXZ PROC			; Json::Reader::readString, COMDAT
; _this$ = ecx

; 465  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 466  :    Char c = 0;

	mov	BYTE PTR _c$[ebp], 0
$LN5@readString:

; 467  :    while ( current_ != end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+100]
	cmp	edx, DWORD PTR [ecx+96]
	je	SHORT $LN4@readString

; 468  :    {
; 469  :       c = getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	mov	BYTE PTR _c$[ebp], al

; 470  :       if ( c == '\\' )

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN3@readString

; 471  :          getNextChar();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNextChar@Reader@Json@@AAEDXZ	; Json::Reader::getNextChar
	jmp	SHORT $LN2@readString
$LN3@readString:

; 472  :       else if ( c == '"' )

	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN2@readString

; 473  :          break;

	jmp	SHORT $LN4@readString
$LN2@readString:

; 474  :    }

	jmp	SHORT $LN5@readString
$LN4@readString:

; 475  :    return c == '"';

	movsx	edx, BYTE PTR _c$[ebp]
	xor	eax, eax
	cmp	edx, 34					; 00000022H
	sete	al

; 476  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?readString@Reader@Json@@AAE_NXZ ENDP			; Json::Reader::readString
_TEXT	ENDS
PUBLIC	??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5nam@ ; `string'
PUBLIC	??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5dec@ ; `string'
PUBLIC	?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
PUBLIC	??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member?5@ ; `string'
PUBLIC	?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
PUBLIC	?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Reader::decodeString
PUBLIC	__$ArrayPad$
EXTRN	??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Json::Value::operator[]
;	COMDAT ??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5nam@
CONST	SEGMENT
??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5nam@ DB 'Missin'
	DB	'g ''}'' or object member name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5dec@
CONST	SEGMENT
??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5dec@ DB 'Mi'
	DB	'ssing '','' or ''}'' in object declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member?5@
CONST	SEGMENT
??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member?5@ DB 'Missing '
	DB	''':'' after object member name', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$4
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?readObject@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv203 = -220						; size = 4
tv65 = -216						; size = 4
_this$ = -212						; size = 4
$T64164 = -208						; size = 28
$T64163 = -178						; size = 1
$T64162 = -177						; size = 1
$T64161 = -176						; size = 28
$T64160 = -146						; size = 1
$T64159 = -145						; size = 1
$T64158 = -144						; size = 4
$T64157 = -140						; size = 28
$T64156 = -111						; size = 1
$T64155 = -110						; size = 1
$T64154 = -109						; size = 1
$T64153 = -108						; size = 16
_finalizeTokenOk$56537 = -89				; size = 1
_colon$56520 = -88					; size = 12
_comma$56531 = -76					; size = 12
_initialTokenOk$56510 = -62				; size = 1
_ok$56528 = -61						; size = 1
_value$56526 = -60					; size = 4
_tokenName$ = -56					; size = 12
_name$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_tokenStart$ = 8					; size = 4
?readObject@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::readObject, COMDAT
; _this$ = ecx

; 481  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 482  :    Token tokenName;
; 483  :    std::string name;

	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 484  :    currentValue() = Value( objectValue );

	push	7
	lea	ecx, DWORD PTR $T64153[ebp]
	call	??0Value@Json@@QAE@W4ValueType@1@@Z	; Json::Value::Value
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv203[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv203[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T64153[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
$LN16@readObject:

; 485  :    while ( readToken( tokenName ) )

	lea	edx, DWORD PTR _tokenName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	movzx	eax, al
	test	eax, eax
	je	$LN15@readObject

; 486  :    {
; 487  :       bool initialTokenOk = true;

	mov	BYTE PTR _initialTokenOk$56510[ebp], 1
$LN14@readObject:

; 488  :       while ( tokenName.type_ == tokenComment  &&  initialTokenOk )

	cmp	DWORD PTR _tokenName$[ebp], 12		; 0000000cH
	jne	SHORT $LN13@readObject
	movzx	ecx, BYTE PTR _initialTokenOk$56510[ebp]
	test	ecx, ecx
	je	SHORT $LN13@readObject

; 489  :          initialTokenOk = readToken( tokenName );

	lea	edx, DWORD PTR _tokenName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	mov	BYTE PTR _initialTokenOk$56510[ebp], al
	jmp	SHORT $LN14@readObject
$LN13@readObject:

; 490  :       if  ( !initialTokenOk )

	movzx	eax, BYTE PTR _initialTokenOk$56510[ebp]
	test	eax, eax
	jne	SHORT $LN12@readObject

; 491  :          break;

	jmp	$LN15@readObject
$LN12@readObject:

; 492  :       if ( tokenName.type_ == tokenObjectEnd  &&  name.empty() )  // empty object

	cmp	DWORD PTR _tokenName$[ebp], 2
	jne	SHORT $LN11@readObject
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@readObject

; 493  :          return true;

	mov	BYTE PTR $T64154[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64154[ebp]
	jmp	$LN17@readObject
$LN11@readObject:

; 494  :       if ( tokenName.type_ != tokenString )

	cmp	DWORD PTR _tokenName$[ebp], 5
	je	SHORT $LN10@readObject

; 495  :          break;

	jmp	$LN15@readObject
$LN10@readObject:

; 496  :       
; 497  :       name = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 498  :       if ( !decodeString( tokenName, name ) )

	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	lea	eax, DWORD PTR _tokenName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Reader::decodeString
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@readObject

; 499  :          return recoverFromError( tokenObjectEnd );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	mov	BYTE PTR $T64155[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64155[ebp]
	jmp	$LN17@readObject
$LN9@readObject:

; 500  : 
; 501  :       Token colon;
; 502  :       if ( !readToken( colon ) ||  colon.type_ != tokenMemberSeparator )

	lea	edx, DWORD PTR _colon$56520[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@readObject
	cmp	DWORD PTR _colon$56520[ebp], 11		; 0000000bH
	je	SHORT $LN8@readObject
$LN7@readObject:

; 503  :       {
; 504  :          return addErrorAndRecover( "Missing ':' after object member name", 
; 505  :                                     colon, 
; 506  :                                     tokenObjectEnd );

	push	OFFSET ??_C@_0CF@GCCDMCPH@Missing?5?8?3?8?5after?5object?5member?5@
	lea	ecx, DWORD PTR $T64157[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	2
	lea	ecx, DWORD PTR _colon$56520[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64157[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
	mov	BYTE PTR $T64156[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T64157[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64156[ebp]
	jmp	$LN17@readObject
$LN8@readObject:

; 507  :       }
; 508  :       Value &value = currentValue()[ name ];

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
	mov	DWORD PTR _value$56526[ebp], eax

; 509  :       nodes_.push( &value );

	mov	ecx, DWORD PTR _value$56526[ebp]
	mov	DWORD PTR $T64158[ebp], ecx
	lea	edx, DWORD PTR $T64158[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push

; 510  :       bool ok = readValue();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readValue@Reader@Json@@AAE_NXZ		; Json::Reader::readValue
	mov	BYTE PTR _ok$56528[ebp], al

; 511  :       nodes_.pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop

; 512  :       if ( !ok ) // error already set

	movzx	eax, BYTE PTR _ok$56528[ebp]
	test	eax, eax
	jne	SHORT $LN6@readObject

; 513  :          return recoverFromError( tokenObjectEnd );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	mov	BYTE PTR $T64159[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64159[ebp]
	jmp	$LN17@readObject
$LN6@readObject:

; 514  : 
; 515  :       Token comma;
; 516  :       if ( !readToken( comma )
; 517  :             ||  ( comma.type_ != tokenObjectEnd  &&  
; 518  :                   comma.type_ != tokenArraySeparator &&
; 519  : 		  comma.type_ != tokenComment ) )

	lea	ecx, DWORD PTR _comma$56531[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@readObject
	cmp	DWORD PTR _comma$56531[ebp], 2
	je	SHORT $LN5@readObject
	cmp	DWORD PTR _comma$56531[ebp], 10		; 0000000aH
	je	SHORT $LN5@readObject
	cmp	DWORD PTR _comma$56531[ebp], 12		; 0000000cH
	je	SHORT $LN5@readObject
$LN4@readObject:

; 520  :       {
; 521  :          return addErrorAndRecover( "Missing ',' or '}' in object declaration", 
; 522  :                                     comma, 
; 523  :                                     tokenObjectEnd );

	push	OFFSET ??_C@_0CJ@NGKOAFKA@Missing?5?8?0?8?5or?5?8?$HN?8?5in?5object?5dec@
	lea	ecx, DWORD PTR $T64161[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	2
	lea	eax, DWORD PTR _comma$56531[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64161[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
	mov	BYTE PTR $T64160[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T64161[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64160[ebp]
	jmp	$LN17@readObject
$LN5@readObject:

; 524  :       }
; 525  :       bool finalizeTokenOk = true;

	mov	BYTE PTR _finalizeTokenOk$56537[ebp], 1
$LN3@readObject:

; 526  :       while ( comma.type_ == tokenComment &&
; 527  :               finalizeTokenOk )

	cmp	DWORD PTR _comma$56531[ebp], 12		; 0000000cH
	jne	SHORT $LN2@readObject
	movzx	edx, BYTE PTR _finalizeTokenOk$56537[ebp]
	test	edx, edx
	je	SHORT $LN2@readObject

; 528  :          finalizeTokenOk = readToken( comma );

	lea	eax, DWORD PTR _comma$56531[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	mov	BYTE PTR _finalizeTokenOk$56537[ebp], al
	jmp	SHORT $LN3@readObject
$LN2@readObject:

; 529  :       if ( comma.type_ == tokenObjectEnd )

	cmp	DWORD PTR _comma$56531[ebp], 2
	jne	SHORT $LN1@readObject

; 530  :          return true;

	mov	BYTE PTR $T64162[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64162[ebp]
	jmp	SHORT $LN17@readObject
$LN1@readObject:

; 531  :    }

	jmp	$LN16@readObject
$LN15@readObject:

; 532  :    return addErrorAndRecover( "Missing '}' or object member name", 
; 533  :                               tokenName, 
; 534  :                               tokenObjectEnd );

	push	OFFSET ??_C@_0CC@JNCGHFHN@Missing?5?8?$HN?8?5or?5object?5member?5nam@
	lea	ecx, DWORD PTR $T64164[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	push	2
	lea	ecx, DWORD PTR _tokenName$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64164[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
	mov	BYTE PTR $T64163[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T64164[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64163[ebp]
$LN17@readObject:

; 535  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T64153[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$2:
	lea	ecx, DWORD PTR $T64157[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$3:
	lea	ecx, DWORD PTR $T64161[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z$4:
	lea	ecx, DWORD PTR $T64164[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-212]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?readObject@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?readObject@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::readObject
PUBLIC	??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5decl@ ; `string'
EXTRN	??AValue@Json@@QAEAAV01@I@Z:PROC		; Json::Value::operator[]
;	COMDAT ??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5decl@
CONST	SEGMENT
??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5decl@ DB 'Mi'
	DB	'ssing '','' or '']'' in array declaration', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z$1
__ehfuncinfo$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?readArray@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv141 = -124						; size = 4
tv86 = -120						; size = 4
tv158 = -116						; size = 4
tv160 = -112						; size = 4
_this$ = -108						; size = 4
$T64183 = -104						; size = 28
$T64182 = -73						; size = 1
$T64179 = -72						; size = 4
$T64178 = -68						; size = 16
_badTokenType$56565 = -46				; size = 1
_ok$56559 = -45						; size = 1
_token$56561 = -44					; size = 12
_value$56557 = -32					; size = 4
_endArray$56552 = -28					; size = 12
_index$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_tokenStart$ = 8					; size = 4
?readArray@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::readArray, COMDAT
; _this$ = ecx

; 540  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 541  :    currentValue() = Value( arrayValue );

	push	6
	lea	ecx, DWORD PTR $T64178[ebp]
	call	??0Value@Json@@QAE@W4ValueType@1@@Z	; Json::Value::Value
	mov	DWORD PTR tv160[ebp], eax
	mov	eax, DWORD PTR tv160[ebp]
	mov	DWORD PTR tv158[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64178[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 542  :    skipSpaces();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?skipSpaces@Reader@Json@@AAEXXZ		; Json::Reader::skipSpaces

; 543  :    if ( *current_ == ']' ) // empty array

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 93					; 0000005dH
	jne	SHORT $LN9@readArray

; 544  :    {
; 545  :       Token endArray;
; 546  :       readToken( endArray );

	lea	edx, DWORD PTR _endArray$56552[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken

; 547  :       return true;

	mov	al, 1
	jmp	$LN10@readArray
$LN9@readArray:

; 548  :    }
; 549  :    int index = 0;

	mov	DWORD PTR _index$[ebp], 0
$LN8@readArray:

; 550  :    while ( true )

	mov	eax, 1
	test	eax, eax
	je	$LN7@readArray

; 551  :    {
; 552  :       Value &value = currentValue()[ index++ ];

	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	mov	edx, DWORD PTR tv86[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??AValue@Json@@QAEAAV01@I@Z		; Json::Value::operator[]
	mov	DWORD PTR _value$56557[ebp], eax
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax

; 553  :       nodes_.push( &value );

	mov	ecx, DWORD PTR _value$56557[ebp]
	mov	DWORD PTR $T64179[ebp], ecx
	lea	edx, DWORD PTR $T64179[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push

; 554  :       bool ok = readValue();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?readValue@Reader@Json@@AAE_NXZ		; Json::Reader::readValue
	mov	BYTE PTR _ok$56559[ebp], al

; 555  :       nodes_.pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop

; 556  :       if ( !ok ) // error already set

	movzx	eax, BYTE PTR _ok$56559[ebp]
	test	eax, eax
	jne	SHORT $LN6@readArray

; 557  :          return recoverFromError( tokenArrayEnd );

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ; Json::Reader::recoverFromError
	jmp	$LN10@readArray
$LN6@readArray:

; 558  : 
; 559  :       Token token;
; 560  :       // Accept Comment after last item in the array.
; 561  :       ok = readToken( token );

	lea	ecx, DWORD PTR _token$56561[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	mov	BYTE PTR _ok$56559[ebp], al
$LN5@readArray:

; 562  :       while ( token.type_ == tokenComment  &&  ok )

	cmp	DWORD PTR _token$56561[ebp], 12		; 0000000cH
	jne	SHORT $LN4@readArray
	movzx	edx, BYTE PTR _ok$56559[ebp]
	test	edx, edx
	je	SHORT $LN4@readArray

; 563  :       {
; 564  :          ok = readToken( token );

	lea	eax, DWORD PTR _token$56561[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	mov	BYTE PTR _ok$56559[ebp], al

; 565  :       }

	jmp	SHORT $LN5@readArray
$LN4@readArray:

; 566  :       bool badTokenType = ( token.type_ == tokenArraySeparator  &&  
; 567  :                             token.type_ == tokenArrayEnd );

	cmp	DWORD PTR _token$56561[ebp], 10		; 0000000aH
	jne	SHORT $LN12@readArray
	cmp	DWORD PTR _token$56561[ebp], 4
	jne	SHORT $LN12@readArray
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN13@readArray
$LN12@readArray:
	mov	DWORD PTR tv141[ebp], 0
$LN13@readArray:
	mov	cl, BYTE PTR tv141[ebp]
	mov	BYTE PTR _badTokenType$56565[ebp], cl

; 568  :       if ( !ok  ||  badTokenType )

	movzx	edx, BYTE PTR _ok$56559[ebp]
	test	edx, edx
	je	SHORT $LN2@readArray
	movzx	eax, BYTE PTR _badTokenType$56565[ebp]
	test	eax, eax
	je	SHORT $LN3@readArray
$LN2@readArray:

; 569  :       {
; 570  :          return addErrorAndRecover( "Missing ',' or ']' in array declaration", 
; 571  :                                     token, 
; 572  :                                     tokenArrayEnd );

	push	OFFSET ??_C@_0CI@DPCANLPO@Missing?5?8?0?8?5or?5?8?$FN?8?5in?5array?5decl@
	lea	ecx, DWORD PTR $T64183[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	push	4
	lea	ecx, DWORD PTR _token$56561[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64183[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ; Json::Reader::addErrorAndRecover
	mov	BYTE PTR $T64182[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64183[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64182[ebp]
	jmp	SHORT $LN10@readArray
$LN3@readArray:

; 573  :       }
; 574  :       if ( token.type_ == tokenArrayEnd )

	cmp	DWORD PTR _token$56561[ebp], 4
	jne	SHORT $LN1@readArray

; 575  :          break;

	jmp	SHORT $LN7@readArray
$LN1@readArray:

; 576  :    }

	jmp	$LN8@readArray
$LN7@readArray:

; 577  :    return true;

	mov	al, 1
$LN10@readArray:

; 578  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR $T64178[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T64183[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?readArray@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?readArray@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::readArray
PUBLIC	??_C@_01GEODFPGF@?8?$AA@			; `string'
PUBLIC	??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4?$AA@ ; `string'
PUBLIC	?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z	; Json::Reader::decodeDouble
EXTRN	??0Value@Json@@QAE@I@Z:PROC			; Json::Value::Value
EXTRN	?maxInt@Value@Json@@2HB:DWORD			; Json::Value::maxInt
EXTRN	??0Value@Json@@QAE@H@Z:PROC			; Json::Value::Value
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:PROC
EXTRN	?maxUInt@Value@Json@@2IB:DWORD			; Json::Value::maxUInt
EXTRN	?minInt@Value@Json@@2HB:DWORD			; Json::Value::minInt
;	COMDAT ??_C@_01GEODFPGF@?8?$AA@
CONST	SEGMENT
??_C@_01GEODFPGF@?8?$AA@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4?$AA@
CONST	SEGMENT
??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4?$AA@ DB ''' is not a number.', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv207 = -208						; size = 4
tv213 = -204						; size = 4
tv205 = -200						; size = 4
tv212 = -196						; size = 4
tv203 = -192						; size = 4
tv211 = -188						; size = 4
tv132 = -184						; size = 4
tv82 = -180						; size = 4
_this$ = -176						; size = 4
$T64205 = -172						; size = 16
$T64204 = -156						; size = 16
$T64203 = -140						; size = 16
$T64202 = -124						; size = 28
$T64201 = -96						; size = 28
$T64200 = -68						; size = 28
$T64199 = -38						; size = 1
_c$56590 = -37						; size = 1
_inspect$56577 = -36					; size = 4
_isNegative$ = -29					; size = 1
_threshold$ = -28					; size = 4
_isDouble$ = -21					; size = 1
_value$ = -20						; size = 4
_current$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::decodeNumber, COMDAT
; _this$ = ecx

; 583  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 584  :    bool isDouble = false;

	mov	BYTE PTR _isDouble$[ebp], 0

; 585  :    for ( Location inspect = token.start_; inspect != token.end_; ++inspect )

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _inspect$56577[ebp], ecx
	jmp	SHORT $LN14@decodeNumb
$LN13@decodeNumb:
	mov	edx, DWORD PTR _inspect$56577[ebp]
	add	edx, 1
	mov	DWORD PTR _inspect$56577[ebp], edx
$LN14@decodeNumb:
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _inspect$56577[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN12@decodeNumb

; 586  :    {
; 587  :       isDouble = isDouble  
; 588  :                  ||  in( *inspect, '.', 'e', 'E', '+' )  
; 589  :                  ||  ( *inspect == '-'  &&  inspect != token.start_ );

	movzx	edx, BYTE PTR _isDouble$[ebp]
	test	edx, edx
	jne	SHORT $LN17@decodeNumb
	push	43					; 0000002bH
	push	69					; 00000045H
	push	101					; 00000065H
	push	46					; 0000002eH
	mov	eax, DWORD PTR _inspect$56577[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?in@Json@@YA_NDDDDD@Z			; Json::in
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN17@decodeNumb
	mov	eax, DWORD PTR _inspect$56577[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN18@decodeNumb
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR _inspect$56577[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN17@decodeNumb
$LN18@decodeNumb:
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN19@decodeNumb
$LN17@decodeNumb:
	mov	DWORD PTR tv82[ebp], 1
$LN19@decodeNumb:
	mov	cl, BYTE PTR tv82[ebp]
	mov	BYTE PTR _isDouble$[ebp], cl

; 590  :    }

	jmp	SHORT $LN13@decodeNumb
$LN12@decodeNumb:

; 591  :    if ( isDouble )

	movzx	edx, BYTE PTR _isDouble$[ebp]
	test	edx, edx
	je	SHORT $LN11@decodeNumb

; 592  :       return decodeDouble( token );

	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::decodeDouble
	jmp	$LN15@decodeNumb
$LN11@decodeNumb:

; 593  :    Location current = token.start_;

	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _current$[ebp], edx

; 594  :    bool isNegative = *current == '-';

	mov	eax, DWORD PTR _current$[ebp]
	movsx	ecx, BYTE PTR [eax]
	xor	edx, edx
	cmp	ecx, 45					; 0000002dH
	sete	dl
	mov	BYTE PTR _isNegative$[ebp], dl

; 595  :    if ( isNegative )

	movzx	eax, BYTE PTR _isNegative$[ebp]
	test	eax, eax
	je	SHORT $LN10@decodeNumb

; 596  :       ++current;

	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx
$LN10@decodeNumb:

; 597  :    Value::UInt threshold = (isNegative ? Value::UInt(-Value::minInt) 
; 598  :                                        : Value::maxUInt) / 10;

	movzx	edx, BYTE PTR _isNegative$[ebp]
	test	edx, edx
	je	SHORT $LN20@decodeNumb
	mov	eax, DWORD PTR ?minInt@Value@Json@@2HB	; Json::Value::minInt
	neg	eax
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN21@decodeNumb
$LN20@decodeNumb:
	mov	ecx, DWORD PTR ?maxUInt@Value@Json@@2IB	; Json::Value::maxUInt
	mov	DWORD PTR tv132[ebp], ecx
$LN21@decodeNumb:
	mov	eax, DWORD PTR tv132[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	DWORD PTR _threshold$[ebp], eax

; 599  :    Value::UInt value = 0;

	mov	DWORD PTR _value$[ebp], 0
$LN9@decodeNumb:

; 600  :    while ( current < token.end_ )

	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	$LN8@decodeNumb

; 601  :    {
; 602  :       Char c = *current++;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$56590[ebp], dl
	mov	eax, DWORD PTR _current$[ebp]
	add	eax, 1
	mov	DWORD PTR _current$[ebp], eax

; 603  :       if ( c < '0'  ||  c > '9' )

	movsx	ecx, BYTE PTR _c$56590[ebp]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN6@decodeNumb
	movsx	edx, BYTE PTR _c$56590[ebp]
	cmp	edx, 57					; 00000039H
	jle	$LN7@decodeNumb
$LN6@decodeNumb:

; 604  :          return addError( "'" + std::string( token.start_, token.end_ ) + "' is not a number.", token );

	push	0
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4?$AA@
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	ecx, DWORD PTR $T64200[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR tv211[ebp], eax
	mov	edx, DWORD PTR tv211[ebp]
	mov	DWORD PTR tv203[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv203[ebp]
	push	eax
	push	OFFSET ??_C@_01GEODFPGF@?8?$AA@
	lea	ecx, DWORD PTR $T64201[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv212[ebp], eax
	mov	edx, DWORD PTR tv212[ebp]
	mov	DWORD PTR tv205[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv205[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64202[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv213[ebp], eax
	mov	edx, DWORD PTR tv213[ebp]
	mov	DWORD PTR tv207[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv207[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T64199[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T64202[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T64201[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64200[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64199[ebp]
	jmp	$LN15@decodeNumb
$LN7@decodeNumb:

; 605  :       if ( value >= threshold )

	mov	ecx, DWORD PTR _value$[ebp]
	cmp	ecx, DWORD PTR _threshold$[ebp]
	jb	SHORT $LN5@decodeNumb

; 606  :          return decodeDouble( token );

	mov	edx, DWORD PTR _token$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::decodeDouble
	jmp	$LN15@decodeNumb
$LN5@decodeNumb:

; 607  :       value = value * 10 + Value::UInt(c - '0');

	mov	eax, DWORD PTR _value$[ebp]
	imul	eax, 10					; 0000000aH
	movsx	ecx, BYTE PTR _c$56590[ebp]
	lea	edx, DWORD PTR [eax+ecx-48]
	mov	DWORD PTR _value$[ebp], edx

; 608  :    }

	jmp	$LN9@decodeNumb
$LN8@decodeNumb:

; 609  :    if ( isNegative )

	movzx	eax, BYTE PTR _isNegative$[ebp]
	test	eax, eax
	je	SHORT $LN4@decodeNumb

; 610  :       currentValue() = -Value::Int( value );

	mov	ecx, DWORD PTR _value$[ebp]
	neg	ecx
	push	ecx
	lea	ecx, DWORD PTR $T64203[ebp]
	call	??0Value@Json@@QAE@H@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	lea	edx, DWORD PTR $T64203[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64203[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
	jmp	$LN3@decodeNumb
$LN4@decodeNumb:

; 611  :    else if ( value <= Value::UInt(Value::maxInt) )

	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR ?maxInt@Value@Json@@2HB	; Json::Value::maxInt
	ja	SHORT $LN2@decodeNumb

; 612  :       currentValue() = Value::Int( value );

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T64204[ebp]
	call	??0Value@Json@@QAE@H@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	lea	edx, DWORD PTR $T64204[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64204[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 613  :    else

	jmp	SHORT $LN3@decodeNumb
$LN2@decodeNumb:

; 614  :       currentValue() = value;

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64205[ebp]
	call	??0Value@Json@@QAE@I@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T64205[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64205[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
$LN3@decodeNumb:

; 615  :    return true;

	mov	al, 1
$LN15@decodeNumb:

; 616  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR $T64200[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T64201[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$2:
	lea	ecx, DWORD PTR $T64202[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$3:
	lea	ecx, DWORD PTR $T64203[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$4:
	lea	ecx, DWORD PTR $T64204[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z$5:
	lea	ecx, DWORD PTR $T64205[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__ehhandler$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-200]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeNumber@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::decodeNumber
; Function compile flags: /Odtp
;	COMDAT ?in@Json@@YA_NDDDDD@Z
_TEXT	SEGMENT
tv76 = -4						; size = 4
_c$ = 8							; size = 1
_c1$ = 12						; size = 1
_c2$ = 16						; size = 1
_c3$ = 20						; size = 1
_c4$ = 24						; size = 1
?in@Json@@YA_NDDDDD@Z PROC				; Json::in, COMDAT

; 48   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 49   :    return c == c1  ||  c == c2  ||  c == c3  ||  c == c4;

	movsx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _c1$[ebp]
	cmp	eax, ecx
	je	SHORT $LN3@in@2
	movsx	edx, BYTE PTR _c$[ebp]
	movsx	eax, BYTE PTR _c2$[ebp]
	cmp	edx, eax
	je	SHORT $LN3@in@2
	movsx	ecx, BYTE PTR _c$[ebp]
	movsx	edx, BYTE PTR _c3$[ebp]
	cmp	ecx, edx
	je	SHORT $LN3@in@2
	movsx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _c4$[ebp]
	cmp	eax, ecx
	je	SHORT $LN3@in@2
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@in@2
$LN3@in@2:
	mov	DWORD PTR tv76[ebp], 1
$LN4@in@2:
	mov	al, BYTE PTR tv76[ebp]

; 50   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?in@Json@@YA_NDDDDD@Z ENDP				; Json::in
_TEXT	ENDS
PUBLIC	??_C@_03DLDNIBIK@?$CFlf?$AA@			; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
EXTRN	??0Value@Json@@QAE@N@Z:PROC			; Json::Value::Value
EXTRN	__imp__sscanf:PROC
EXTRN	__fltused:DWORD
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_03DLDNIBIK@?$CFlf?$AA@
CONST	SEGMENT
??_C@_03DLDNIBIK@?$CFlf?$AA@ DB '%lf', 00H		; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$4
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
tv162 = -232						; size = 4
tv165 = -228						; size = 4
tv160 = -224						; size = 4
tv164 = -220						; size = 4
tv158 = -216						; size = 4
tv78 = -212						; size = 4
_this$ = -208						; size = 4
$T64229 = -204						; size = 16
$T64228 = -188						; size = 28
$T64227 = -160						; size = 28
$T64226 = -132						; size = 28
$T64225 = -101						; size = 1
_buffer$56619 = -100					; size = 28
_buffer$56616 = -72					; size = 32
__$ArrayPad$ = -40					; size = 4
_bufferSize$ = -36					; size = 4
_length$ = -32						; size = 4
_value$ = -28						; size = 8
_count$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::decodeDouble, COMDAT
; _this$ = ecx

; 621  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 622  :    double value = 0;

	fldz
	fstp	QWORD PTR _value$[ebp]

; 623  :    const int bufferSize = 32;

	mov	DWORD PTR _bufferSize$[ebp], 32		; 00000020H

; 624  :    int count;
; 625  :    int length = int(token.end_ - token.start_);

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _length$[ebp], edx

; 626  :    if ( length <= bufferSize )

	cmp	DWORD PTR _length$[ebp], 32		; 00000020H
	jg	SHORT $LN3@decodeDoub

; 627  :    {
; 628  :       Char buffer[bufferSize];
; 629  :       memcpy( buffer, token.start_, length );

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR _buffer$56616[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 630  :       buffer[length] = 0;

	mov	ecx, DWORD PTR _length$[ebp]
	mov	BYTE PTR _buffer$56616[ebp+ecx], 0

; 631  :       count = sscanf( buffer, "%lf", &value );

	lea	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_03DLDNIBIK@?$CFlf?$AA@
	lea	eax, DWORD PTR _buffer$56616[ebp]
	push	eax
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _count$[ebp], eax

; 632  :    }
; 633  :    else

	jmp	SHORT $LN2@decodeDoub
$LN3@decodeDoub:

; 634  :    {
; 635  :       std::string buffer( token.start_, token.end_ );

	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	ecx, DWORD PTR _buffer$56619[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 636  :       count = sscanf( buffer.c_str(), "%lf", &value );

	lea	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_03DLDNIBIK@?$CFlf?$AA@
	lea	ecx, DWORD PTR _buffer$56619[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _count$[ebp], eax

; 637  :    }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$56619[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@decodeDoub:

; 638  : 
; 639  :    if ( count != 1 )

	cmp	DWORD PTR _count$[ebp], 1
	je	$LN1@decodeDoub

; 640  :       return addError( "'" + std::string( token.start_, token.end_ ) + "' is not a number.", token );

	push	0
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@HHNBFDKF@?8?5is?5not?5a?5number?4?$AA@
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	ecx, DWORD PTR $T64226[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
	mov	DWORD PTR tv78[ebp], eax
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv158[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv158[ebp]
	push	eax
	push	OFFSET ??_C@_01GEODFPGF@?8?$AA@
	lea	ecx, DWORD PTR $T64227[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv164[ebp], eax
	mov	edx, DWORD PTR tv164[ebp]
	mov	DWORD PTR tv160[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv160[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64228[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv165[ebp], eax
	mov	edx, DWORD PTR tv165[ebp]
	mov	DWORD PTR tv162[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv162[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T64225[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T64228[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T64227[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64226[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64225[ebp]
	jmp	SHORT $LN4@decodeDoub
$LN1@decodeDoub:

; 641  :    currentValue() = value;

	sub	esp, 8
	fld	QWORD PTR _value$[ebp]
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR $T64229[ebp]
	call	??0Value@Json@@QAE@N@Z			; Json::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T64229[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64229[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 642  :    return true;

	mov	al, 1
$LN4@decodeDoub:

; 643  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR _buffer$56619[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T64226[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$2:
	lea	ecx, DWORD PTR $T64227[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$3:
	lea	ecx, DWORD PTR $T64228[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z$4:
	lea	ecx, DWORD PTR $T64229[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__ehhandler$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeDouble@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::decodeDouble
PUBLIC	__$ArrayPad$
EXTRN	??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; Json::Value::Value
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z$1
__ehfuncinfo$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T64250 = -69						; size = 1
$T64249 = -68						; size = 16
$T64248 = -45						; size = 1
_decoded$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z PROC	; Json::Reader::decodeString, COMDAT
; _this$ = ecx

; 648  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 649  :    std::string decoded;

	lea	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 650  :    if ( !decodeString( token, decoded ) )

	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Reader::decodeString
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@decodeStri

; 651  :       return false;

	mov	BYTE PTR $T64248[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64248[ebp]
	jmp	SHORT $LN2@decodeStri
$LN1@decodeStri:

; 652  :    currentValue() = decoded;

	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64249[ebp]
	call	??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::Value
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T64249[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?currentValue@Reader@Json@@AAEAAVValue@2@XZ ; Json::Reader::currentValue
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T64249[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 653  :    return true;

	mov	BYTE PTR $T64250[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64250[ebp]
$LN2@decodeStri:

; 654  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z$0:
	lea	ecx, DWORD PTR _decoded$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z$1:
	lea	ecx, DWORD PTR $T64249[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__ehhandler$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeString@Reader@Json@@AAE_NAAVToken@12@@Z ENDP	; Json::Reader::decodeString
PUBLIC	??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string?$AA@ ; `string'
PUBLIC	?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ; Json::Reader::decodeUnicodeCodePoint
PUBLIC	??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string?$AA@ ; `string'
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z:PROC
EXTRN	__imp_?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z:PROC
;	COMDAT ??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string?$AA@
CONST	SEGMENT
??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string?$AA@ DB 'Bad escape '
	DB	'sequence in string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string?$AA@
CONST	SEGMENT
??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string?$AA@ DB 'Empty esc'
	DB	'ape sequence in string', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
__ehfuncinfo$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv171 = -136						; size = 4
tv86 = -132						; size = 4
tv92 = -128						; size = 4
_this$ = -124						; size = 4
$T64265 = -120						; size = 28
$T64264 = -89						; size = 1
$T64263 = -88						; size = 28
$T64262 = -60						; size = 28
$T64261 = -29						; size = 1
_unicode$56667 = -28					; size = 4
_escape$56653 = -22					; size = 1
_c$56645 = -21						; size = 1
_end$ = -20						; size = 4
_current$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
_decoded$ = 12						; size = 4
?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Reader::decodeString, COMDAT
; _this$ = ecx

; 659  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 660  :    decoded.reserve( token.end_ - token.start_ - 2 );

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sub	edx, 2
	push	edx
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z

; 661  :    Location current = token.start_ + 1; // skip '"'

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx

; 662  :    Location end = token.end_ - 1;      // do not include '"'

	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
$LN20@decodeStri@2:

; 663  :    while ( current != end )

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	je	$LN19@decodeStri@2

; 664  :    {
; 665  :       Char c = *current++;

	mov	edx, DWORD PTR _current$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$56645[ebp], al
	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx

; 666  :       if ( c == '"' )

	movsx	edx, BYTE PTR _c$56645[ebp]
	cmp	edx, 34					; 00000022H
	jne	SHORT $LN18@decodeStri@2
	jmp	$LN19@decodeStri@2

; 667  :          break;

	jmp	$LN17@decodeStri@2
$LN18@decodeStri@2:

; 668  :       else if ( c == '\\' )

	movsx	eax, BYTE PTR _c$56645[ebp]
	cmp	eax, 92					; 0000005cH
	jne	$LN16@decodeStri@2

; 669  :       {
; 670  :          if ( current == end )

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jne	SHORT $LN15@decodeStri@2

; 671  :             return addError( "Empty escape sequence in string", token, current );

	push	OFFSET ??_C@_0CA@DPGKPPOE@Empty?5escape?5sequence?5in?5string?$AA@
	lea	ecx, DWORD PTR $T64262[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _current$[ebp]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64262[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T64261[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64262[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64261[ebp]
	jmp	$LN21@decodeStri@2
$LN15@decodeStri@2:

; 672  :          Char escape = *current++;

	mov	edx, DWORD PTR _current$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _escape$56653[ebp], al
	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx

; 673  :          switch ( escape )

	movsx	edx, BYTE PTR _escape$56653[ebp]
	mov	DWORD PTR tv92[ebp], edx
	mov	eax, DWORD PTR tv92[ebp]
	sub	eax, 34					; 00000022H
	mov	DWORD PTR tv92[ebp], eax
	cmp	DWORD PTR tv92[ebp], 83			; 00000053H
	ja	$LN2@decodeStri@2
	mov	ecx, DWORD PTR tv92[ebp]
	movzx	edx, BYTE PTR $LN26@decodeStri@2[ecx]
	jmp	DWORD PTR $LN28@decodeStri@2[edx*4]
$LN12@decodeStri@2:

; 674  :          {
; 675  :          case '"': decoded += '"'; break;

	push	34					; 00000022H
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN11@decodeStri@2:

; 676  :          case '/': decoded += '/'; break;

	push	47					; 0000002fH
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN10@decodeStri@2:

; 677  :          case '\\': decoded += '\\'; break;

	push	92					; 0000005cH
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN9@decodeStri@2:

; 678  :          case 'b': decoded += '\b'; break;

	push	8
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN8@decodeStri@2:

; 679  :          case 'f': decoded += '\f'; break;

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN7@decodeStri@2:

; 680  :          case 'n': decoded += '\n'; break;

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN6@decodeStri@2:

; 681  :          case 'r': decoded += '\r'; break;

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN5@decodeStri@2:

; 682  :          case 't': decoded += '\t'; break;

	push	9
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
	jmp	$LN13@decodeStri@2
$LN4@decodeStri@2:

; 683  :          case 'u':
; 684  :             {
; 685  :                unsigned int unicode;
; 686  :                if ( !decodeUnicodeCodePoint( token, current, end, unicode ) )

	lea	eax, DWORD PTR _unicode$56667[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	lea	edx, DWORD PTR _current$[ebp]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ; Json::Reader::decodeUnicodeCodePoint
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@decodeStri@2

; 687  :                   return false;

	xor	al, al
	jmp	$LN21@decodeStri@2
$LN3@decodeStri@2:

; 688  :                decoded += codePointToUTF8(unicode);

	mov	edx, DWORD PTR _unicode$56667[ebp]
	push	edx
	lea	eax, DWORD PTR $T64263[ebp]
	push	eax
	call	?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; Json::codePointToUTF8
	add	esp, 8
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv171[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv171[ebp]
	push	edx
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64263[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 689  :             }
; 690  :             break;

	jmp	SHORT $LN13@decodeStri@2
$LN2@decodeStri@2:

; 691  :          default:
; 692  :             return addError( "Bad escape sequence in string", token, current );

	push	OFFSET ??_C@_0BO@NDEEJNNB@Bad?5escape?5sequence?5in?5string?$AA@
	lea	ecx, DWORD PTR $T64265[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64265[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T64264[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64265[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64264[ebp]
	jmp	SHORT $LN21@decodeStri@2
$LN13@decodeStri@2:

; 693  :          }
; 694  :       }
; 695  :       else

	jmp	SHORT $LN17@decodeStri@2
$LN16@decodeStri@2:

; 696  :       {
; 697  :          decoded += c;

	movzx	eax, BYTE PTR _c$56645[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoded$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
$LN17@decodeStri@2:

; 698  :       }
; 699  :    }

	jmp	$LN20@decodeStri@2
$LN19@decodeStri@2:

; 700  :    return true;

	mov	al, 1
$LN21@decodeStri@2:

; 701  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN28@decodeStri@2:
	DD	$LN12@decodeStri@2
	DD	$LN11@decodeStri@2
	DD	$LN10@decodeStri@2
	DD	$LN9@decodeStri@2
	DD	$LN8@decodeStri@2
	DD	$LN7@decodeStri@2
	DD	$LN6@decodeStri@2
	DD	$LN5@decodeStri@2
	DD	$LN4@decodeStri@2
	DD	$LN2@decodeStri@2
$LN26@decodeStri@2:
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	1
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	2
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	3
	DB	9
	DB	9
	DB	9
	DB	4
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	5
	DB	9
	DB	9
	DB	9
	DB	6
	DB	9
	DB	7
	DB	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	lea	ecx, DWORD PTR $T64262[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
	lea	ecx, DWORD PTR $T64263[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
	lea	ecx, DWORD PTR $T64265[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeString@Reader@Json@@AAE_NAAVToken@12@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Reader::decodeString
PUBLIC	__$ArrayPad$
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z:PROC
EXTRN	__imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$0
__ehfuncinfo$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
$T64282 = -48						; size = 4
_result$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_cp$ = 12						; size = 4
?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; Json::codePointToUTF8, COMDAT

; 70   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T64282[ebp], 0

; 71   :    std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 72   :    
; 73   :    // based on description from http://en.wikipedia.org/wiki/UTF-8
; 74   : 
; 75   :    if (cp <= 0x7f) 

	cmp	DWORD PTR _cp$[ebp], 127		; 0000007fH
	ja	SHORT $LN7@codePointT

; 76   :    {
; 77   :       result.resize(1);

	push	1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z

; 78   :       result[0] = static_cast<char>(cp);

	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	cl, BYTE PTR _cp$[ebp]
	mov	BYTE PTR [eax], cl
	jmp	$LN6@codePointT
$LN7@codePointT:

; 79   :    } 
; 80   :    else if (cp <= 0x7FF) 

	cmp	DWORD PTR _cp$[ebp], 2047		; 000007ffH
	ja	SHORT $LN5@codePointT

; 81   :    {
; 82   :       result.resize(2);

	push	2
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z

; 83   :       result[1] = static_cast<char>(0x80 | (0x3f & cp));

	mov	ebx, DWORD PTR _cp$[ebp]
	and	ebx, 63					; 0000003fH
	or	ebx, 128				; 00000080H
	push	1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 84   :       result[0] = static_cast<char>(0xC0 | (0x1f & (cp >> 6)));

	mov	ebx, DWORD PTR _cp$[ebp]
	shr	ebx, 6
	and	ebx, 31					; 0000001fH
	or	ebx, 192				; 000000c0H
	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl
	jmp	$LN6@codePointT
$LN5@codePointT:

; 85   :    } 
; 86   :    else if (cp <= 0xFFFF) 

	cmp	DWORD PTR _cp$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN3@codePointT

; 87   :    {
; 88   :       result.resize(3);

	push	3
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z

; 89   :       result[2] = static_cast<char>(0x80 | (0x3f & cp));

	mov	ebx, DWORD PTR _cp$[ebp]
	and	ebx, 63					; 0000003fH
	or	ebx, 128				; 00000080H
	push	2
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 90   :       result[1] = 0x80 | static_cast<char>((0x3f & (cp >> 6)));

	mov	edx, DWORD PTR _cp$[ebp]
	shr	edx, 6
	and	edx, 63					; 0000003fH
	movsx	ebx, dl
	or	ebx, 128				; 00000080H
	push	1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 91   :       result[0] = 0xE0 | static_cast<char>((0xf & (cp >> 12)));

	mov	eax, DWORD PTR _cp$[ebp]
	shr	eax, 12					; 0000000cH
	and	eax, 15					; 0000000fH
	movsx	ebx, al
	or	ebx, 224				; 000000e0H
	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl
	jmp	$LN6@codePointT
$LN3@codePointT:

; 92   :    }
; 93   :    else if (cp <= 0x10FFFF) 

	cmp	DWORD PTR _cp$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN6@codePointT

; 94   :    {
; 95   :       result.resize(4);

	push	4
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z

; 96   :       result[3] = static_cast<char>(0x80 | (0x3f & cp));

	mov	ebx, DWORD PTR _cp$[ebp]
	and	ebx, 63					; 0000003fH
	or	ebx, 128				; 00000080H
	push	3
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 97   :       result[2] = static_cast<char>(0x80 | (0x3f & (cp >> 6)));

	mov	ebx, DWORD PTR _cp$[ebp]
	shr	ebx, 6
	and	ebx, 63					; 0000003fH
	or	ebx, 128				; 00000080H
	push	2
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 98   :       result[1] = static_cast<char>(0x80 | (0x3f & (cp >> 12)));

	mov	ebx, DWORD PTR _cp$[ebp]
	shr	ebx, 12					; 0000000cH
	and	ebx, 63					; 0000003fH
	or	ebx, 128				; 00000080H
	push	1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl

; 99   :       result[0] = static_cast<char>(0xF0 | (0x7 & (cp >> 18)));

	mov	ebx, DWORD PTR _cp$[ebp]
	shr	ebx, 18					; 00000012H
	and	ebx, 7
	or	ebx, 240				; 000000f0H
	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
	mov	BYTE PTR [eax], bl
$LN6@codePointT:

; 100  :    }
; 101  : 
; 102  :    return result;

	lea	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T64282[ebp]
	or	edx, 1
	mov	DWORD PTR $T64282[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 103  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$1:
	mov	eax, DWORD PTR $T64282[ebp]
	and	eax, 1
	je	$LN12@codePointT
	and	DWORD PTR $T64282[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN12@codePointT:
	ret	0
__ehhandler$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?codePointToUTF8@Json@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; Json::codePointToUTF8
PUBLIC	??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5be@ ; `string'
PUBLIC	??_C@_0EE@LMPEHADE@additional?5six?5characters?5expect@ ; `string'
PUBLIC	?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ; Json::Reader::decodeUnicodeEscapeSequence
;	COMDAT ??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5be@
CONST	SEGMENT
??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5be@ DB 'expecting '
	DB	'another \u token to begin the second half of a unicode surrog'
	DB	'ate pair', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@LMPEHADE@additional?5six?5characters?5expect@
CONST	SEGMENT
??_C@_0EE@LMPEHADE@additional?5six?5characters?5expect@ DB 'additional si'
	DB	'x characters expected to parse unicode surrogate pair.', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$1
__ehfuncinfo$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T64295 = -80						; size = 28
$T64294 = -49						; size = 1
$T64293 = -48						; size = 28
$T64292 = -17						; size = 1
_surrogatePair$56688 = -16				; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
_current$ = 12						; size = 4
_end$ = 16						; size = 4
_unicode$ = 20						; size = 4
?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z PROC ; Json::Reader::decodeUnicodeCodePoint, COMDAT
; _this$ = ecx

; 708  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 709  : 
; 710  :    if ( !decodeUnicodeEscapeSequence( token, current, end, unicode ) )

	mov	eax, DWORD PTR _unicode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current$[ebp]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ; Json::Reader::decodeUnicodeEscapeSequence
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@decodeUnic

; 711  :       return false;

	xor	al, al
	jmp	$LN8@decodeUnic
$LN7@decodeUnic:

; 712  :    if (unicode >= 0xD800 && unicode <= 0xDBFF)

	mov	edx, DWORD PTR _unicode$[ebp]
	cmp	DWORD PTR [edx], 55296			; 0000d800H
	jb	$LN6@decodeUnic
	mov	eax, DWORD PTR _unicode$[ebp]
	cmp	DWORD PTR [eax], 56319			; 0000dbffH
	ja	$LN6@decodeUnic

; 713  :    {
; 714  :       // surrogate pairs
; 715  :       if (end - current < 6)

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, DWORD PTR [ecx]
	cmp	edx, 6
	jge	SHORT $LN5@decodeUnic

; 716  :          return addError( "additional six characters expected to parse unicode surrogate pair.", token, current );

	push	OFFSET ??_C@_0EE@LMPEHADE@additional?5six?5characters?5expect@
	lea	ecx, DWORD PTR $T64293[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _token$[ebp]
	push	edx
	lea	eax, DWORD PTR $T64293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T64292[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64293[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64292[ebp]
	jmp	$LN8@decodeUnic
$LN5@decodeUnic:

; 717  :       unsigned int surrogatePair;
; 718  :       if (*(current++) == '\\' && *(current++)== 'u')

	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	ecx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx], edx
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN4@decodeUnic
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [edx], eax
	cmp	ecx, 117				; 00000075H
	jne	SHORT $LN4@decodeUnic

; 719  :       {
; 720  :          if (decodeUnicodeEscapeSequence( token, current, end, surrogatePair ))

	lea	eax, DWORD PTR _surrogatePair$56688[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current$[ebp]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ; Json::Reader::decodeUnicodeEscapeSequence
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@decodeUnic

; 721  :          {
; 722  :             unicode = 0x10000 + ((unicode & 0x3FF) << 10) + (surrogatePair & 0x3FF);

	mov	edx, DWORD PTR _unicode$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1023				; 000003ffH
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _surrogatePair$56688[ebp]
	and	ecx, 1023				; 000003ffH
	lea	edx, DWORD PTR [eax+ecx+65536]
	mov	eax, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [eax], edx

; 723  :          } 
; 724  :          else

	jmp	SHORT $LN2@decodeUnic
$LN3@decodeUnic:

; 725  :             return false;

	xor	al, al
	jmp	SHORT $LN8@decodeUnic
$LN2@decodeUnic:

; 726  :       } 
; 727  :       else

	jmp	SHORT $LN6@decodeUnic
$LN4@decodeUnic:

; 728  :          return addError( "expecting another \\u token to begin the second half of a unicode surrogate pair", token, current );

	push	OFFSET ??_C@_0FA@BGMMPLKB@expecting?5another?5?2u?5token?5to?5be@
	lea	ecx, DWORD PTR $T64295[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64295[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T64294[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64295[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64294[ebp]
	jmp	SHORT $LN8@decodeUnic
$LN6@decodeUnic:

; 729  :    }
; 730  :    return true;

	mov	al, 1
$LN8@decodeUnic:

; 731  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$0:
	lea	ecx, DWORD PTR $T64293[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$1:
	lea	ecx, DWORD PTR $T64295[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeUnicodeCodePoint@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ENDP ; Json::Reader::decodeUnicodeCodePoint
PUBLIC	??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5s@ ; `string'
PUBLIC	??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5s@ ; `string'
;	COMDAT ??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5s@
CONST	SEGMENT
??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5s@ DB 'Bad unicode'
	DB	' escape sequence in string: hexadecimal digit expected.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5s@
CONST	SEGMENT
??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5s@ DB 'Bad unicode'
	DB	' escape sequence in string: four digits expected.', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$1
__ehfuncinfo$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T64309 = -80						; size = 28
$T64308 = -49						; size = 1
$T64307 = -48						; size = 28
$T64306 = -18						; size = 1
_c$56711 = -17						; size = 1
_index$56707 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_token$ = 8						; size = 4
_current$ = 12						; size = 4
_end$ = 16						; size = 4
_unicode$ = 20						; size = 4
?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z PROC ; Json::Reader::decodeUnicodeEscapeSequence, COMDAT
; _this$ = ecx

; 738  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 739  :    if ( end - current < 4 )

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, DWORD PTR [eax]
	cmp	ecx, 4
	jge	SHORT $LN10@decodeUnic@2

; 740  :       return addError( "Bad unicode escape sequence in string: four digits expected.", token, current );

	push	OFFSET ??_C@_0DN@BPAHJPFJ@Bad?5unicode?5escape?5sequence?5in?5s@
	lea	ecx, DWORD PTR $T64307[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64307[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T64306[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64307[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64306[ebp]
	jmp	$LN11@decodeUnic@2
$LN10@decodeUnic@2:

; 741  :    unicode = 0;

	mov	eax, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [eax], 0

; 742  :    for ( int index =0; index < 4; ++index )

	mov	DWORD PTR _index$56707[ebp], 0
	jmp	SHORT $LN9@decodeUnic@2
$LN8@decodeUnic@2:
	mov	ecx, DWORD PTR _index$56707[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$56707[ebp], ecx
$LN9@decodeUnic@2:
	cmp	DWORD PTR _index$56707[ebp], 4
	jge	$LN7@decodeUnic@2

; 743  :    {
; 744  :       Char c = *current++;

	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$56711[ebp], cl
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _current$[ebp]
	mov	DWORD PTR [ecx], eax

; 745  :       unicode *= 16;

	mov	edx, DWORD PTR _unicode$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	mov	ecx, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [ecx], eax

; 746  :       if ( c >= '0'  &&  c <= '9' )

	movsx	edx, BYTE PTR _c$56711[ebp]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN6@decodeUnic@2
	movsx	eax, BYTE PTR _c$56711[ebp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN6@decodeUnic@2

; 747  :          unicode += c - '0';

	movsx	ecx, BYTE PTR _c$56711[ebp]
	mov	edx, DWORD PTR _unicode$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	edx, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	$LN5@decodeUnic@2
$LN6@decodeUnic@2:

; 748  :       else if ( c >= 'a'  &&  c <= 'f' )

	movsx	eax, BYTE PTR _c$56711[ebp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN4@decodeUnic@2
	movsx	ecx, BYTE PTR _c$56711[ebp]
	cmp	ecx, 102				; 00000066H
	jg	SHORT $LN4@decodeUnic@2

; 749  :          unicode += c - 'a' + 10;

	movsx	edx, BYTE PTR _c$56711[ebp]
	mov	eax, DWORD PTR _unicode$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-87]
	mov	eax, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN5@decodeUnic@2
$LN4@decodeUnic@2:

; 750  :       else if ( c >= 'A'  &&  c <= 'F' )

	movsx	ecx, BYTE PTR _c$56711[ebp]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN2@decodeUnic@2
	movsx	edx, BYTE PTR _c$56711[ebp]
	cmp	edx, 70					; 00000046H
	jg	SHORT $LN2@decodeUnic@2

; 751  :          unicode += c - 'A' + 10;

	movsx	eax, BYTE PTR _c$56711[ebp]
	mov	ecx, DWORD PTR _unicode$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-55]
	mov	ecx, DWORD PTR _unicode$[ebp]
	mov	DWORD PTR [ecx], eax

; 752  :       else

	jmp	SHORT $LN5@decodeUnic@2
$LN2@decodeUnic@2:

; 753  :          return addError( "Bad unicode escape sequence in string: hexadecimal digit expected.", token, current );

	push	OFFSET ??_C@_0ED@FIDDECIG@Bad?5unicode?5escape?5sequence?5in?5s@
	lea	ecx, DWORD PTR $T64309[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64309[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError
	mov	BYTE PTR $T64308[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64309[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T64308[ebp]
	jmp	SHORT $LN11@decodeUnic@2
$LN5@decodeUnic@2:

; 754  :    }

	jmp	$LN8@decodeUnic@2
$LN7@decodeUnic@2:

; 755  :    return true;

	mov	al, 1
$LN11@decodeUnic@2:

; 756  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$0:
	lea	ecx, DWORD PTR $T64307[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z$1:
	lea	ecx, DWORD PTR $T64309[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?decodeUnicodeEscapeSequence@Reader@Json@@AAE_NAAVToken@12@AAPBDPBDAAI@Z ENDP ; Json::Reader::decodeUnicodeEscapeSequence
PUBLIC	??1ErrorInfo@Reader@Json@@QAE@XZ		; Json::Reader::ErrorInfo::~ErrorInfo
PUBLIC	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
PUBLIC	??0ErrorInfo@Reader@Json@@QAE@XZ		; Json::Reader::ErrorInfo::ErrorInfo
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z$0
__ehfuncinfo$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T64321 = -61						; size = 1
_info$ = -60						; size = 44
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_token$ = 12						; size = 4
_extra$ = 16						; size = 4
?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z PROC ; Json::Reader::addError, COMDAT
; _this$ = ecx

; 763  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 764  :    ErrorInfo info;

	lea	ecx, DWORD PTR _info$[ebp]
	call	??0ErrorInfo@Reader@Json@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 765  :    info.token_ = token;

	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _info$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _info$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _info$[ebp+8], eax

; 766  :    info.message_ = message;

	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _info$[ebp+12]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 767  :    info.extra_ = extra;

	mov	edx, DWORD PTR _extra$[ebp]
	mov	DWORD PTR _info$[ebp+40], edx

; 768  :    errors_.push_back( info );

	lea	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back

; 769  :    return false;

	mov	BYTE PTR $T64321[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _info$[ebp]
	call	??1ErrorInfo@Reader@Json@@QAE@XZ
	mov	al, BYTE PTR $T64321[ebp]

; 770  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z$0:
	lea	ecx, DWORD PTR _info$[ebp]
	jmp	??1ErrorInfo@Reader@Json@@QAE@XZ
__ehhandler$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ENDP ; Json::Reader::addError
; Function compile flags: /Odtp
;	COMDAT ??0ErrorInfo@Reader@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ErrorInfo@Reader@Json@@QAE@XZ PROC			; Json::Reader::ErrorInfo::ErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ErrorInfo@Reader@Json@@QAE@XZ ENDP			; Json::Reader::ErrorInfo::ErrorInfo
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1ErrorInfo@Reader@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ErrorInfo@Reader@Json@@QAE@XZ PROC			; Json::Reader::ErrorInfo::~ErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1ErrorInfo@Reader@Json@@QAE@XZ ENDP			; Json::Reader::ErrorInfo::~ErrorInfo
_TEXT	ENDS
PUBLIC	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
PUBLIC	?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size
; Function compile flags: /Odtp
;	COMDAT ?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_errorCount$ = -16					; size = 4
_skip$ = -12						; size = 12
_skipUntilToken$ = 8					; size = 4
?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z PROC ; Json::Reader::recoverFromError, COMDAT
; _this$ = ecx

; 775  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 776  :    int errorCount = int(errors_.size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size
	mov	DWORD PTR _errorCount$[ebp], eax
$LN5@recoverFro:

; 777  :    Token skip;
; 778  :    while ( true )

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@recoverFro

; 779  :    {
; 780  :       if ( !readToken(skip) )

	lea	ecx, DWORD PTR _skip$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readToken@Reader@Json@@AAE_NAAVToken@12@@Z ; Json::Reader::readToken
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@recoverFro

; 781  :          errors_.resize( errorCount ); // discard errors caused by recovery

	mov	eax, DWORD PTR _errorCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
$LN3@recoverFro:

; 782  :       if ( skip.type_ == skipUntilToken  ||  skip.type_ == tokenEndOfStream )

	mov	ecx, DWORD PTR _skip$[ebp]
	cmp	ecx, DWORD PTR _skipUntilToken$[ebp]
	je	SHORT $LN1@recoverFro
	cmp	DWORD PTR _skip$[ebp], 0
	jne	SHORT $LN2@recoverFro
$LN1@recoverFro:

; 783  :          break;

	jmp	SHORT $LN4@recoverFro
$LN2@recoverFro:

; 784  :    }

	jmp	SHORT $LN5@recoverFro
$LN4@recoverFro:

; 785  :    errors_.resize( errorCount );

	mov	edx, DWORD PTR _errorCount$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize

; 786  :    return false;

	xor	al, al

; 787  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ENDP ; Json::Reader::recoverFromError
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
_token$ = 12						; size = 4
_skipUntilToken$ = 16					; size = 4
?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z PROC ; Json::Reader::addErrorAndRecover, COMDAT
; _this$ = ecx

; 794  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 795  :    addError( message, token );

	push	0
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addError@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@PBD@Z ; Json::Reader::addError

; 796  :    return recoverFromError( skipUntilToken );

	mov	edx, DWORD PTR _skipUntilToken$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?recoverFromError@Reader@Json@@AAE_NW4TokenType@12@@Z ; Json::Reader::recoverFromError

; 797  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?addErrorAndRecover@Reader@Json@@AAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAVToken@12@W4TokenType@12@@Z ENDP ; Json::Reader::addErrorAndRecover
_TEXT	ENDS
PUBLIC	?top@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEAAPAVValue@Json@@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top
; Function compile flags: /Odtp
;	COMDAT ?currentValue@Reader@Json@@AAEAAVValue@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?currentValue@Reader@Json@@AAEAAVValue@2@XZ PROC	; Json::Reader::currentValue, COMDAT
; _this$ = ecx

; 802  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 803  :    return *(nodes_.top());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?top@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEAAPAVValue@Json@@XZ ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top
	mov	eax, DWORD PTR [eax]

; 804  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?currentValue@Reader@Json@@AAEAAVValue@2@XZ ENDP	; Json::Reader::currentValue
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getNextChar@Reader@Json@@AAEDXZ
_TEXT	SEGMENT
tv72 = -5						; size = 1
_this$ = -4						; size = 4
?getNextChar@Reader@Json@@AAEDXZ PROC			; Json::Reader::getNextChar, COMDAT
; _this$ = ecx

; 809  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 810  :    if ( current_ == end_ )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+100]
	cmp	edx, DWORD PTR [ecx+96]
	jne	SHORT $LN1@getNextCha

; 811  :       return 0;

	xor	al, al
	jmp	SHORT $LN2@getNextCha
$LN1@getNextCha:

; 812  :    return *current_++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv72[ebp], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], ecx
	mov	al, BYTE PTR tv72[ebp]
$LN2@getNextCha:

; 813  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNextChar@Reader@Json@@AAEDXZ ENDP			; Json::Reader::getNextChar
_TEXT	ENDS
PUBLIC	?getLocationLineAndColumn@Reader@Json@@ABEXPBDAAH1@Z ; Json::Reader::getLocationLineAndColumn
; Function compile flags: /Odtp
;	COMDAT ?getLocationLineAndColumn@Reader@Json@@ABEXPBDAAH1@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_c$56769 = -9						; size = 1
_lastLineStart$ = -8					; size = 4
_current$ = -4						; size = 4
_location$ = 8						; size = 4
_line$ = 12						; size = 4
_column$ = 16						; size = 4
?getLocationLineAndColumn@Reader@Json@@ABEXPBDAAH1@Z PROC ; Json::Reader::getLocationLineAndColumn, COMDAT
; _this$ = ecx

; 820  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 821  :    Location current = begin_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _current$[ebp], ecx

; 822  :    Location lastLineStart = current;

	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR _lastLineStart$[ebp], edx

; 823  :    line = 0;

	mov	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR [eax], 0
$LN6@getLocatio:

; 824  :    while ( current < location  &&  current != end_ )

	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR _location$[ebp]
	jae	SHORT $LN5@getLocatio
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	cmp	eax, DWORD PTR [edx+96]
	je	SHORT $LN5@getLocatio

; 825  :    {
; 826  :       Char c = *current++;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$56769[ebp], dl
	mov	eax, DWORD PTR _current$[ebp]
	add	eax, 1
	mov	DWORD PTR _current$[ebp], eax

; 827  :       if ( c == '\r' )

	movsx	ecx, BYTE PTR _c$56769[ebp]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN4@getLocatio

; 828  :       {
; 829  :          if ( *current == '\n' )

	mov	edx, DWORD PTR _current$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN3@getLocatio

; 830  :             ++current;

	mov	ecx, DWORD PTR _current$[ebp]
	add	ecx, 1
	mov	DWORD PTR _current$[ebp], ecx
$LN3@getLocatio:

; 831  :          lastLineStart = current;

	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR _lastLineStart$[ebp], edx

; 832  :          ++line;

	mov	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@getLocatio
$LN4@getLocatio:

; 833  :       }
; 834  :       else if ( c == '\n' )

	movsx	eax, BYTE PTR _c$56769[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN2@getLocatio

; 835  :       {
; 836  :          lastLineStart = current;

	mov	ecx, DWORD PTR _current$[ebp]
	mov	DWORD PTR _lastLineStart$[ebp], ecx

; 837  :          ++line;

	mov	edx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@getLocatio:

; 838  :       }
; 839  :    }

	jmp	SHORT $LN6@getLocatio
$LN5@getLocatio:

; 840  :    // column & line start at 1
; 841  :    column = int(location - lastLineStart) + 1;

	mov	edx, DWORD PTR _location$[ebp]
	sub	edx, DWORD PTR _lastLineStart$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _column$[ebp]
	mov	DWORD PTR [eax], edx

; 842  :    ++line;

	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _line$[ebp]
	mov	DWORD PTR [eax], edx

; 843  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getLocationLineAndColumn@Reader@Json@@ABEXPBDAAH1@Z ENDP ; Json::Reader::getLocationLineAndColumn
_TEXT	ENDS
PUBLIC	??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::Reader::getLocationLineAndColumn
EXTRN	__imp__sprintf:PROC
;	COMDAT ??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd?$AA@ DB 'Line %d, Column '
	DB	'%d', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
_TEXT	SEGMENT
_this$ = -72						; size = 4
$T64349 = -68						; size = 4
_buffer$ = -64						; size = 51
__$ArrayPad$ = -12					; size = 4
_line$ = -8						; size = 4
_column$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_location$ = 12						; size = 4
?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; Json::Reader::getLocationLineAndColumn, COMDAT
; _this$ = ecx

; 848  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T64349[ebp], 0

; 849  :    int line, column;
; 850  :    getLocationLineAndColumn( location, line, column );

	lea	eax, DWORD PTR _column$[ebp]
	push	eax
	lea	ecx, DWORD PTR _line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _location$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLocationLineAndColumn@Reader@Json@@ABEXPBDAAH1@Z ; Json::Reader::getLocationLineAndColumn

; 851  :    char buffer[18+16+16+1];
; 852  :    sprintf( buffer, "Line %d, Column %d", line, column );

	mov	eax, DWORD PTR _column$[ebp]
	push	eax
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BD@LAMGIMLG@Line?5?$CFd?0?5Column?5?$CFd?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 853  :    return buffer;

	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T64349[ebp]
	or	ecx, 1
	mov	DWORD PTR $T64349[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 854  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; Json::Reader::getLocationLineAndColumn
_TEXT	ENDS
PUBLIC	??_C@_04JBAOJHKB@See?5?$AA@			; `string'
PUBLIC	??_C@_0O@JBAGGIKP@?5for?5detail?4?6?$AA@	; `string'
PUBLIC	??_C@_02KNHHEEKP@?5?5?$AA@			; `string'
PUBLIC	??_C@_02KAOAMBHJ@?$CK?5?$AA@			; `string'
PUBLIC	??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*
PUBLIC	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator!=
PUBLIC	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
PUBLIC	??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator++
PUBLIC	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
PUBLIC	__$ArrayPad$
PUBLIC	?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Json::Reader::getFormatedErrorMessages
;	COMDAT ??_C@_04JBAOJHKB@See?5?$AA@
CONST	SEGMENT
??_C@_04JBAOJHKB@See?5?$AA@ DB 'See ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JBAGGIKP@?5for?5detail?4?6?$AA@
CONST	SEGMENT
??_C@_0O@JBAGGIKP@?5for?5detail?4?6?$AA@ DB ' for detail.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNHHEEKP@?5?5?$AA@
CONST	SEGMENT
??_C@_02KNHHEEKP@?5?5?$AA@ DB '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KAOAMBHJ@?$CK?5?$AA@
CONST	SEGMENT
??_C@_02KAOAMBHJ@?$CK?5?$AA@ DB '* ', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$9
	DD	00H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$4
	DD	05H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$5
	DD	01H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$6
	DD	07H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$7
	DD	08H
	DD	FLAT:__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$8
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
tv193 = -360						; size = 4
tv205 = -356						; size = 4
tv191 = -352						; size = 4
tv204 = -348						; size = 4
tv189 = -344						; size = 4
tv203 = -340						; size = 4
tv187 = -336						; size = 4
tv202 = -332						; size = 4
tv185 = -328						; size = 4
tv201 = -324						; size = 4
tv183 = -320						; size = 4
tv200 = -316						; size = 4
tv181 = -312						; size = 4
tv199 = -308						; size = 4
tv179 = -304						; size = 4
tv65 = -300						; size = 4
_this$ = -296						; size = 4
$T64373 = -292						; size = 4
$T64362 = -288						; size = 28
$T64361 = -260						; size = 28
$T64360 = -232						; size = 28
$T64359 = -204						; size = 28
$T64358 = -176						; size = 28
$T64357 = -148						; size = 28
$T64356 = -120						; size = 28
$T64355 = -92						; size = 28
$T64354 = -64						; size = 8
_error$56929 = -56					; size = 4
_itError$56923 = -52					; size = 8
_formattedMessage$ = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Json::Reader::getFormatedErrorMessages, COMDAT
; _this$ = ecx

; 859  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 348				; 0000015cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T64373[ebp], 0

; 860  :    std::string formattedMessage;

	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 861  :    for ( Errors::const_iterator itError = errors_.begin();

	lea	eax, DWORD PTR _itError$56923[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	jmp	SHORT $LN4@getFormate
$LN3@getFormate:

; 862  :          itError != errors_.end();
; 863  :          ++itError )

	lea	ecx, DWORD PTR _itError$56923[ebp]
	call	??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator++
$LN4@getFormate:
	lea	ecx, DWORD PTR $T64354[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
	push	eax
	lea	ecx, DWORD PTR _itError$56923[ebp]
	call	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator!=
	movzx	edx, al
	test	edx, edx
	je	$LN2@getFormate

; 864  :    {
; 865  :       const ErrorInfo &error = *itError;

	lea	ecx, DWORD PTR _itError$56923[ebp]
	call	??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*
	mov	DWORD PTR _error$56929[ebp], eax

; 866  :       formattedMessage += "* " + getLocationLineAndColumn( error.token_.start_ ) + "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _error$56929[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T64355[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::Reader::getLocationLineAndColumn
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv179[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv179[ebp]
	push	ecx
	push	OFFSET ??_C@_02KAOAMBHJ@?$CK?5?$AA@
	lea	edx, DWORD PTR $T64356[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv199[ebp], eax
	mov	eax, DWORD PTR tv199[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv181[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64357[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv200[ebp], eax
	mov	eax, DWORD PTR tv200[ebp]
	mov	DWORD PTR tv183[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR tv183[ebp]
	push	ecx
	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T64357[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T64356[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T64355[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 867  :       formattedMessage += "  " + error.message_ + "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	edx, DWORD PTR _error$56929[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_02KNHHEEKP@?5?5?$AA@
	lea	eax, DWORD PTR $T64358[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv201[ebp], eax
	mov	ecx, DWORD PTR tv201[ebp]
	mov	DWORD PTR tv185[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR tv185[ebp]
	push	edx
	lea	eax, DWORD PTR $T64359[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv202[ebp], eax
	mov	ecx, DWORD PTR tv202[ebp]
	mov	DWORD PTR tv187[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR tv187[ebp]
	push	edx
	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T64359[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T64358[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 868  :       if ( error.extra_ )

	mov	eax, DWORD PTR _error$56929[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN1@getFormate

; 869  :          formattedMessage += "See " + getLocationLineAndColumn( error.extra_ ) + " for detail.\n";

	push	OFFSET ??_C@_0O@JBAGGIKP@?5for?5detail?4?6?$AA@
	mov	ecx, DWORD PTR _error$56929[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	lea	eax, DWORD PTR $T64360[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLocationLineAndColumn@Reader@Json@@ABE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; Json::Reader::getLocationLineAndColumn
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR tv189[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR tv189[ebp]
	push	edx
	push	OFFSET ??_C@_04JBAOJHKB@See?5?$AA@
	lea	eax, DWORD PTR $T64361[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR tv204[ebp]
	mov	DWORD PTR tv191[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	edx, DWORD PTR tv191[ebp]
	push	edx
	lea	eax, DWORD PTR $T64362[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv205[ebp], eax
	mov	ecx, DWORD PTR tv205[ebp]
	mov	DWORD PTR tv193[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR tv193[ebp]
	push	edx
	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T64362[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T64361[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T64360[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@getFormate:

; 870  :    }

	jmp	$LN3@getFormate
$LN2@getFormate:

; 871  :    return formattedMessage;

	lea	eax, DWORD PTR _formattedMessage$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T64373[ebp]
	or	ecx, 1
	mov	DWORD PTR $T64373[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 872  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
	lea	ecx, DWORD PTR _formattedMessage$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
	lea	ecx, DWORD PTR $T64355[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
	lea	ecx, DWORD PTR $T64356[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3:
	lea	ecx, DWORD PTR $T64357[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$4:
	lea	ecx, DWORD PTR $T64358[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$5:
	lea	ecx, DWORD PTR $T64359[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$6:
	lea	ecx, DWORD PTR $T64360[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$7:
	lea	ecx, DWORD PTR $T64361[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$8:
	lea	ecx, DWORD PTR $T64362[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$9:
	mov	eax, DWORD PTR $T64373[ebp]
	and	eax, 1
	je	$LN17@getFormate
	and	DWORD PTR $T64373[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN17@getFormate:
	ret	0
__ehhandler$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-352]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Json::Reader::getFormatedErrorMessages
PUBLIC	??1Reader@Json@@QAE@XZ				; Json::Reader::~Reader
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	__$ArrayPad$
PUBLIC	??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z ; Json::operator>>
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z$1
__ehfuncinfo$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z
_TEXT	SEGMENT
tv85 = -244						; size = 4
tv65 = -240						; size = 4
$T64387 = -236						; size = 4
$T64385 = -232						; size = 28
$T64384 = -204						; size = 40
_reader$ = -164						; size = 144
__$ArrayPad$ = -20					; size = 4
_ok$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_sin$ = 8						; size = 4
_root$ = 12						; size = 4
??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z PROC ; Json::operator>>, COMDAT

; 876  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 877  :     Json::Reader reader;

	lea	ecx, DWORD PTR _reader$[ebp]
	call	??0Reader@Json@@QAE@XZ			; Json::Reader::Reader
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 878  :     bool ok = reader.parse(sin, root, true);

	push	1
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sin$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _reader$[ebp]
	call	?parse@Reader@Json@@QAE_NAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAVValue@2@_N@Z ; Json::Reader::parse
	mov	BYTE PTR _ok$[ebp], al

; 879  :     //JSON_ASSERT( ok );
; 880  :     if (!ok) throw std::runtime_error(reader.getFormatedErrorMessages());

	movzx	edx, BYTE PTR _ok$[ebp]
	test	edx, edx
	jne	SHORT $LN1@operator
	lea	eax, DWORD PTR $T64385[ebp]
	push	eax
	lea	ecx, DWORD PTR _reader$[ebp]
	call	?getFormatedErrorMessages@Reader@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Json::Reader::getFormatedErrorMessages
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv85[ebp]
	push	edx
	lea	ecx, DWORD PTR $T64384[ebp]
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T64384[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T64385[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@operator:

; 881  :     return sin;

	mov	ecx, DWORD PTR _sin$[ebp]
	mov	DWORD PTR $T64387[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _reader$[ebp]
	call	??1Reader@Json@@QAE@XZ
	mov	eax, DWORD PTR $T64387[ebp]
$LN3@operator:

; 882  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z$0:
	lea	ecx, DWORD PTR _reader$[ebp]
	jmp	??1Reader@Json@@QAE@XZ
__unwindfunclet$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z$1:
	lea	ecx, DWORD PTR $T64385[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-236]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??5Json@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVValue@0@@Z ENDP ; Json::operator>>
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@runtime_error@std@@UBEPBDXZ		; std::runtime_error::what
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File f:\tools\vs2008\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@runtime_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 153  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7runtime_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 154  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
; Function compile flags: /Odtp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7runtime_error@std@@6B@

; 158  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@runtime_error@std@@UBEPBDXZ PROC			; std::runtime_error::what, COMDAT
; _this$ = ecx

; 161  : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 163  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@runtime_error@std@@UBEPBDXZ ENDP			; std::runtime_error::what
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1runtime_error@std@@UAE@XZ		; std::runtime_error::~runtime_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Reader@Json@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Reader@Json@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Reader@Json@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1Reader@Json@@QAE@XZ$2
__ehfuncinfo$??1Reader@Json@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1Reader@Json@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Reader@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Reader@Json@@QAE@XZ PROC				; Json::Reader::~Reader, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Reader@Json@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Reader@Json@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??1Reader@Json@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
__unwindfunclet$??1Reader@Json@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1Reader@Json@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Reader@Json@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Reader@Json@@QAE@XZ ENDP				; Json::Reader::~Reader
PUBLIC	??0?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\stack
;	COMDAT ??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with empty container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >

; 29   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >
_TEXT	ENDS
PUBLIC	?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
; Function compile flags: /Odtp
;	COMDAT ?empty@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QBE_NXZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty, COMDAT
; _this$ = ecx

; 37   : 		{	// test if stack is empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return (c.empty());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty

; 39   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QBE_NXZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::empty
_TEXT	ENDS
PUBLIC	?back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEAAPAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back
; Function compile flags: /Odtp
;	COMDAT ?top@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEAAPAVValue@Json@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?top@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEAAPAVValue@Json@@XZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top, COMDAT
; _this$ = ecx

; 47   : 		{	// return last element of mutable stack

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 		return (c.back());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEAAPAVValue@Json@@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back

; 49   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?top@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEAAPAVValue@Json@@XZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::top
_TEXT	ENDS
PUBLIC	?push_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back
; Function compile flags: /Odtp
;	COMDAT ?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push, COMDAT
; _this$ = ecx

; 57   : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 		c.push_back(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXABQAVValue@Json@@@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back

; 59   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXABQAVValue@Json@@@Z ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::push
_TEXT	ENDS
PUBLIC	?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back
; Function compile flags: /Odtp
;	COMDAT ?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ PROC ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop, COMDAT
; _this$ = ecx

; 62   : 		{	// erase last element

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 		c.pop_back();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back

; 64   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?pop@?$stack@PAVValue@Json@@V?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@@std@@QAEXXZ ENDP ; std::stack<Json::Value *,std::deque<Json::Value *,std::allocator<Json::Value *> > >::pop
_TEXT	ENDS
PUBLIC	??1?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::~_Deque_val<Json::Value *,std::allocator<Json::Value *> >
PUBLIC	?_Tidy@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Tidy
;	COMDAT xdata$x
; File f:\tools\vs2008\vc\include\deque
xdata$x	SEGMENT
__unwindtable$??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::~deque<Json::Value *,std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx

; 640  : 		{	// destroy the deque

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 641  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Tidy

; 642  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
__ehhandler$??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::~deque<Json::Value *,std::allocator<Json::Value *> >
PUBLIC	??0?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@XZ ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
;	COMDAT ??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T64456 = -4						; size = 4
??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx

; 554  : 		{	// construct empty deque

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T64456[ebp], esp
	call	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@XZ ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 555  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
_TEXT	ENDS
PUBLIC	??1?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx

; 640  : 		{	// destroy the deque

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 641  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy

; 642  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
__ehhandler$??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
;	COMDAT ?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin, COMDAT
; _this$ = ecx

; 670  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  : 		return (const_iterator(_Myoff, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 672  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end, COMDAT
; _this$ = ecx

; 680  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 681  : 		return (const_iterator(_Myoff + _Mysize, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+28]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 682  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
_TEXT	ENDS
PUBLIC	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
; Function compile flags: /Odtp
;	COMDAT ?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv80 = -12						; size = 4
_this$ = -8						; size = 4
$T64473 = -4						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize, COMDAT
; _this$ = ecx

; 710  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 711  : 		resize(_Newsize, _Ty());

	sub	esp, 44					; 0000002cH
	mov	ecx, esp
	mov	DWORD PTR $T64473[ebp], esp
	call	??0ErrorInfo@Reader@Json@@QAE@XZ
	mov	DWORD PTR tv80[ebp], eax
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize

; 712  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXI@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size, COMDAT
; _this$ = ecx

; 723  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 724  : 		return (_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]

; 725  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::size
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z ; std::allocator<Json::Reader::ErrorInfo>::construct
PUBLIC	?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo>::allocate
PUBLIC	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Block$ = -8						; size = 4
__Newoff$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back, COMDAT
; _this$ = ecx

; 843  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 844  : 
; 845  :  #if _HAS_ITERATOR_DEBUGGING
; 846  : 		this->_Orphan_all();
; 847  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 848  : 
; 849  : 		if ((_Myoff + _Mysize) % _DEQUESIZ == 0
; 850  : 			&& _Mapsize <= (_Mysize + _DEQUESIZ) / _DEQUESIZ)

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+28]
	xor	edx, edx
	mov	ecx, 1
	div	ecx
	test	edx, edx
	jne	SHORT $LN3@push_back
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN3@push_back

; 851  : 			_Growmap(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
$LN3@push_back:

; 852  : 		size_type _Newoff = _Myoff + _Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR __Newoff$[ebp], eax

; 853  : 		size_type _Block = _Newoff / _DEQUESIZ;

	mov	edx, DWORD PTR __Newoff$[ebp]
	mov	DWORD PTR __Block$[ebp], edx

; 854  : 		if (_Mapsize <= _Block)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Block$[ebp]
	ja	SHORT $LN2@push_back

; 855  : 			_Block -= _Mapsize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Block$[ebp]
	sub	eax, DWORD PTR [edx+20]
	mov	DWORD PTR __Block$[ebp], eax
$LN2@push_back:

; 856  : 		if (_Map[_Block] == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Block$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	SHORT $LN1@push_back

; 857  : 			_Map[_Block] = this->_Alval.allocate(_DEQUESIZ);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR __Block$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN1@push_back:

; 858  : 		this->_Alval.construct(_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR __Newoff$[ebp]
	xor	edx, edx
	mov	esi, 1
	div	esi
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR __Block$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z ; std::allocator<Json::Reader::ErrorInfo>::construct

; 859  : 		++_Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], edx

; 860  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear, COMDAT
; _this$ = ecx

; 1085 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1086 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy

; 1087 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::clear
_TEXT	ENDS
PUBLIC	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
PUBLIC	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ	; std::_Iterator_base_aux::_Has_container
EXTRN	__imp___invalid_parameter_noinfo:PROC
; Function compile flags: /Odtp
;	COMDAT ??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Off$ = -8						; size = 4
__Block$ = -4						; size = 4
??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*, COMDAT
; _this$ = ecx

; 136  : 			{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 			size_type _Block = _Myoff / _DEQUESIZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Block$[ebp], ecx

; 138  : 			size_type _Off = _Myoff & (_DEQUESIZ - 1);	// assume power of 2

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 0
	mov	DWORD PTR __Off$[ebp], eax

; 139  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator@2
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@2:

; 140  : 			_SCL_SECURE_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Getmycont()))->_Myoff + ((_Mydeque *)(this->_Getmycont()))->_Mysize);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	edx, DWORD PTR [esi+24]
	add	edx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], edx
	jb	SHORT $LN2@operator@2
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@2:

; 141  : 			if (static_cast<const _Mydeque *>(this->_Getmycont())->_Mapsize <= _Block)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Block$[ebp]
	ja	SHORT $LN1@operator@2

; 142  : 				_Block -= static_cast<const _Mydeque *>(this->_Getmycont())->_Mapsize;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	edx, DWORD PTR __Block$[ebp]
	sub	edx, DWORD PTR [eax+20]
	mov	DWORD PTR __Block$[ebp], edx
$LN1@operator@2:

; 143  : 			return ((static_cast<const _Mydeque *>(this->_Getmycont())->_Map)[_Block][_Off]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	eax, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR __Off$[ebp]
	imul	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR __Block$[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	eax, ecx

; 144  : 			}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*
_TEXT	ENDS
PUBLIC	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xutility
;	COMDAT ?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Iterator_base_aux::_Getmycont, COMDAT
; _this$ = ecx

; 457  : 		{	// Go through the aux object to get the container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 		return _Myaux ? _Myaux->_Getcont() : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Aux_cont::_Getcont
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN4@Getmycont
$LN3@Getmycont:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Getmycont:
	mov	eax, DWORD PTR tv67[ebp]

; 459  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Iterator_base_aux::_Getmycont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ PROC ; std::_Aux_cont::_Getcont, COMDAT
; _this$ = ecx

; 368  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 		return _Mycontainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 370  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Aux_cont@std@@QBEPBV_Container_base_aux@2@XZ ENDP ; std::_Aux_cont::_Getcont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base_aux@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ PROC	; std::_Iterator_base_aux::_Has_container, COMDAT
; _this$ = ecx

; 467  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 		return _Myaux != 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	al, cl

; 469  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ENDP	; std::_Iterator_base_aux::_Has_container
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
_TEXT	ENDS
;	COMDAT ??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator++, COMDAT
; _this$ = ecx

; 153  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 154  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@operator@3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@operator@3
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN4@operator@3:

; 155  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Getmycont()))->_Myoff + ((_Mydeque *)(this->_Getmycont()))->_Mysize);

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@operator@3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR [esi+24]
	add	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], ecx
	jb	SHORT $LN2@operator@3
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@3:

; 156  : 
; 157  :  #if _HAS_ITERATOR_DEBUGGING
; 158  : 		if (this->_Mycont == 0
; 159  : 			|| ((_Mydeque *)this->_Mycont)->_Myoff
; 160  : 				+ ((_Mydeque *)this->_Mycont)->_Mysize == _Myoff)
; 161  : 			_DEBUG_ERROR("deque iterator not incrementable");
; 162  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 163  : 
; 164  : 		++_Myoff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator++
_TEXT	ENDS
PUBLIC	??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator!=, COMDAT
; _this$ = ecx

; 261  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 262  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 263  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator!=
_TEXT	ENDS
PUBLIC	??1?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::~_Deque_map<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::~_Deque_val<Json::Value *,std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::~_Deque_val<Json::Value *,std::allocator<Json::Value *> >
_TEXT	ENDS
PUBLIC	??1?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >::~_Container_base_aux_alloc_real<std::allocator<Json::Value *> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ PROC ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::~_Deque_map<Json::Value *,std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >::~_Container_base_aux_alloc_real<std::allocator<Json::Value *> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::~_Deque_map<Json::Value *,std::allocator<Json::Value *> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >::~_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ PROC ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >::~_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::~_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::_Deque_val<Json::Value *,std::allocator<Json::Value *> >
PUBLIC	??0?$allocator@PAVValue@Json@@@std@@QAE@XZ	; std::allocator<Json::Value *>::allocator<Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ??0?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T64509 = -4						; size = 4
??0?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx

; 554  : 		{	// construct empty deque

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T64509[ebp], esp
	call	??0?$allocator@PAVValue@Json@@@std@@QAE@XZ ; std::allocator<Json::Value *>::allocator<Json::Value *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::_Deque_val<Json::Value *,std::allocator<Json::Value *> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 555  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::deque<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty, COMDAT
; _this$ = ecx

; 733  : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 734  : 		return (_Mysize == 0);

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+28], 0
	sete	cl
	mov	al, cl

; 735  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
_TEXT	ENDS
PUBLIC	??D?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEAAPAVValue@Json@@XZ ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*
PUBLIC	??G?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-
PUBLIC	?end@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::end
; Function compile flags: /Odtp
;	COMDAT ?back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEAAPAVValue@Json@@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T64516 = -16						; size = 8
$T64515 = -8						; size = 8
?back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEAAPAVValue@Json@@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back, COMDAT
; _this$ = ecx

; 789  : 		{	// return last element of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 790  : 		return (*(end() - 1));

	push	1
	lea	eax, DWORD PTR $T64516[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64515[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@2@XZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::end
	mov	ecx, eax
	call	??G?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-
	mov	ecx, eax
	call	??D?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEAAPAVValue@Json@@XZ ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*

; 791  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEAAPAVValue@Json@@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::back
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@ABQAV34@@Z ; std::allocator<Json::Value *>::construct
PUBLIC	?allocate@?$allocator@PAVValue@Json@@@std@@QAEPAPAVValue@Json@@I@Z ; std::allocator<Json::Value *>::allocate
PUBLIC	?_Growmap@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXI@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXABQAVValue@Json@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Block$ = -8						; size = 4
__Newoff$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXABQAVValue@Json@@@Z PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back, COMDAT
; _this$ = ecx

; 843  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 844  : 
; 845  :  #if _HAS_ITERATOR_DEBUGGING
; 846  : 		this->_Orphan_all();
; 847  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 848  : 
; 849  : 		if ((_Myoff + _Mysize) % _DEQUESIZ == 0
; 850  : 			&& _Mapsize <= (_Mysize + _DEQUESIZ) / _DEQUESIZ)

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+28]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN3@push_back@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	add	eax, 4
	shr	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN3@push_back@2

; 851  : 			_Growmap(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Growmap@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXI@Z ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
$LN3@push_back@2:

; 852  : 		size_type _Newoff = _Myoff + _Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR __Newoff$[ebp], eax

; 853  : 		size_type _Block = _Newoff / _DEQUESIZ;

	mov	edx, DWORD PTR __Newoff$[ebp]
	shr	edx, 2
	mov	DWORD PTR __Block$[ebp], edx

; 854  : 		if (_Mapsize <= _Block)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Block$[ebp]
	ja	SHORT $LN2@push_back@2

; 855  : 			_Block -= _Mapsize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Block$[ebp]
	sub	eax, DWORD PTR [edx+20]
	mov	DWORD PTR __Block$[ebp], eax
$LN2@push_back@2:

; 856  : 		if (_Map[_Block] == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Block$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	SHORT $LN1@push_back@2

; 857  : 			_Map[_Block] = this->_Alval.allocate(_DEQUESIZ);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?allocate@?$allocator@PAVValue@Json@@@std@@QAEPAPAVValue@Json@@I@Z ; std::allocator<Json::Value *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR __Block$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN1@push_back@2:

; 858  : 		this->_Alval.construct(_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR __Newoff$[ebp]
	xor	edx, edx
	mov	esi, 4
	div	esi
	mov	eax, DWORD PTR __Block$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@ABQAV34@@Z ; std::allocator<Json::Value *>::construct

; 859  : 		++_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 860  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXABQAVValue@Json@@@Z ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::push_back
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@@Z ; std::allocator<Json::Value *>::destroy
; Function compile flags: /Odtp
;	COMDAT ?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Block$59548 = -8					; size = 4
__Newoff$59547 = -4					; size = 4
?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back, COMDAT
; _this$ = ecx

; 863  : 		{	// erase element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 864  : 
; 865  :  #if _HAS_ITERATOR_DEBUGGING
; 866  : 		if (empty())
; 867  : 			_DEBUG_ERROR("deque empty before pop");
; 868  : 		else
; 869  : 			{	// something to erase, do it
; 870  : 			_Orphan_off(_Myoff + _Mysize - 1);
; 871  : 
; 872  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 873  : 		if (!empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@pop_back

; 874  : 			{	// something to erase, do it
; 875  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 876  : 
; 877  : 			size_type _Newoff = _Mysize + _Myoff - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR __Newoff$59547[ebp], edx

; 878  : 			size_type _Block = _Newoff / _DEQUESIZ;

	mov	eax, DWORD PTR __Newoff$59547[ebp]
	shr	eax, 2
	mov	DWORD PTR __Block$59548[ebp], eax

; 879  : 			if (_Mapsize <= _Block)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR __Block$59548[ebp]
	ja	SHORT $LN2@pop_back

; 880  : 				_Block -= _Mapsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Block$59548[ebp]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Block$59548[ebp], ecx
$LN2@pop_back:

; 881  : 			this->_Alval.destroy(_Map[_Block] + _Newoff % _DEQUESIZ);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR __Newoff$59547[ebp]
	xor	edx, edx
	mov	esi, 4
	div	esi
	mov	eax, DWORD PTR __Block$59548[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@@Z ; std::allocator<Json::Value *>::destroy

; 882  : 			if (--_Mysize == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@pop_back

; 883  : 				_Myoff = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
$LN4@pop_back:

; 884  : 			}
; 885  : 			}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z ; std::allocator<Json::Value * *>::deallocate
PUBLIC	?destroy@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@@Z ; std::allocator<Json::Value * *>::destroy
PUBLIC	?deallocate@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@I@Z ; std::allocator<Json::Value *>::deallocate
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$59564 = -4					; size = 4
?_Tidy@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Tidy, COMDAT
; _this$ = ecx

; 1268 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN6@Tidy:

; 1269 : 		while (!empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@Tidy

; 1270 : 			pop_back();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::pop_back
	jmp	SHORT $LN6@Tidy
$LN5@Tidy:

; 1271 : 		for (size_type _Count = _Mapsize; 0 < _Count; )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR __Count$59564[ebp], edx
$LN4@Tidy:
	cmp	DWORD PTR __Count$59564[ebp], 0
	jbe	SHORT $LN3@Tidy

; 1272 : 			{	// free storage for a block and destroy pointer
; 1273 : 			if (*(_Map + --_Count) != 0)

	mov	eax, DWORD PTR __Count$59564[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$59564[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$59564[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN2@Tidy

; 1274 : 				this->_Alval.deallocate(*(_Map + _Count), _DEQUESIZ);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$59564[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?deallocate@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@I@Z ; std::allocator<Json::Value *>::deallocate
$LN2@Tidy:

; 1275 : 			this->_Almap.destroy(_Map + _Count);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Count$59564[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?destroy@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@@Z ; std::allocator<Json::Value * *>::destroy

; 1276 : 			}

	jmp	SHORT $LN4@Tidy
$LN3@Tidy:

; 1277 : 
; 1278 : 		if (_Map)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@Tidy

; 1279 : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for map

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z ; std::allocator<Json::Value * *>::deallocate
$LN1@Tidy:

; 1280 : 		_Mapsize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1281 : 		_Map = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1282 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Tidy
_TEXT	ENDS
PUBLIC	??1_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::~_Container_base_aux
PUBLIC	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate
;	COMDAT xdata$x
; File f:\tools\vs2008\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >::~_Container_base_aux_alloc_real<std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >::~_Container_base_aux_alloc_real<std::allocator<Json::Value *> >
; Function compile flags: /Odtp
;	COMDAT ??1_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::~_Container_base_aux, COMDAT
; _this$ = ecx

; 402  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 		// Do nothing: ~_Container_base_aux_alloc_real() previously destroyed the aux object.
; 404  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::~_Container_base_aux
_TEXT	ENDS
PUBLIC	?erase@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@0@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::erase
PUBLIC	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
PUBLIC	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
PUBLIC	?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Insert_n
PUBLIC	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
;	COMDAT xdata$x
; File f:\tools\vs2008\vc\include\deque
xdata$x	SEGMENT
__unwindtable$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z$0
__ehfuncinfo$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T64544 = -80						; size = 8
$T64543 = -72						; size = 8
$T64542 = -64						; size = 8
$T64541 = -56						; size = 8
$T64540 = -48						; size = 8
$T64539 = -40						; size = 8
$T64538 = -32						; size = 8
$T64537 = -24						; size = 8
__$EHRec$ = -12						; size = 12
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 44
?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize, COMDAT
; _this$ = ecx

; 715  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 716  : 		if (_Mysize < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize

; 717  : 			_Insert_n(end(), _Newsize - _Mysize, _Val);

	lea	edx, DWORD PTR $T64538[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T64537[ebp], ecx
	mov	DWORD PTR $T64537[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newsize$[ebp]
	sub	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR $T64537[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T64537[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Insert_n
	jmp	SHORT $LN2@resize
$LN3@resize:

; 718  : 		else if (_Newsize < _Mysize)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR [edx+28]
	jae	SHORT $LN2@resize

; 719  : 			erase(begin() + _Newsize, end());

	lea	ecx, DWORD PTR $T64540[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T64539[ebp], edx
	mov	DWORD PTR $T64539[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64543[ebp]
	push	edx
	lea	eax, DWORD PTR $T64542[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	ecx, eax
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T64541[ebp], ecx
	mov	DWORD PTR $T64541[ebp+4], edx
	mov	eax, DWORD PTR $T64539[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T64539[ebp]
	push	ecx
	mov	edx, DWORD PTR $T64541[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T64541[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64544[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@0@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::erase
$LN2@resize:

; 720  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Val$[ebp]
	call	??1ErrorInfo@Reader@Json@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z$0:
	lea	ecx, DWORD PTR __Val$[ebp]
	jmp	??1ErrorInfo@Reader@Json@@QAE@XZ
__ehhandler$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resize@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXIVErrorInfo@Reader@Json@@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::resize
PUBLIC	?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo *>::deallocate
PUBLIC	??$_Destroy_range@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@@Z ; std::_Destroy_range<std::allocator<Json::Reader::ErrorInfo *> >
PUBLIC	??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
PUBLIC	??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
PUBLIC	?allocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEPAPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo *>::allocate
PUBLIC	?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen
PUBLIC	?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T64556 = -28						; size = 4
$T64555 = -24						; size = 4
$T64554 = -20						; size = 4
__Newmap$ = -16						; size = 4
__Myptr$ = -12						; size = 4
__Inc$ = -8						; size = 4
__Myboff$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap, COMDAT
; _this$ = ecx

; 1225 : 		{	// grow map by _Count pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1226 : 		if (max_size() / _DEQUESIZ - _Mapsize < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN6@Growmap

; 1227 : 			_Xlen();	// result too long

	call	?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen
$LN6@Growmap:

; 1228 : 
; 1229 : 		size_type _Inc = _Mapsize / 2;	// try to grow by 50%

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	DWORD PTR __Inc$[ebp], eax

; 1230 : 		if (_Inc < _DEQUEMAPSIZ)

	cmp	DWORD PTR __Inc$[ebp], 8
	jae	SHORT $LN5@Growmap

; 1231 : 			_Inc = _DEQUEMAPSIZ;

	mov	DWORD PTR __Inc$[ebp], 8
$LN5@Growmap:

; 1232 : 		if (_Count < _Inc && _Mapsize <= max_size() / _DEQUESIZ - _Inc)

	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR __Inc$[ebp]
	jae	SHORT $LN4@Growmap
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size
	sub	eax, DWORD PTR __Inc$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+20], eax
	ja	SHORT $LN4@Growmap

; 1233 : 			_Count = _Inc;

	mov	eax, DWORD PTR __Inc$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN4@Growmap:

; 1234 : 		size_type _Myboff = _Myoff / _DEQUESIZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR __Myboff$[ebp], edx

; 1235 : 		_Mapptr _Newmap = this->_Almap.allocate(_Mapsize + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEPAPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo *>::allocate
	mov	DWORD PTR __Newmap$[ebp], eax

; 1236 : 		_Mapptr _Myptr = _Newmap + _Myboff;

	mov	edx, DWORD PTR __Myboff$[ebp]
	mov	eax, DWORD PTR __Newmap$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Myptr$[ebp], ecx

; 1237 : 
; 1238 : 		_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Myboff,
; 1239 : 			_Map + _Mapsize, _Myptr, this->_Almap);	// copy initial to end

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Myboff$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1240 : 		if (_Myboff <= _Count)

	mov	ecx, DWORD PTR __Myboff$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@Growmap

; 1241 : 			{	// increment greater than offset of initial block
; 1242 : 			_Myptr = _STDEXT unchecked_uninitialized_copy(_Map,
; 1243 : 				_Map + _Myboff, _Myptr, this->_Almap);	// copy rest of old

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1244 : 			_STDEXT unchecked_uninitialized_fill_n(_Myptr, _Count - _Myboff,
; 1245 : 				(_Tptr)0, this->_Almap);	// clear suffix of new

	mov	DWORD PTR $T64554[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	lea	edx, DWORD PTR $T64554[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Myboff$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myptr$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H

; 1246 : 			_STDEXT unchecked_uninitialized_fill_n(_Newmap, _Myboff,
; 1247 : 				(_Tptr)0, this->_Almap);	// clear prefix of new

	mov	DWORD PTR $T64555[ebp], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	lea	eax, DWORD PTR $T64555[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myboff$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newmap$[ebp]
	push	edx
	call	??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H

; 1248 : 			}
; 1249 : 		else

	jmp	SHORT $LN2@Growmap
$LN3@Growmap:

; 1250 : 			{	// increment not greater than offset of initial block
; 1251 : 			_STDEXT unchecked_uninitialized_copy(_Map,
; 1252 : 				_Map + _Count, _Myptr, this->_Almap);	// copy more old

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Myptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H

; 1253 : 			_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Count,
; 1254 : 				_Map + _Myboff, _Newmap, this->_Almap);	// copy rest of old

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR __Newmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1255 : 			_STDEXT unchecked_uninitialized_fill_n(_Myptr, _Count,
; 1256 : 				(_Tptr)0, this->_Almap);	// clear rest to initial block

	mov	DWORD PTR $T64556[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR $T64556[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H
$LN2@Growmap:

; 1257 : 			}
; 1258 : 
; 1259 : 		_Destroy_range(_Map + _Myboff, _Map + _Mapsize, this->_Almap);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [edx+eax*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	??$_Destroy_range@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@@Z ; std::_Destroy_range<std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 12					; 0000000cH

; 1260 : 		if (_Map)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN1@Growmap

; 1261 : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for old

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo *>::deallocate
$LN1@Growmap:

; 1262 : 
; 1263 : 		_Map = _Newmap;	// point at new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newmap$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1264 : 		_Mapsize += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1265 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@@Z ; std::allocator<Json::Reader::ErrorInfo *>::destroy
PUBLIC	?deallocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo>::deallocate
PUBLIC	?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
PUBLIC	?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$59725 = -4					; size = 4
?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1268 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN6@Tidy@2:

; 1269 : 		while (!empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@Tidy@2

; 1270 : 			pop_back();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
	jmp	SHORT $LN6@Tidy@2
$LN5@Tidy@2:

; 1271 : 		for (size_type _Count = _Mapsize; 0 < _Count; )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR __Count$59725[ebp], edx
$LN4@Tidy@2:
	cmp	DWORD PTR __Count$59725[ebp], 0
	jbe	SHORT $LN3@Tidy@2

; 1272 : 			{	// free storage for a block and destroy pointer
; 1273 : 			if (*(_Map + --_Count) != 0)

	mov	eax, DWORD PTR __Count$59725[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$59725[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$59725[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN2@Tidy@2

; 1274 : 				this->_Alval.deallocate(*(_Map + _Count), _DEQUESIZ);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Count$59725[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?deallocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo>::deallocate
$LN2@Tidy@2:

; 1275 : 			this->_Almap.destroy(_Map + _Count);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Count$59725[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?destroy@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@@Z ; std::allocator<Json::Reader::ErrorInfo *>::destroy

; 1276 : 			}

	jmp	SHORT $LN4@Tidy@2
$LN3@Tidy@2:

; 1277 : 
; 1278 : 		if (_Map)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@Tidy@2

; 1279 : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for map

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo *>::deallocate
$LN1@Tidy@2:

; 1280 : 		_Mapsize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1281 : 		_Map = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1282 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
PUBLIC	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T64561 = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z PROC ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct allocator and base from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T64561[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>

; 501  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_val@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ENDP ; std::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_val<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
_TEXT	ENDS
;	COMDAT xdata$x
; File f:\tools\vs2008\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ$0
__ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >::~_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx

; 436  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::deallocate

; 440  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__ehhandler$??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >::~_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
;	COMDAT ??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@XZ PROC ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@XZ ENDP ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@VErrorInfo@Reader@Json@@@std@@YAPAVErrorInfo@Reader@Json@@IPAV123@@Z ; std::_Allocate<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@VErrorInfo@Reader@Json@@@std@@YAPAVErrorInfo@Reader@Json@@IPAV123@@Z ; std::_Allocate<Json::Reader::ErrorInfo>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::allocate
_TEXT	ENDS
PUBLIC	??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z ; std::_Construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z ; std::_Construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::construct
_TEXT	ENDS
PUBLIC	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container
PUBLIC	??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ ; std::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
;	COMDAT ??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>, COMDAT
; _this$ = ecx

; 125  : 		_Deque_const_iterator(size_type _Off, const _Mydequebase *_Pdeque)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ

; 126  : 			{	// construct with offset _Off in *_Pdeque
; 127  : 			_SCL_SECURE_TRAITS_VALIDATE(
; 128  : 				_Pdeque != NULL &&
; 129  : 				((_Mydeque *)_Pdeque)->_Myoff <= _Off && _Off <= (((_Mydeque *)_Pdeque)->_Myoff + ((_Mydeque *)_Pdeque)->_Mysize));

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@Deque_cons
	cmp	DWORD PTR __Pdeque$[ebp], 0
	je	SHORT $LN1@Deque_cons
	mov	ecx, DWORD PTR __Pdeque$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	cmp	edx, DWORD PTR __Off$[ebp]
	ja	SHORT $LN1@Deque_cons
	mov	eax, DWORD PTR __Pdeque$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR __Pdeque$[ebp]
	add	ecx, DWORD PTR [edx+28]
	cmp	DWORD PTR __Off$[ebp], ecx
	jbe	SHORT $LN3@Deque_cons
$LN1@Deque_cons:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@Deque_cons:

; 130  : 				
; 131  : 			this->_Set_container(_Pdeque);

	mov	eax, DWORD PTR __Pdeque$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 132  : 			_Myoff = _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 133  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z PROC ; std::_Iterator_base_aux::_Set_container, COMDAT
; _this$ = ecx

; 452  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		_Myaux = _Pcont->_Myownedaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 454  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ENDP ; std::_Iterator_base_aux::_Set_container
_TEXT	ENDS
PUBLIC	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
;	COMDAT ??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator==, COMDAT
; _this$ = ecx

; 243  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 
; 245  :  #if _HAS_ITERATOR_DEBUGGING
; 246  : 		_Compat(_Right);
; 247  : 		return (_Myoff == _Right._Myoff);
; 248  : 		}
; 249  : 
; 250  :  #elif _SECURE_SCL
; 251  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@operator@4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator@4
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@4
$LN1@operator@4:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@4:

; 252  : 		return (_Myoff == _Right._Myoff);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	sete	cl
	mov	al, cl

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator==
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z PROC ; std::_Iterator_base_aux::_Same_container, COMDAT
; _this$ = ecx

; 462  : 		{	// Accelerate the comparison by not going through the aux object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 		return _Myaux == _Other._Myaux;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Other$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 464  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ENDP ; std::_Iterator_base_aux::_Same_container
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VErrorInfo@Reader@Json@@HPBV345@ABV345@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ PROC ; std::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VErrorInfo@Reader@Json@@HPBV345@ABV345@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ ENDP ; std::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>::_Ranit<Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base_aux@std@@QAE@XZ		; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VErrorInfo@Reader@Json@@HPBV345@ABV345@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VErrorInfo@Reader@Json@@HPBV345@ABV345@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@VErrorInfo@Reader@Json@@HPBV345@ABV345@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Json::Reader::ErrorInfo,int,Json::Reader::ErrorInfo const *,Json::Reader::ErrorInfo const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Iterator_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base_aux@std@@QAE@XZ PROC			; std::_Iterator_base_aux::_Iterator_base_aux, COMDAT
; _this$ = ecx

; 448  : 	_Iterator_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base_aux@std@@QAE@XZ ENDP			; std::_Iterator_base_aux::_Iterator_base_aux
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@V_Aux_cont@std@@@std@@QAEXPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
;	COMDAT ?end@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@2@XZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::end, COMDAT
; _this$ = ecx

; 675  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 676  : 		return (iterator(_Myoff + _Mysize, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+28]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 677  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@2@XZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::end
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@@Z ; std::_Destroy_range<std::allocator<Json::Value * *> >
PUBLIC	??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
PUBLIC	??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
PUBLIC	?allocate@?$allocator@PAPAVValue@Json@@@std@@QAEPAPAPAVValue@Json@@I@Z ; std::allocator<Json::Value * *>::allocate
PUBLIC	?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen
PUBLIC	?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size
; Function compile flags: /Odtp
;	COMDAT ?_Growmap@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T64600 = -28						; size = 4
$T64599 = -24						; size = 4
$T64598 = -20						; size = 4
__Newmap$ = -16						; size = 4
__Myptr$ = -12						; size = 4
__Inc$ = -8						; size = 4
__Myboff$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXI@Z PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap, COMDAT
; _this$ = ecx

; 1225 : 		{	// grow map by _Count pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1226 : 		if (max_size() / _DEQUESIZ - _Mapsize < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size
	shr	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN6@Growmap@2

; 1227 : 			_Xlen();	// result too long

	call	?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen
$LN6@Growmap@2:

; 1228 : 
; 1229 : 		size_type _Inc = _Mapsize / 2;	// try to grow by 50%

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	DWORD PTR __Inc$[ebp], eax

; 1230 : 		if (_Inc < _DEQUEMAPSIZ)

	cmp	DWORD PTR __Inc$[ebp], 8
	jae	SHORT $LN5@Growmap@2

; 1231 : 			_Inc = _DEQUEMAPSIZ;

	mov	DWORD PTR __Inc$[ebp], 8
$LN5@Growmap@2:

; 1232 : 		if (_Count < _Inc && _Mapsize <= max_size() / _DEQUESIZ - _Inc)

	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR __Inc$[ebp]
	jae	SHORT $LN4@Growmap@2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size
	shr	eax, 2
	sub	eax, DWORD PTR __Inc$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+20], eax
	ja	SHORT $LN4@Growmap@2

; 1233 : 			_Count = _Inc;

	mov	eax, DWORD PTR __Inc$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN4@Growmap@2:

; 1234 : 		size_type _Myboff = _Myoff / _DEQUESIZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 2
	mov	DWORD PTR __Myboff$[ebp], edx

; 1235 : 		_Mapptr _Newmap = this->_Almap.allocate(_Mapsize + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?allocate@?$allocator@PAPAVValue@Json@@@std@@QAEPAPAPAVValue@Json@@I@Z ; std::allocator<Json::Value * *>::allocate
	mov	DWORD PTR __Newmap$[ebp], eax

; 1236 : 		_Mapptr _Myptr = _Newmap + _Myboff;

	mov	edx, DWORD PTR __Myboff$[ebp]
	mov	eax, DWORD PTR __Newmap$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Myptr$[ebp], ecx

; 1237 : 
; 1238 : 		_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Myboff,
; 1239 : 			_Map + _Mapsize, _Myptr, this->_Almap);	// copy initial to end

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Myboff$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1240 : 		if (_Myboff <= _Count)

	mov	ecx, DWORD PTR __Myboff$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@Growmap@2

; 1241 : 			{	// increment greater than offset of initial block
; 1242 : 			_Myptr = _STDEXT unchecked_uninitialized_copy(_Map,
; 1243 : 				_Map + _Myboff, _Myptr, this->_Almap);	// copy rest of old

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1244 : 			_STDEXT unchecked_uninitialized_fill_n(_Myptr, _Count - _Myboff,
; 1245 : 				(_Tptr)0, this->_Almap);	// clear suffix of new

	mov	DWORD PTR $T64598[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	lea	edx, DWORD PTR $T64598[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Myboff$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myptr$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H

; 1246 : 			_STDEXT unchecked_uninitialized_fill_n(_Newmap, _Myboff,
; 1247 : 				(_Tptr)0, this->_Almap);	// clear prefix of new

	mov	DWORD PTR $T64599[ebp], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	lea	eax, DWORD PTR $T64599[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myboff$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newmap$[ebp]
	push	edx
	call	??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H

; 1248 : 			}
; 1249 : 		else

	jmp	SHORT $LN2@Growmap@2
$LN3@Growmap@2:

; 1250 : 			{	// increment not greater than offset of initial block
; 1251 : 			_STDEXT unchecked_uninitialized_copy(_Map,
; 1252 : 				_Map + _Count, _Myptr, this->_Almap);	// copy more old

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Myptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H

; 1253 : 			_Myptr = _STDEXT unchecked_uninitialized_copy(_Map + _Count,
; 1254 : 				_Map + _Myboff, _Newmap, this->_Almap);	// copy rest of old

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR __Newmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Myptr$[ebp], eax

; 1255 : 			_STDEXT unchecked_uninitialized_fill_n(_Myptr, _Count,
; 1256 : 				(_Tptr)0, this->_Almap);	// clear rest to initial block

	mov	DWORD PTR $T64600[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR $T64600[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H
$LN2@Growmap@2:

; 1257 : 			}
; 1258 : 
; 1259 : 		_Destroy_range(_Map + _Myboff, _Map + _Mapsize, this->_Almap);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [edx+eax*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Myboff$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	??$_Destroy_range@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@@Z ; std::_Destroy_range<std::allocator<Json::Value * *> >
	add	esp, 12					; 0000000cH

; 1260 : 		if (_Map)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN1@Growmap@2

; 1261 : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for old

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z ; std::allocator<Json::Value * *>::deallocate
$LN1@Growmap@2:

; 1262 : 
; 1263 : 		_Map = _Newmap;	// point at new

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newmap$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1264 : 		_Mapsize += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1265 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Growmap@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAEXI@Z ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Growmap
_TEXT	ENDS
PUBLIC	??0?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::_Deque_map<Json::Value *,std::allocator<Json::Value *> >
PUBLIC	??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Value *>::allocator<Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T64603 = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z PROC ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::_Deque_val<Json::Value *,std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct allocator and base from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T64603[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Value *>::allocator<Json::Value *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::_Deque_map<Json::Value *,std::allocator<Json::Value *> >
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Value *>::allocator<Json::Value *>

; 501  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_val@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ENDP ; std::_Deque_val<Json::Value *,std::allocator<Json::Value *> >::_Deque_val<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVValue@Json@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVValue@Json@@@std@@QAE@XZ PROC		; std::allocator<Json::Value *>::allocator<Json::Value *>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVValue@Json@@@std@@QAE@XZ ENDP		; std::allocator<Json::Value *>::allocator<Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@I@Z PROC ; std::allocator<Json::Value *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@I@Z ENDP ; std::allocator<Json::Value *>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVValue@Json@@@std@@YAPAPAVValue@Json@@IPAPAV12@@Z ; std::_Allocate<Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@PAVValue@Json@@@std@@QAEPAPAVValue@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVValue@Json@@@std@@QAEPAPAVValue@Json@@I@Z PROC ; std::allocator<Json::Value *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVValue@Json@@@std@@YAPAPAVValue@Json@@IPAPAV12@@Z ; std::_Allocate<Json::Value *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVValue@Json@@@std@@QAEPAPAVValue@Json@@I@Z ENDP ; std::allocator<Json::Value *>::allocate
_TEXT	ENDS
PUBLIC	??$_Construct@PAVValue@Json@@PAV12@@std@@YAXPAPAVValue@Json@@ABQAV12@@Z ; std::_Construct<Json::Value *,Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ?construct@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@ABQAV34@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@ABQAV34@@Z PROC ; std::allocator<Json::Value *>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@PAVValue@Json@@PAV12@@std@@YAXPAPAVValue@Json@@ABQAV12@@Z ; std::_Construct<Json::Value *,Json::Value *>
	add	esp, 8

; 156  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@ABQAV34@@Z ENDP ; std::allocator<Json::Value *>::construct
_TEXT	ENDS
PUBLIC	??$_Destroy@PAVValue@Json@@@std@@YAXPAPAVValue@Json@@@Z ; std::_Destroy<Json::Value *>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@@Z PROC ; std::allocator<Json::Value *>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@PAVValue@Json@@@std@@YAXPAPAVValue@Json@@@Z ; std::_Destroy<Json::Value *>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@PAVValue@Json@@@std@@QAEXPAPAVValue@Json@@@Z ENDP ; std::allocator<Json::Value *>::destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z PROC ; std::allocator<Json::Value * *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@I@Z ENDP ; std::allocator<Json::Value * *>::deallocate
_TEXT	ENDS
PUBLIC	??$_Destroy@PAPAVValue@Json@@@std@@YAXPAPAPAVValue@Json@@@Z ; std::_Destroy<Json::Value * *>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@@Z PROC ; std::allocator<Json::Value * *>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@PAPAVValue@Json@@@std@@YAXPAPAPAVValue@Json@@@Z ; std::_Destroy<Json::Value * *>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@PAPAVValue@Json@@@std@@QAEXPAPAPAVValue@Json@@@Z ENDP ; std::allocator<Json::Value * *>::destroy
_TEXT	ENDS
PUBLIC	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
;	COMDAT ?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin, COMDAT
; _this$ = ecx

; 665  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 666  : 		return (iterator(_Myoff, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 667  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end, COMDAT
; _this$ = ecx

; 675  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 676  : 		return (iterator(_Myoff + _Mysize, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+28]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 677  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VErrorInfo@Reader@Json@@@std@@QBEIXZ ; std::allocator<Json::Reader::ErrorInfo>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size, COMDAT
; _this$ = ecx

; 728  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 729  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?max_size@?$allocator@VErrorInfo@Reader@Json@@@std@@QBEIXZ ; std::allocator<Json::Reader::ErrorInfo>::max_size

; 730  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBEIXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::max_size
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty, COMDAT
; _this$ = ecx

; 733  : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 734  : 		return (_Mysize == 0);

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+28], 0
	sete	cl
	mov	al, cl

; 735  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z ; std::allocator<Json::Reader::ErrorInfo>::destroy
; Function compile flags: /Odtp
;	COMDAT ?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Block$60095 = -8					; size = 4
__Newoff$60094 = -4					; size = 4
?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back, COMDAT
; _this$ = ecx

; 863  : 		{	// erase element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 864  : 
; 865  :  #if _HAS_ITERATOR_DEBUGGING
; 866  : 		if (empty())
; 867  : 			_DEBUG_ERROR("deque empty before pop");
; 868  : 		else
; 869  : 			{	// something to erase, do it
; 870  : 			_Orphan_off(_Myoff + _Mysize - 1);
; 871  : 
; 872  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 873  : 		if (!empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@pop_back@2

; 874  : 			{	// something to erase, do it
; 875  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 876  : 
; 877  : 			size_type _Newoff = _Mysize + _Myoff - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR __Newoff$60094[ebp], edx

; 878  : 			size_type _Block = _Newoff / _DEQUESIZ;

	mov	eax, DWORD PTR __Newoff$60094[ebp]
	mov	DWORD PTR __Block$60095[ebp], eax

; 879  : 			if (_Mapsize <= _Block)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR __Block$60095[ebp]
	ja	SHORT $LN2@pop_back@2

; 880  : 				_Block -= _Mapsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Block$60095[ebp]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Block$60095[ebp], ecx
$LN2@pop_back@2:

; 881  : 			this->_Alval.destroy(_Map[_Block] + _Newoff % _DEQUESIZ);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR __Newoff$60094[ebp]
	xor	edx, edx
	mov	esi, 1
	div	esi
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR __Block$60095[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z ; std::allocator<Json::Reader::ErrorInfo>::destroy

; 882  : 			if (--_Mysize == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], edx
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	jne	SHORT $LN4@pop_back@2

; 883  : 				_Myoff = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
$LN4@pop_back@2:

; 884  : 			}
; 885  : 			}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
_TEXT	ENDS
PUBLIC	??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_front
PUBLIC	??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy_backward<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
PUBLIC	?_Make_iter@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@0@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T64637 = -80						; size = 8
$T64636 = -72						; size = 8
$T64635 = -64						; size = 8
$T64634 = -56						; size = 8
$T64633 = -48						; size = 8
$T64632 = -40						; size = 8
$T64631 = -32						; size = 8
__Off$ = -24						; size = 4
__Last$ = -20						; size = 8
__First$ = -12						; size = 8
__Count$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@0@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::erase, COMDAT
; _this$ = ecx

; 1044 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	DWORD PTR _this$[ebp], ecx

; 1045 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Make_iter

; 1046 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Make_iter

; 1047 : 
; 1048 :  #if _HAS_ITERATOR_DEBUGGING
; 1049 : 		if (_Last < _First
; 1050 : 			|| _First < begin() || end() < _Last)
; 1051 : 			_DEBUG_ERROR("deque erase iterator outside range");
; 1052 : 		_DEBUG_RANGE(_First, _Last);
; 1053 : 
; 1054 : 		size_type _Off = _First - begin();
; 1055 : 		size_type _Count = _Last - _First;
; 1056 : 		bool _Moved = 0 < _Off && _Off + _Count < _Mysize;
; 1057 : 
; 1058 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1059 : 		size_type _Off = _First - begin();

	lea	eax, DWORD PTR $T64631[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
	mov	DWORD PTR __Off$[ebp], eax

; 1060 : 		size_type _Count = _Last - _First;

	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
	mov	DWORD PTR __Count$[ebp], eax

; 1061 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1062 : 
; 1063 : 		if (_Off < (size_type)(end() - _Last))

	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	eax, DWORD PTR $T64632[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
	mov	ecx, eax
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
	cmp	DWORD PTR __Off$[ebp], eax
	jae	SHORT $LN8@erase

; 1064 : 			{	// closer to front
; 1065 : 			std::copy_backward(begin(), _First, _Last);	// copy over hole

	mov	ecx, DWORD PTR __Last$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64633[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR $T64634[ebp]
	push	eax
	call	??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy_backward<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 28					; 0000001cH

; 1066 : 			for (; 0 < _Count; --_Count)

	jmp	SHORT $LN7@erase
$LN6@erase:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
$LN7@erase:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN5@erase

; 1067 : 				pop_front();	// pop copied elements

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_front
	jmp	SHORT $LN6@erase
$LN5@erase:

; 1068 : 			}
; 1069 : 		else

	jmp	SHORT $LN4@erase
$LN8@erase:

; 1070 : 			{	// closer to back
; 1071 : 			std::copy(_Last, end(), _First);	// copy over hole

	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64635[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::end
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	eax, DWORD PTR $T64636[ebp]
	push	eax
	call	??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 28					; 0000001cH

; 1072 : 			for (; 0 < _Count; --_Count)

	jmp	SHORT $LN3@erase
$LN2@erase:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
$LN3@erase:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@erase

; 1073 : 				pop_back();	// pop copied elements

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
	jmp	SHORT $LN2@erase
$LN4@erase:

; 1074 : 			}
; 1075 : 
; 1076 :  #if _HAS_ITERATOR_DEBUGGING
; 1077 : 		if (_Moved)
; 1078 : 			this->_Orphan_all();
; 1079 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1080 : 
; 1081 : 		return (begin() + _Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64637[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	ecx, eax
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1082 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@0@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::erase
_TEXT	ENDS
PUBLIC	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
PUBLIC	??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z		; Json::Reader::ErrorInfo::ErrorInfo
PUBLIC	??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
PUBLIC	??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
PUBLIC	?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front
PUBLIC	??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
PUBLIC	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$2
__catchsym$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$0
__ehfuncinfo$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$6
	DD	03H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$7
__unwindtable$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$4
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	03H
	DD	FLAT:__unwindfunclet$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$5
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
tv346 = -460						; size = 4
tv345 = -456						; size = 4
tv344 = -452						; size = 4
tv343 = -448						; size = 4
tv342 = -444						; size = 4
tv341 = -440						; size = 4
tv340 = -436						; size = 4
tv339 = -432						; size = 4
tv338 = -428						; size = 4
tv337 = -424						; size = 4
tv336 = -420						; size = 4
tv335 = -416						; size = 4
tv334 = -412						; size = 4
tv333 = -408						; size = 4
tv332 = -404						; size = 4
tv331 = -400						; size = 4
tv330 = -396						; size = 4
tv329 = -392						; size = 4
tv328 = -388						; size = 4
tv327 = -384						; size = 4
tv326 = -380						; size = 4
tv325 = -376						; size = 4
tv324 = -372						; size = 4
tv323 = -368						; size = 4
tv322 = -364						; size = 4
tv321 = -360						; size = 4
tv320 = -356						; size = 4
tv319 = -352						; size = 4
tv318 = -348						; size = 4
_this$ = -344						; size = 4
$T64666 = -340						; size = 8
$T64665 = -332						; size = 8
$T64664 = -324						; size = 8
$T64663 = -316						; size = 8
$T64662 = -308						; size = 8
$T64661 = -300						; size = 8
$T64660 = -292						; size = 8
$T64659 = -284						; size = 8
$T64658 = -276						; size = 8
$T64657 = -268						; size = 8
$T64656 = -260						; size = 8
$T64655 = -252						; size = 8
$T64654 = -244						; size = 8
$T64653 = -236						; size = 8
$T64652 = -228						; size = 8
$T64651 = -220						; size = 8
$T64650 = -212						; size = 8
$T64649 = -204						; size = 8
$T64648 = -196						; size = 8
$T64647 = -188						; size = 8
$T64646 = -180						; size = 8
$T64645 = -172						; size = 8
$T64644 = -164						; size = 8
$T64643 = -156						; size = 8
$T64642 = -148						; size = 8
$T64641 = -140						; size = 8
__Tmp$60256 = -132					; size = 44
__Tmp$60226 = -88					; size = 44
__$ArrayPad$ = -44					; size = 4
__Off$ = -40						; size = 4
__Rem$ = -36						; size = 4
__Num$ = -32						; size = 4
__Mid$ = -28						; size = 8
__Oldsize$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Insert_n, COMDAT
; _this$ = ecx

; 1130 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 444				; 000001bcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1131 : 		iterator _Mid;

	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>

; 1132 : 		size_type _Num;
; 1133 : 		size_type _Off = _Where - begin();

	lea	eax, DWORD PTR $T64641[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
	mov	DWORD PTR __Off$[ebp], eax

; 1134 : 		size_type _Rem = _Mysize - _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sub	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Rem$[ebp], edx

; 1135 : 		size_type _Oldsize = _Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR __Oldsize$[ebp], ecx

; 1136 : 
; 1137 :  #if _HAS_ITERATOR_DEBUGGING
; 1138 : 		if (_Mysize < _Off)
; 1139 : 			_DEBUG_ERROR("deque insert iterator outside range");
; 1140 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1141 : 
; 1142 : 		if (_Off < _Rem)

	mov	edx, DWORD PTR __Off$[ebp]
	cmp	edx, DWORD PTR __Rem$[ebp]
	jae	$LN30@Insert_n

; 1143 : 			{	// closer to front
; 1144 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1145 : 			if (_Off < _Count)

	mov	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN28@Insert_n

; 1146 : 				{	// insert longer than prefix
; 1147 : 				for (_Num = _Count - _Off; 0 < _Num; --_Num)

	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
	jmp	SHORT $LN27@Insert_n
$LN26@Insert_n:
	mov	edx, DWORD PTR __Num$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Num$[ebp], edx
$LN27@Insert_n:
	cmp	DWORD PTR __Num$[ebp], 0
	jbe	SHORT $LN25@Insert_n

; 1148 : 					push_front(_Val);	// push excess values

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front
	jmp	SHORT $LN26@Insert_n
$LN25@Insert_n:

; 1149 : 				for (_Num = _Off; 0 < _Num; --_Num)

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
	jmp	SHORT $LN24@Insert_n
$LN23@Insert_n:
	mov	edx, DWORD PTR __Num$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Num$[ebp], edx
$LN24@Insert_n:
	cmp	DWORD PTR __Num$[ebp], 0
	jbe	SHORT $LN22@Insert_n

; 1150 : 					push_front(begin()[_Count - 1]);	// push prefix

	lea	eax, DWORD PTR $T64642[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv318[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv318[ebp]
	call	??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
	mov	DWORD PTR tv319[ebp], eax
	mov	edx, DWORD PTR tv319[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front
	jmp	SHORT $LN23@Insert_n
$LN22@Insert_n:

; 1151 : 
; 1152 : 				_Mid = begin() + _Count;

	lea	eax, DWORD PTR $T64643[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv320[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64644[ebp]
	push	edx
	mov	ecx, DWORD PTR tv320[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv321[ebp], eax
	mov	eax, DWORD PTR tv321[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Mid$[ebp], ecx
	mov	DWORD PTR __Mid$[ebp+4], edx

; 1153 : 				std::fill(_Mid, _Mid + _Off,
; 1154 : 					_Val);	// fill in rest of values

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64645[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv322[ebp], eax
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR tv322[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	call	??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
	add	esp, 20					; 00000014H

; 1155 : 				}
; 1156 : 			else

	jmp	$LN21@Insert_n
$LN28@Insert_n:

; 1157 : 				{	// insert not longer than prefix
; 1158 : 				for (_Num = _Count; 0 < _Num; --_Num)

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], edx
	jmp	SHORT $LN20@Insert_n
$LN19@Insert_n:
	mov	eax, DWORD PTR __Num$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Num$[ebp], eax
$LN20@Insert_n:
	cmp	DWORD PTR __Num$[ebp], 0
	jbe	SHORT $LN18@Insert_n

; 1159 : 					push_front(begin()[_Count - 1]);	// push part of prefix

	lea	ecx, DWORD PTR $T64646[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv323[ebp], eax
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR tv323[ebp]
	call	??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
	mov	DWORD PTR tv324[ebp], eax
	mov	eax, DWORD PTR tv324[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front
	jmp	SHORT $LN19@Insert_n
$LN18@Insert_n:

; 1160 : 
; 1161 : 				_Mid = begin() + _Count;

	lea	ecx, DWORD PTR $T64647[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv325[ebp], eax
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	lea	eax, DWORD PTR $T64648[ebp]
	push	eax
	mov	ecx, DWORD PTR tv325[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv326[ebp], eax
	mov	ecx, DWORD PTR tv326[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Mid$[ebp], edx
	mov	DWORD PTR __Mid$[ebp+4], eax

; 1162 : 				_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$60226[ebp]
	call	??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z
	mov	DWORD PTR tv327[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1163 : 				std::copy(_Mid + _Count, _Mid + _Off,
; 1164 : 					_Mid);	// copy rest of prefix

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	lea	eax, DWORD PTR $T64649[ebp]
	push	eax
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv328[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64650[ebp]
	push	edx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv329[ebp], eax
	mov	eax, DWORD PTR __Mid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv328[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	mov	edx, DWORD PTR tv329[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	lea	edx, DWORD PTR $T64651[ebp]
	push	edx
	call	??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 28					; 0000001cH

; 1165 : 				std::fill(begin() + _Off, _Mid + _Off,
; 1166 : 					_Tmp);	// fill in values

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64652[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv330[ebp], eax
	lea	edx, DWORD PTR $T64653[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv331[ebp], eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64654[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv331[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv332[ebp], eax
	lea	edx, DWORD PTR __Tmp$60226[ebp]
	push	edx
	mov	eax, DWORD PTR tv330[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR tv332[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
	add	esp, 20					; 00000014H

; 1167 : 				}

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Tmp$60226[ebp]
	call	??1ErrorInfo@Reader@Json@@QAE@XZ
$LN21@Insert_n:
	jmp	SHORT $LN33@Insert_n
__catch$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$0:
$LN17@Insert_n:

; 1168 : 			_CATCH_ALL
; 1169 : 			for (; _Oldsize < _Mysize; )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Oldsize$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jae	SHORT $LN16@Insert_n

; 1170 : 				pop_front();	// restore old size, at least

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_front
	jmp	SHORT $LN17@Insert_n
$LN16@Insert_n:

; 1171 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1172 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$1
	ret	0
$LN33@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$1:

; 1173 : 			}
; 1174 : 		else

	jmp	$LN32@Insert_n
$LN30@Insert_n:

; 1175 : 			{		// closer to back
; 1176 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 3

; 1177 : 			if (_Rem < _Count)

	mov	edx, DWORD PTR __Rem$[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN13@Insert_n

; 1178 : 				{	// insert longer than suffix
; 1179 : 				for (_Num = _Count - _Rem; 0 < _Num; --_Num)

	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Rem$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
	jmp	SHORT $LN12@Insert_n
$LN11@Insert_n:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Num$[ebp], ecx
$LN12@Insert_n:
	cmp	DWORD PTR __Num$[ebp], 0
	jbe	SHORT $LN10@Insert_n

; 1180 : 					push_back(_Val);	// push excess values

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
	jmp	SHORT $LN11@Insert_n
$LN10@Insert_n:

; 1181 : 				for (_Num = 0; _Num < _Rem; ++_Num)

	mov	DWORD PTR __Num$[ebp], 0
	jmp	SHORT $LN9@Insert_n
$LN8@Insert_n:
	mov	eax, DWORD PTR __Num$[ebp]
	add	eax, 1
	mov	DWORD PTR __Num$[ebp], eax
$LN9@Insert_n:
	mov	ecx, DWORD PTR __Num$[ebp]
	cmp	ecx, DWORD PTR __Rem$[ebp]
	jae	SHORT $LN7@Insert_n

; 1182 : 					push_back(begin()[_Off + _Num]);	// push suffix

	lea	edx, DWORD PTR $T64655[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv333[ebp], eax
	mov	eax, DWORD PTR __Off$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv333[ebp]
	call	??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
	mov	DWORD PTR tv334[ebp], eax
	mov	ecx, DWORD PTR tv334[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
	jmp	SHORT $LN8@Insert_n
$LN7@Insert_n:

; 1183 : 
; 1184 : 				_Mid = begin() + _Off;

	lea	edx, DWORD PTR $T64656[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv335[ebp], eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64657[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv335[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv336[ebp], eax
	mov	edx, DWORD PTR tv336[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Mid$[ebp], eax
	mov	DWORD PTR __Mid$[ebp+4], ecx

; 1185 : 				std::fill(_Mid, _Mid + _Rem,
; 1186 : 					_Val);	// fill in rest of values

	mov	edx, DWORD PTR __Rem$[ebp]
	push	edx
	lea	eax, DWORD PTR $T64658[ebp]
	push	eax
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv337[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv337[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	call	??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
	add	esp, 20					; 00000014H

; 1187 : 				}
; 1188 : 			else

	jmp	$LN6@Insert_n
$LN13@Insert_n:

; 1189 : 				{	// insert not longer than prefix
; 1190 : 				for (_Num = 0; _Num < _Count; ++_Num)

	mov	DWORD PTR __Num$[ebp], 0
	jmp	SHORT $LN5@Insert_n
$LN4@Insert_n:
	mov	ecx, DWORD PTR __Num$[ebp]
	add	ecx, 1
	mov	DWORD PTR __Num$[ebp], ecx
$LN5@Insert_n:
	mov	edx, DWORD PTR __Num$[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN3@Insert_n

; 1191 : 					push_back(begin()[_Off + _Rem
; 1192 : 						- _Count + _Num]);	// push part of prefix

	lea	eax, DWORD PTR $T64659[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv338[ebp], eax
	mov	ecx, DWORD PTR __Off$[ebp]
	add	ecx, DWORD PTR __Rem$[ebp]
	sub	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv338[ebp]
	call	??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
	mov	DWORD PTR tv339[ebp], eax
	mov	edx, DWORD PTR tv339[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_back
	jmp	SHORT $LN4@Insert_n
$LN3@Insert_n:

; 1193 : 
; 1194 : 				_Mid = begin() + _Off;

	lea	eax, DWORD PTR $T64660[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@XZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::begin
	mov	DWORD PTR tv340[ebp], eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64661[ebp]
	push	edx
	mov	ecx, DWORD PTR tv340[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv341[ebp], eax
	mov	eax, DWORD PTR tv341[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Mid$[ebp], ecx
	mov	DWORD PTR __Mid$[ebp+4], edx

; 1195 : 				_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$60256[ebp]
	call	??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z
	mov	DWORD PTR tv342[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 1196 : 				std::copy_backward(_Mid, _Mid + _Rem - _Count,
; 1197 : 					_Mid + _Rem);	// copy rest of prefix

	mov	ecx, DWORD PTR __Rem$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64662[ebp]
	push	edx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv343[ebp], eax
	mov	eax, DWORD PTR __Rem$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64663[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv344[ebp], eax
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	lea	eax, DWORD PTR $T64664[ebp]
	push	eax
	mov	ecx, DWORD PTR tv344[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
	mov	DWORD PTR tv345[ebp], eax
	mov	ecx, DWORD PTR tv343[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR tv345[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	lea	eax, DWORD PTR $T64665[ebp]
	push	eax
	call	??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ; std::copy_backward<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 28					; 0000001cH

; 1198 : 				std::fill(_Mid, _Mid + _Count,
; 1199 : 					_Tmp);	// fill in values

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64666[ebp]
	push	edx
	lea	ecx, DWORD PTR __Mid$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	DWORD PTR tv346[ebp], eax
	lea	eax, DWORD PTR __Tmp$60256[ebp]
	push	eax
	mov	ecx, DWORD PTR tv346[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
	add	esp, 20					; 00000014H

; 1200 : 				}

	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR __Tmp$60256[ebp]
	call	??1ErrorInfo@Reader@Json@@QAE@XZ
$LN6@Insert_n:
	jmp	SHORT $LN35@Insert_n
__catch$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$2:
$LN2@Insert_n:

; 1201 : 			_CATCH_ALL
; 1202 : 			for (; _Oldsize < _Mysize; )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Oldsize$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jae	SHORT $LN1@Insert_n

; 1203 : 				pop_back();	// restore old size, at least

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_back
	jmp	SHORT $LN2@Insert_n
$LN1@Insert_n:

; 1204 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1205 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN32@Insert_n
	ret	0
$LN35@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN32@Insert_n:

; 1206 : 			}
; 1207 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$4:
	lea	ecx, DWORD PTR __Tmp$60226[ebp]
	jmp	??1ErrorInfo@Reader@Json@@QAE@XZ
__unwindfunclet$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z$5:
	lea	ecx, DWORD PTR __Tmp$60256[ebp]
	jmp	??1ErrorInfo@Reader@Json@@QAE@XZ
__ehhandler$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-464]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@IABVErrorInfo@Reader@Json@@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Insert_n
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T64691 = -80						; size = 28
$T64690 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen, COMDAT

; 1210 : 		{	// report length error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1211 : 		_THROW(length_error, "deque<T> too long");

	push	OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T64691[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T64691[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64690[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T64690[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64691[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1212 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T64691[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@KAXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Xlen
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2logic_error@std@@8
; File f:\tools\vs2008\vc\include\stdexcept
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??$?0VErrorInfo@Reader@Json@@@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::allocator<Json::Reader::ErrorInfo *>::allocator<Json::Reader::ErrorInfo *><Json::Reader::ErrorInfo>
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
;	COMDAT ??0?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T64734 = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z PROC ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx

; 478  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T64734[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??$?0VErrorInfo@Reader@Json@@@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::allocator<Json::Reader::ErrorInfo *>::allocator<Json::Reader::ErrorInfo *><Json::Reader::ErrorInfo>

; 479  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_map@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ENDP ; std::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Deque_map<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@VErrorInfo@Reader@Json@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::allocator<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@I@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@I@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::deallocate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z PROC ; std::allocator<Json::Reader::ErrorInfo *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@I@Z ENDP ; std::allocator<Json::Reader::ErrorInfo *>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@IPAPAV123@@Z ; std::_Allocate<Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEPAPAVErrorInfo@Reader@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEPAPAVErrorInfo@Reader@Json@@I@Z PROC ; std::allocator<Json::Reader::ErrorInfo *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@IPAPAV123@@Z ; std::_Allocate<Json::Reader::ErrorInfo *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEPAPAVErrorInfo@Reader@Json@@I@Z ENDP ; std::allocator<Json::Reader::ErrorInfo *>::allocate
_TEXT	ENDS
PUBLIC	??$_Destroy@PAVErrorInfo@Reader@Json@@@std@@YAXPAPAVErrorInfo@Reader@Json@@@Z ; std::_Destroy<Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
;	COMDAT ?destroy@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@@Z PROC ; std::allocator<Json::Reader::ErrorInfo *>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@PAVErrorInfo@Reader@Json@@@std@@YAXPAPAVErrorInfo@Reader@Json@@@Z ; std::_Destroy<Json::Reader::ErrorInfo *>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAEXPAPAVErrorInfo@Reader@Json@@@Z ENDP ; std::allocator<Json::Reader::ErrorInfo *>::destroy
_TEXT	ENDS
PUBLIC	??D?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEABQAVValue@Json@@XZ ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
;	COMDAT ??D?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEAAPAVValue@Json@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEAAPAVValue@Json@@XZ PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*, COMDAT
; _this$ = ecx

; 385  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEABQAVValue@Json@@XZ ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*

; 387  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEAAPAVValue@Json@@XZ ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*
_TEXT	ENDS
PUBLIC	??Z?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-=
; Function compile flags: /Odtp
;	COMDAT ??G?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-, COMDAT
; _this$ = ecx

; 438  : 		{	// return this - integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 439  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 440  : 		return (_Tmp -= _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Z?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 441  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??G?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-
_TEXT	ENDS
PUBLIC	??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=
; Function compile flags: /Odtp
;	COMDAT ??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+, COMDAT
; _this$ = ecx

; 427  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 428  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 429  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 430  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z PROC		; Json::Reader::ErrorInfo::ErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z ENDP		; Json::Reader::ErrorInfo::ErrorInfo
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVValue@Json@@@std@@QBEIXZ ; std::allocator<Json::Value *>::max_size
; Function compile flags: /Odtp
;	COMDAT ?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size, COMDAT
; _this$ = ecx

; 728  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 729  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?max_size@?$allocator@PAVValue@Json@@@std@@QBEIXZ ; std::allocator<Json::Value *>::max_size

; 730  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@QBEIXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::max_size
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T64763 = -80						; size = 28
$T64762 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ PROC ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen, COMDAT

; 1210 : 		{	// report length error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1211 : 		_THROW(length_error, "deque<T> too long");

	push	OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T64763[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T64763[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64762[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T64762[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T64763[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1212 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T64763[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$deque@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@KAXXZ ENDP ; std::deque<Json::Value *,std::allocator<Json::Value *> >::_Xlen
PUBLIC	??$?0PAVValue@Json@@@?$allocator@PAPAVValue@Json@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z ; std::allocator<Json::Value * *>::allocator<Json::Value * *><Json::Value *>
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T64773 = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z PROC ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::_Deque_map<Json::Value *,std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx

; 478  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T64773[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z ; std::allocator<Json::Value *>::allocator<Json::Value *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >
	lea	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??$?0PAVValue@Json@@@?$allocator@PAPAVValue@Json@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z ; std::allocator<Json::Value * *>::allocator<Json::Value * *><Json::Value *>

; 479  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Deque_map@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ENDP ; std::_Deque_map<Json::Value *,std::allocator<Json::Value *> >::_Deque_map<Json::Value *,std::allocator<Json::Value *> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z PROC	; std::allocator<Json::Value *>::allocator<Json::Value *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVValue@Json@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<Json::Value *>::allocator<Json::Value *>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@IPAPAPAV12@@Z ; std::_Allocate<Json::Value * *>
; Function compile flags: /Odtp
;	COMDAT ?allocate@?$allocator@PAPAVValue@Json@@@std@@QAEPAPAPAVValue@Json@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAPAVValue@Json@@@std@@QAEPAPAPAVValue@Json@@I@Z PROC ; std::allocator<Json::Value * *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@IPAPAPAV12@@Z ; std::_Allocate<Json::Value * *>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAPAVValue@Json@@@std@@QAEPAPAPAVValue@Json@@I@Z ENDP ; std::allocator<Json::Value * *>::allocate
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 685  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 686  : 		return (iterator(_Where._Myoff, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 687  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@V?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Make_iter
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
tv77 = -16						; size = 4
_this$ = -12						; size = 4
__Block$ = -8						; size = 4
__Newoff$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front, COMDAT
; _this$ = ecx

; 799  : 		{	// insert element at beginning

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 800  : 
; 801  :  #if _HAS_ITERATOR_DEBUGGING
; 802  : 		this->_Orphan_all();
; 803  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 804  : 
; 805  : 		if (_Myoff % _DEQUESIZ == 0
; 806  : 			&& _Mapsize <= (_Mysize + _DEQUESIZ) / _DEQUESIZ)

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	xor	edx, edx
	mov	ecx, 1
	div	ecx
	test	edx, edx
	jne	SHORT $LN2@push_front
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN2@push_front

; 807  : 			_Growmap(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Growmap@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAEXI@Z ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::_Growmap
$LN2@push_front:

; 808  : 		size_type _Newoff = _Myoff != 0 ? _Myoff
; 809  : 			: _Mapsize * _DEQUESIZ;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN5@push_front
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN6@push_front
$LN5@push_front:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv77[ebp], eax
$LN6@push_front:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Newoff$[ebp], ecx

; 810  : 		size_type _Block = --_Newoff / _DEQUESIZ;

	mov	edx, DWORD PTR __Newoff$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Newoff$[ebp], edx
	mov	eax, DWORD PTR __Newoff$[ebp]
	mov	DWORD PTR __Block$[ebp], eax

; 811  : 		if (_Map[_Block] == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Block$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jne	SHORT $LN1@push_front

; 812  : 			_Map[_Block] = this->_Alval.allocate(_DEQUESIZ);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?allocate@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEPAVErrorInfo@Reader@Json@@I@Z ; std::allocator<Json::Reader::ErrorInfo>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR __Block$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN1@push_front:

; 813  : 		this->_Alval.construct(_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR __Newoff$[ebp]
	xor	edx, edx
	mov	esi, 1
	div	esi
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR __Block$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?construct@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@ABV345@@Z ; std::allocator<Json::Reader::ErrorInfo>::construct

; 814  : 		_Myoff = _Newoff;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Newoff$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 815  : 		++_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 816  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?push_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXABVErrorInfo@Reader@Json@@@Z ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::push_front
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Block$60493 = -4					; size = 4
?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ PROC ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_front, COMDAT
; _this$ = ecx

; 819  : 		{	// erase element at beginning

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 820  : 
; 821  :  #if _HAS_ITERATOR_DEBUGGING
; 822  : 		if (empty())
; 823  : 			_DEBUG_ERROR("deque empty before pop");
; 824  : 		else
; 825  : 			{	// something to erase, do it
; 826  : 			_Orphan_off(_Myoff);
; 827  : 
; 828  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 829  : 		if (!empty())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QBE_NXZ ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@pop_front

; 830  : 			{	// something to erase, do it
; 831  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 832  : 
; 833  : 			size_type _Block = _Myoff / _DEQUESIZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR __Block$60493[ebp], edx

; 834  : 			this->_Alval.destroy(_Map[_Block] + _Myoff % _DEQUESIZ);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	xor	edx, edx
	mov	esi, 1
	div	esi
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR __Block$60493[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z ; std::allocator<Json::Reader::ErrorInfo>::destroy

; 835  : 			if (_Mapsize * _DEQUESIZ <= ++_Myoff)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+24]
	ja	SHORT $LN2@pop_front

; 836  : 				_Myoff = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
$LN2@pop_front:

; 837  : 			if (--_Mysize == 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	SHORT $LN4@pop_front

; 838  : 				_Myoff = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN4@pop_front:

; 839  : 			}
; 840  : 			}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_front@?$deque@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@QAEXXZ ENDP ; std::deque<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo> >::pop_front
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
PUBLIC	??$?0VErrorInfo@Reader@Json@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Json::Reader::ErrorInfo>
PUBLIC	??0_Container_base_aux@std@@QAE@XZ		; std::_Container_base_aux::_Container_base_aux
;	COMDAT xdata$x
; File f:\tools\vs2008\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T64791 = -24						; size = 4
$T64790 = -20						; size = 4
$T64789 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0VErrorInfo@Reader@Json@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Json::Reader::ErrorInfo>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T64791[ebp], eax
	mov	ecx, DWORD PTR $T64791[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T64790[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T64790[ebp], 0
	je	SHORT $LN3@Container_
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T64790[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_
$LN3@Container_:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T64789[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T64789[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z$1:
	mov	eax, DWORD PTR $T64791[ebp]
	push	eax
	mov	ecx, DWORD PTR $T64790[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@VErrorInfo@Reader@Json@@@std@@@std@@IAE@V?$allocator@VErrorInfo@Reader@Json@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >::_Container_base_aux_alloc_real<std::allocator<Json::Reader::ErrorInfo> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 58   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 60   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pcont$ = 8						; size = 4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z PROC	; std::_Aux_cont::_Aux_cont, COMDAT
; _this$ = ecx

; 364  : 	explicit _Aux_cont(const _Container_base_aux * const _Pcont)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pcont$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ENDP	; std::_Aux_cont::_Aux_cont
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0_Container_base_aux@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base_aux@std@@QAE@XZ PROC			; std::_Container_base_aux::_Container_base_aux, COMDAT
; _this$ = ecx

; 379  : 	_Container_base_aux()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		{
; 381  : 		// Do nothing: _Container_base_aux_alloc_real() will construct the aux object.
; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base_aux@std@@QAE@XZ ENDP			; std::_Container_base_aux::_Container_base_aux
_TEXT	ENDS
PUBLIC	??$_Destroy@VErrorInfo@Reader@Json@@@std@@YAXPAVErrorInfo@Reader@Json@@@Z ; std::_Destroy<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z PROC ; std::allocator<Json::Reader::ErrorInfo>::destroy, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@VErrorInfo@Reader@Json@@@std@@YAXPAVErrorInfo@Reader@Json@@@Z ; std::_Destroy<Json::Reader::ErrorInfo>
	add	esp, 4

; 161  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@VErrorInfo@Reader@Json@@@std@@QAEXPAVErrorInfo@Reader@Json@@@Z ENDP ; std::allocator<Json::Reader::ErrorInfo>::destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@VErrorInfo@Reader@Json@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@VErrorInfo@Reader@Json@@@std@@QBEIXZ PROC ; std::allocator<Json::Reader::ErrorInfo>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 97612893	; 05d1745dH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@VErrorInfo@Reader@Json@@@std@@QBEIXZ ENDP ; std::allocator<Json::Reader::ErrorInfo>::max_size
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
_TEXT	ENDS
;	COMDAT ??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z
_TEXT	SEGMENT
tv128 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-, COMDAT
; _this$ = ecx

; 225  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 
; 227  :  #if _HAS_ITERATOR_DEBUGGING
; 228  : 		_Compat(_Right);
; 229  :  #else
; 230  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@operator@5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator@5
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@5
$LN1@operator@5:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@5:

; 231  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 232  : 
; 233  : 		return (_Right._Myoff <= _Myoff ? _Myoff - _Right._Myoff
; 234  : 			: -(difference_type)(_Right._Myoff - _Myoff));

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	ja	SHORT $LN6@operator@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN7@operator@5
$LN6@operator@5:
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	neg	eax
	mov	DWORD PTR tv128[ebp], eax
$LN7@operator@5:
	mov	eax, DWORD PTR tv128[ebp]

; 235  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>, COMDAT
; _this$ = ecx

; 381  : 		{	// construct with offset _Off in *_Pdeque

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pdeque$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>

; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>
_TEXT	ENDS
PUBLIC	??Y?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Z?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Z?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-=, COMDAT
; _this$ = ecx

; 433  : 		{	// decrement by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 434  : 		return (*this += -_Off);

	mov	eax, DWORD PTR __Off$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=

; 435  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Z?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator-=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??D?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEABQAVValue@Json@@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Off$ = -8						; size = 4
__Block$ = -4						; size = 4
??D?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEABQAVValue@Json@@XZ PROC ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*, COMDAT
; _this$ = ecx

; 136  : 			{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 			size_type _Block = _Myoff / _DEQUESIZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 2
	mov	DWORD PTR __Block$[ebp], ecx

; 138  : 			size_type _Off = _Myoff & (_DEQUESIZ - 1);	// assume power of 2

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 3
	mov	DWORD PTR __Off$[ebp], eax

; 139  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator@6
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@6:

; 140  : 			_SCL_SECURE_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Getmycont()))->_Myoff + ((_Mydeque *)(this->_Getmycont()))->_Mysize);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	edx, DWORD PTR [esi+24]
	add	edx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], edx
	jb	SHORT $LN2@operator@6
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@6:

; 141  : 			if (static_cast<const _Mydeque *>(this->_Getmycont())->_Mapsize <= _Block)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Block$[ebp]
	ja	SHORT $LN1@operator@6

; 142  : 				_Block -= static_cast<const _Mydeque *>(this->_Getmycont())->_Mapsize;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	edx, DWORD PTR __Block$[ebp]
	sub	edx, DWORD PTR [eax+20]
	mov	DWORD PTR __Block$[ebp], edx
$LN1@operator@6:

; 143  : 			return ((static_cast<const _Mydeque *>(this->_Getmycont())->_Map)[_Block][_Off]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	eax, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR __Block$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]

; 144  : 			}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QBEABQAVValue@Json@@XZ ENDP ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator*
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>, COMDAT
; _this$ = ecx

; 375  : 	_Deque_iterator()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>

; 376  : 		{	// construct with null vector pointer
; 377  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>, COMDAT
; _this$ = ecx

; 381  : 		{	// construct with offset _Off in *_Pdeque

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pdeque$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>

; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
_TEXT	ENDS
PUBLIC	??Y?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=, COMDAT
; _this$ = ecx

; 421  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 422  : 		*(_Mybase *)this += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=

; 423  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 424  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=
_TEXT	ENDS
PUBLIC	??Z?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-=
; Function compile flags: /Odtp
;	COMDAT ??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-, COMDAT
; _this$ = ecx

; 438  : 		{	// return this - integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 439  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], edx

; 440  : 		return (_Tmp -= _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Z?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-=
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 441  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-, COMDAT
; _this$ = ecx

; 444  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-

; 446  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@1@@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-
_TEXT	ENDS
PUBLIC	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*
; Function compile flags: /Odtp
;	COMDAT ??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T64838 = -8						; size = 8
__Off$ = 8						; size = 4
??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[], COMDAT
; _this$ = ecx

; 449  : 		{	// subscript

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 450  : 		return (*(*this + _Off));

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64838[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+
	mov	ecx, eax
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*

; 451  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@H@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator[]
_TEXT	ENDS
PUBLIC	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z PROC ; std::allocator<std::_Aux_cont>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ; std::_Allocate<std::_Aux_cont>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ENDP ; std::allocator<std::_Aux_cont>::allocate
_TEXT	ENDS
PUBLIC	??$?0PAVValue@Json@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Json::Value *>
;	COMDAT xdata$x
; File f:\tools\vs2008\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z$1
__ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z
_TEXT	SEGMENT
tv133 = -32						; size = 4
_this$ = -28						; size = 4
$T64845 = -24						; size = 4
$T64844 = -20						; size = 4
$T64843 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::_Container_base_aux
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??$?0PAVValue@Json@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Json::Value *>

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@V_Aux_cont@std@@@std@@QAEPAV_Aux_cont@2@I@Z ; std::allocator<std::_Aux_cont>::allocate
	mov	DWORD PTR $T64845[ebp], eax
	mov	ecx, DWORD PTR $T64845[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T64844[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T64844[ebp], 0
	je	SHORT $LN3@Container_@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T64844[ebp]
	call	??0_Aux_cont@std@@QAE@QBV_Container_base_aux@1@@Z ; std::_Aux_cont::_Aux_cont
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN4@Container_@2
$LN3@Container_@2:
	mov	DWORD PTR tv133[ebp], 0
$LN4@Container_@2:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T64843[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T64843[ebp]
	mov	DWORD PTR [ecx], edx

; 421  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Container_base_aux@std@@QAE@XZ	; std::_Container_base_aux::~_Container_base_aux
__unwindfunclet$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z$1:
	mov	eax, DWORD PTR $T64845[ebp]
	push	eax
	mov	ecx, DWORD PTR $T64844[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Container_base_aux_alloc_real@V?$allocator@PAVValue@Json@@@std@@@std@@IAE@V?$allocator@PAVValue@Json@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >::_Container_base_aux_alloc_real<std::allocator<Json::Value *> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVValue@Json@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
_this$ = -8						; size = 4
__Count$ = -4						; size = 4
?max_size@?$allocator@PAVValue@Json@@@std@@QBEIXZ PROC	; std::allocator<Json::Value *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVValue@Json@@@std@@QBEIXZ ENDP	; std::allocator<Json::Value *>::max_size
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
_TEXT	ENDS
;	COMDAT ??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>, COMDAT
; _this$ = ecx

; 120  : 		_Deque_const_iterator()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ

; 121  : 			{	// construct with null deque pointer
; 122  : 			_Myoff = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 123  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=, COMDAT
; _this$ = ecx

; 198  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@operator@7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@operator@7
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN5@operator@7:

; 200  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(
; 201  : 			_Myoff + _Off <= ((_Mydeque *)(this->_Getmycont()))->_Myoff + ((_Mydeque *)(this->_Getmycont()))->_Mysize &&
; 202  : 			_Myoff + _Off >= ((_Mydeque *)(this->_Getmycont()))->_Myoff);

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@operator@7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	add	esi, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	edi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR [edi+24]
	add	ecx, DWORD PTR [eax+28]
	cmp	esi, ecx
	ja	SHORT $LN1@operator@7
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+4]
	add	esi, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+24]
	jae	SHORT $LN3@operator@7
$LN1@operator@7:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@7:

; 203  : 		_Myoff += _Off;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 204  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 205  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=, COMDAT
; _this$ = ecx

; 421  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 422  : 		*(_Mybase *)this += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=

; 423  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 424  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Deque_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=
_TEXT	ENDS
PUBLIC	??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z PROC ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>, COMDAT
; _this$ = ecx

; 125  : 		_Deque_const_iterator(size_type _Off, const _Mydequebase *_Pdeque)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ

; 126  : 			{	// construct with offset _Off in *_Pdeque
; 127  : 			_SCL_SECURE_TRAITS_VALIDATE(
; 128  : 				_Pdeque != NULL &&
; 129  : 				((_Mydeque *)_Pdeque)->_Myoff <= _Off && _Off <= (((_Mydeque *)_Pdeque)->_Myoff + ((_Mydeque *)_Pdeque)->_Mysize));

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@Deque_cons@2
	cmp	DWORD PTR __Pdeque$[ebp], 0
	je	SHORT $LN1@Deque_cons@2
	mov	ecx, DWORD PTR __Pdeque$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	cmp	edx, DWORD PTR __Off$[ebp]
	ja	SHORT $LN1@Deque_cons@2
	mov	eax, DWORD PTR __Pdeque$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR __Pdeque$[ebp]
	add	ecx, DWORD PTR [edx+28]
	cmp	DWORD PTR __Off$[ebp], ecx
	jbe	SHORT $LN3@Deque_cons@2
$LN1@Deque_cons@2:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@Deque_cons@2:

; 130  : 				
; 131  : 			this->_Set_container(_Pdeque);

	mov	eax, DWORD PTR __Pdeque$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 132  : 			_Myoff = _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 133  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAE@IPBV_Container_base_aux@1@@Z ENDP ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*, COMDAT
; _this$ = ecx

; 385  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEABVErrorInfo@Reader@Json@@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*

; 387  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBEAAVErrorInfo@Reader@Json@@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Z?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Z?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-=, COMDAT
; _this$ = ecx

; 433  : 		{	// decrement by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 434  : 		return (*this += -_Off);

	mov	eax, DWORD PTR __Off$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+=

; 435  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Z?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-=
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVValue@Json@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,Json::Value *,int,Json::Value * const *,Json::Value * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Json::Value *,int,Json::Value * const *,Json::Value * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVValue@Json@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVValue@Json@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>::_Ranit<Json::Value *,int,Json::Value * const *,Json::Value * const &>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVValue@Json@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVValue@Json@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,Json::Value *,int,Json::Value * const *,Json::Value * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Json::Value *,int,Json::Value * const *,Json::Value * const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base_aux@std@@QAE@XZ	; std::_Iterator_base_aux::_Iterator_base_aux
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVValue@Json@@HPBQAV34@ABQAV34@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,Json::Value *,int,Json::Value * const *,Json::Value * const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,Json::Value *,int,Json::Value * const *,Json::Value * const &,std::_Iterator_base_aux>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??Y?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z PROC ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=, COMDAT
; _this$ = ecx

; 198  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@operator@8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@operator@8
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN5@operator@8:

; 200  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(
; 201  : 			_Myoff + _Off <= ((_Mydeque *)(this->_Getmycont()))->_Myoff + ((_Mydeque *)(this->_Getmycont()))->_Mysize &&
; 202  : 			_Myoff + _Off >= ((_Mydeque *)(this->_Getmycont()))->_Myoff);

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@operator@8
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	add	esi, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	edi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR [edi+24]
	add	ecx, DWORD PTR [eax+28]
	cmp	esi, ecx
	ja	SHORT $LN1@operator@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+4]
	add	esi, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	cmp	esi, DWORD PTR [eax+24]
	jae	SHORT $LN3@operator@8
$LN1@operator@8:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@8:

; 203  : 		_Myoff += _Off;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 204  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 205  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Deque_const_iterator@PAVValue@Json@@V?$allocator@PAVValue@Json@@@std@@$00@std@@QAEAAV01@H@Z ENDP ; std::_Deque_const_iterator<Json::Value *,std::allocator<Json::Value *>,1>::operator+=
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
PUBLIC	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
PUBLIC	??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z
_TEXT	SEGMENT
$T64881 = -2						; size = 1
$T64880 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T64880[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
	add	esp, 8
	mov	BYTE PTR $T64881[ebp], al
	movzx	eax, BYTE PTR $T64880[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T64881[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z
_TEXT	SEGMENT
$T64885 = -2						; size = 1
$T64884 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T64884[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
	add	esp, 8
	mov	BYTE PTR $T64885[ebp], al
	movzx	eax, BYTE PTR $T64884[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T64885[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Json::Reader::ErrorInfo *> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@@Z
_TEXT	SEGMENT
$T64888 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
	add	esp, 8
	mov	BYTE PTR $T64888[ebp], al
	movzx	edx, BYTE PTR $T64888[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Json::Reader::ErrorInfo *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Json::Reader::ErrorInfo *> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@VErrorInfo@Reader@Json@@@std@@YAPAVErrorInfo@Reader@Json@@IPAV123@@Z
_TEXT	SEGMENT
$T64891 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VErrorInfo@Reader@Json@@@std@@YAPAVErrorInfo@Reader@Json@@IPAV123@@Z PROC ; std::_Allocate<Json::Reader::ErrorInfo>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 44					; 0000002cH
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T64891[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T64891[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 44					; 0000002cH
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VErrorInfo@Reader@Json@@@std@@YAPAVErrorInfo@Reader@Json@@IPAV123@@Z ENDP ; std::_Allocate<Json::Reader::ErrorInfo>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File f:\tools\vs2008\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File f:\tools\vs2008\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z$0
__ehfuncinfo$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T64901 = -24						; size = 4
$T64900 = -20						; size = 4
__Vptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z PROC ; std::_Construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T64901[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T64901[ebp], 0
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T64901[ebp]
	call	??0ErrorInfo@Reader@Json@@QAE@ABV012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Construct
$LN3@Construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T64900[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 53   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T64901[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@VErrorInfo@Reader@Json@@V123@@std@@YAXPAVErrorInfo@Reader@Json@@ABV123@@Z ENDP ; std::_Construct<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo>
PUBLIC	??$_Uninit_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
PUBLIC	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z ; std::_Checked_base<Json::Value * * *>
PUBLIC	??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z
_TEXT	SEGMENT
$T64914 = -2						; size = 1
$T64913 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T64913[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>
	add	esp, 8
	mov	BYTE PTR $T64914[ebp], al
	movzx	eax, BYTE PTR $T64913[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T64914[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z ; std::_Checked_base<Json::Value * * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z ; std::_Checked_base<Json::Value * * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z
_TEXT	SEGMENT
$T64918 = -2						; size = 1
$T64917 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T64917[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>
	add	esp, 8
	mov	BYTE PTR $T64918[ebp], al
	movzx	eax, BYTE PTR $T64917[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T64918[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
	add	esp, 24					; 00000018H

; 943  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Json::Value * *> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@@Z
_TEXT	SEGMENT
$T64921 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Json::Value * *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>
	add	esp, 8
	mov	BYTE PTR $T64921[ebp], al
	movzx	edx, BYTE PTR $T64921[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Json::Value * *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Json::Value * *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVValue@Json@@@std@@YAPAPAVValue@Json@@IPAPAV12@@Z
_TEXT	SEGMENT
$T64924 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVValue@Json@@@std@@YAPAPAVValue@Json@@IPAPAV12@@Z PROC ; std::_Allocate<Json::Value *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T64924[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T64924[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVValue@Json@@@std@@YAPAPAVValue@Json@@IPAPAV12@@Z ENDP ; std::_Allocate<Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Construct@PAVValue@Json@@PAV12@@std@@YAXPAPAVValue@Json@@ABQAV12@@Z
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T64927 = -8						; size = 4
__Vptr$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVValue@Json@@PAV12@@std@@YAXPAPAVValue@Json@@ABQAV12@@Z PROC ; std::_Construct<Json::Value *,Json::Value *>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	ecx, DWORD PTR __Vptr$[ebp]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T64927[ebp], eax
	cmp	DWORD PTR $T64927[ebp], 0
	je	SHORT $LN3@Construct@2
	mov	edx, DWORD PTR $T64927[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T64927[ebp]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN1@Construct@2
$LN3@Construct@2:
	mov	DWORD PTR tv68[ebp], 0
$LN1@Construct@2:

; 53   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct@PAVValue@Json@@PAV12@@std@@YAXPAPAVValue@Json@@ABQAV12@@Z ENDP ; std::_Construct<Json::Value *,Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAVValue@Json@@@std@@YAXPAPAVValue@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAVValue@Json@@@std@@YAXPAPAVValue@Json@@@Z PROC ; std::_Destroy<Json::Value *>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@PAVValue@Json@@@std@@YAXPAPAVValue@Json@@@Z ENDP ; std::_Destroy<Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAVValue@Json@@@std@@YAXPAPAPAVValue@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAPAVValue@Json@@@std@@YAXPAPAPAVValue@Json@@@Z PROC ; std::_Destroy<Json::Value * *>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@PAPAVValue@Json@@@std@@YAXPAPAPAVValue@Json@@@Z ENDP ; std::_Destroy<Json::Value * *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Iter_random<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
PUBLIC	??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Ptr_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xutility
;	COMDAT ??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z
_TEXT	SEGMENT
$T64940 = -20						; size = 8
$T64939 = -12						; size = 8
$T64938 = -3						; size = 1
$T64937 = -2						; size = 1
$T64936 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Dest$ = 28						; size = 8
??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z PROC ; std::copy_backward<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 2721 : 	{	// copy [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 2722 : 	return _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 2723 : 		_Iter_random(_First, _Dest), _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T64936[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Ptr_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	BYTE PTR $T64937[ebp], al
	movzx	eax, BYTE PTR $T64936[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T64937[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64938[ebp]
	push	ecx
	call	??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Iter_random<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	eax, DWORD PTR $T64939[ebp]
	push	eax
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64940[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2724 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_backward@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ENDP ; std::copy_backward<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
; Function compile flags: /Odtp
;	COMDAT ??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z
_TEXT	SEGMENT
$T64947 = -20						; size = 8
$T64946 = -12						; size = 8
$T64945 = -3						; size = 1
$T64944 = -2						; size = 1
$T64943 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Dest$ = 28						; size = 8
??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z PROC ; std::copy<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 2561 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 2562 : 	return (_Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, 
; 2563 : 		_Iter_random(_First, _Dest), _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T64943[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Ptr_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	BYTE PTR $T64944[ebp], al
	movzx	eax, BYTE PTR $T64943[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T64944[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64945[ebp]
	push	ecx
	call	??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ; std::_Iter_random<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	lea	eax, DWORD PTR $T64946[ebp]
	push	eax
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64947[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2564 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$copy@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V10@00@Z ENDP ; std::copy<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
_TEXT	ENDS
PUBLIC	??$_Fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0ABVErrorInfo@Reader@Json@@@Z ; std::_Fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
;	COMDAT ??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
$T64951 = -16						; size = 8
$T64950 = -8						; size = 8
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Val$ = 24						; size = 4
??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z PROC ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T64950[ebp]
	push	edx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T64951[ebp]
	push	ecx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	??$_Fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0ABVErrorInfo@Reader@Json@@@Z ; std::_Fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,Json::Reader::ErrorInfo>
	add	esp, 20					; 00000014H

; 3188 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0ABVErrorInfo@Reader@Json@@@Z ENDP ; std::fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0VErrorInfo@Reader@Json@@@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0VErrorInfo@Reader@Json@@@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z PROC ; std::allocator<Json::Reader::ErrorInfo *>::allocator<Json::Reader::ErrorInfo *><Json::Reader::ErrorInfo>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0VErrorInfo@Reader@Json@@@?$allocator@PAVErrorInfo@Reader@Json@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ENDP ; std::allocator<Json::Reader::ErrorInfo *>::allocator<Json::Reader::ErrorInfo *><Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@IPAPAV123@@Z
_TEXT	SEGMENT
$T64956 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@IPAPAV123@@Z PROC ; std::_Allocate<Json::Reader::ErrorInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T64956[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T64956[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@IPAPAV123@@Z ENDP ; std::_Allocate<Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAVErrorInfo@Reader@Json@@@std@@YAXPAPAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAVErrorInfo@Reader@Json@@@std@@YAXPAPAVErrorInfo@Reader@Json@@@Z PROC ; std::_Destroy<Json::Reader::ErrorInfo *>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@PAVErrorInfo@Reader@Json@@@std@@YAXPAPAVErrorInfo@Reader@Json@@@Z ENDP ; std::_Destroy<Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVValue@Json@@@?$allocator@PAPAVValue@Json@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVValue@Json@@@?$allocator@PAPAVValue@Json@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z PROC ; std::allocator<Json::Value * *>::allocator<Json::Value * *><Json::Value *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVValue@Json@@@?$allocator@PAPAVValue@Json@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z ENDP ; std::allocator<Json::Value * *>::allocator<Json::Value * *><Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@IPAPAPAV12@@Z
_TEXT	SEGMENT
$T64963 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@IPAPAPAV12@@Z PROC ; std::_Allocate<Json::Value * *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T64963[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T64963[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@IPAPAPAV12@@Z ENDP ; std::_Allocate<Json::Value * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0VErrorInfo@Reader@Json@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0VErrorInfo@Reader@Json@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Json::Reader::ErrorInfo>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0VErrorInfo@Reader@Json@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@VErrorInfo@Reader@Json@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Json::Reader::ErrorInfo>
_TEXT	ENDS
PUBLIC	??_GErrorInfo@Reader@Json@@QAEPAXI@Z		; Json::Reader::ErrorInfo::`scalar deleting destructor'
; Function compile flags: /Odtp
;	COMDAT ??$_Destroy@VErrorInfo@Reader@Json@@@std@@YAXPAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VErrorInfo@Reader@Json@@@std@@YAXPAVErrorInfo@Reader@Json@@@Z PROC ; std::_Destroy<Json::Reader::ErrorInfo>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_GErrorInfo@Reader@Json@@QAEPAXI@Z

; 60   : 	}

	pop	ebp
	ret	0
??$_Destroy@VErrorInfo@Reader@Json@@@std@@YAXPAVErrorInfo@Reader@Json@@@Z ENDP ; std::_Destroy<Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z
_TEXT	SEGMENT
$T64970 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z PROC ; std::_Allocate<std::_Aux_cont>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@5
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T64970[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T64970[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@5:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@V_Aux_cont@std@@@std@@YAPAV_Aux_cont@0@IPAV10@@Z ENDP ; std::_Allocate<std::_Aux_cont>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?0PAVValue@Json@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVValue@Json@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Json::Value *>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVValue@Json@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@PAVValue@Json@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><Json::Value *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_GErrorInfo@Reader@Json@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GErrorInfo@Reader@Json@@QAEPAXI@Z PROC		; Json::Reader::ErrorInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ErrorInfo@Reader@Json@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GErrorInfo@Reader@Json@@QAEPAXI@Z ENDP		; Json::Reader::ErrorInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z PROC ; std::_Checked_base<Json::Reader::ErrorInfo * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z ENDP ; std::_Checked_base<Json::Reader::ErrorInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z PROC ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAVErrorInfo@Reader@Json@@PAPAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVErrorInfo@Reader@Json@@0@Z ENDP ; std::_Ptr_cat<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVErrorInfo@Reader@Json@@PAPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAPAPAVErrorInfo@Reader@Json@@PAPAV123@00AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Json::Reader::ErrorInfo * *,Json::Reader::ErrorInfo * *,std::allocator<Json::Reader::ErrorInfo *> >
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@@Z ; stdext::unchecked_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 418  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@@Z ; stdext::unchecked_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
	add	esp, 12					; 0000000cH

; 420  : 	}

	pop	ebp
	ret	0
??$_Uninit_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *,std::allocator<Json::Reader::ErrorInfo *> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Json::Reader::ErrorInfo *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVErrorInfo@Reader@Json@@@std@@@std@@YAXPAPAVErrorInfo@Reader@Json@@0AAV?$allocator@PAVErrorInfo@Reader@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Json::Reader::ErrorInfo *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Json::Value * * *>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z PROC ; std::_Checked_base<Json::Value * * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<Json::Value * * *>
	add	esp, 8

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z ENDP ; std::_Checked_base<Json::Value * * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z PROC ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAPAPAVValue@Json@@PAPAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAPAVValue@Json@@0@Z ENDP ; std::_Ptr_cat<Json::Value * * *,Json::Value * * *>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@2

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@2:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAPAVValue@Json@@PAPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAPAPAPAVValue@Json@@PAPAPAV12@00AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<Json::Value * * *,Json::Value * * *,std::allocator<Json::Value * *> >
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAPAPAVValue@Json@@IPAPAV12@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@@Z ; stdext::unchecked_fill_n<Json::Value * * *,unsigned int,Json::Value * *>
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >, COMDAT

; 418  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAPAPAVValue@Json@@IPAPAV12@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@@Z ; stdext::unchecked_fill_n<Json::Value * * *,unsigned int,Json::Value * *>
	add	esp, 12					; 0000000cH

; 420  : 	}

	pop	ebp
	ret	0
??$_Uninit_fill_n@PAPAPAVValue@Json@@IPAPAV12@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<Json::Value * * *,unsigned int,Json::Value * *,std::allocator<Json::Value * *> >
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Json::Value * *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 242  : 	}

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAPAVValue@Json@@@std@@@std@@YAXPAPAPAVValue@Json@@0AAV?$allocator@PAPAVValue@Json@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Json::Value * *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z
_TEXT	SEGMENT
__Base_tag$ = -1					; size = 1
___$ReturnUdt$ = 8					; size = 4
__It$ = 12						; size = 4
??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z PROC ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Different_checked_iterator_base_type_tag>
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1166 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ENDP ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z PROC ; std::_Iter_random<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_random@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ENDP ; std::_Iter_random<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z PROC ; std::_Ptr_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@0@Z ENDP ; std::_Ptr_cat<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
PUBLIC	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T65010 = -28						; size = 8
$T65009 = -20						; size = 8
$T65008 = -11						; size = 1
$T65007 = -10						; size = 1
$T65006 = -9						; size = 1
__Result$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Dest$ = 28						; size = 8
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
___formal$ = 44						; size = 1
??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 2685 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 2686 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2687 : 	_OutIt _Result = _Dest - (_Last - _First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
	push	eax
	lea	ecx, DWORD PTR __Result$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator-

; 2688 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2689 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T65006[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T65007[ebp], al
	movzx	ecx, BYTE PTR $T65006[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T65007[ebp]
	push	edx
	movzx	eax, BYTE PTR $T65008[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65009[ebp]
	push	edx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65010[ebp]
	push	ecx
	call	??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
	add	esp, 40					; 00000028H

; 2690 : 	return _Result;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Result$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2691 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T65017 = -28						; size = 8
$T65016 = -20						; size = 8
$T65015 = -11						; size = 1
$T65014 = -10						; size = 1
$T65013 = -9						; size = 1
__Result$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Dest$ = 28						; size = 8
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
___formal$ = 44						; size = 1
??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >, COMDAT

; 2481 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 2482 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2483 : 	_OutIt _Result = _Dest + (_Last - _First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
	push	eax
	lea	ecx, DWORD PTR __Result$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??H?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV01@H@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::operator+

; 2484 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2485 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T65013[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T65014[ebp], al
	movzx	ecx, BYTE PTR $T65013[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T65014[ebp]
	push	edx
	movzx	eax, BYTE PTR $T65015[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65016[ebp]
	push	edx
	call	??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@@Z ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
	add	esp, 8
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65017[ebp]
	push	ecx
	call	??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
	add	esp, 40					; 00000028H

; 2486 : 	return _Result;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Result$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2487 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1> >
_TEXT	ENDS
PUBLIC	??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z	; Json::Reader::ErrorInfo::operator=
PUBLIC	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
PUBLIC	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=
PUBLIC	??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
; Function compile flags: /Odtp
;	COMDAT ??$_Fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0ABVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Val$ = 24						; size = 4
??$_Fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0ABVErrorInfo@Reader@Json@@@Z PROC ; std::_Fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,Json::Reader::ErrorInfo>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill
$LN2@Fill:
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
$LN3@Fill:
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Fill

; 3159 : 		*_First = _Val;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
	mov	ecx, eax
	call	??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z
	jmp	SHORT $LN2@Fill
$LN4@Fill:

; 3160 : 	}

	pop	ebp
	ret	0
??$_Fill@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@VErrorInfo@Reader@Json@@@std@@YAXV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@0ABVErrorInfo@Reader@Json@@@Z ENDP ; std::_Fill<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,Json::Reader::ErrorInfo>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z PROC	; Json::Reader::ErrorInfo::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+40], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z ENDP	; Json::Reader::ErrorInfo::operator=
_TEXT	ENDS
PUBLIC	??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEABVErrorInfo@Reader@Json@@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
;	COMDAT ??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*, COMDAT
; _this$ = ecx

; 385  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEABVErrorInfo@Reader@Json@@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*

; 387  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
_TEXT	ENDS
PUBLIC	??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
; Function compile flags: /Odtp
;	COMDAT ??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++, COMDAT
; _this$ = ecx

; 395  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 396  : 		++*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++

; 397  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 398  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
_TEXT	ENDS
PUBLIC	??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
; Function compile flags: /Odtp
;	COMDAT ??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-, COMDAT
; _this$ = ecx

; 444  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-

; 446  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@1@@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
_TEXT	ENDS
PUBLIC	??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator==
; Function compile flags: /Odtp
;	COMDAT ??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=, COMDAT
; _this$ = ecx

; 261  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 262  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 263  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEABVErrorInfo@Reader@Json@@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Off$ = -8						; size = 4
__Block$ = -4						; size = 4
??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEABVErrorInfo@Reader@Json@@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*, COMDAT
; _this$ = ecx

; 136  : 			{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 			size_type _Block = _Myoff / _DEQUESIZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Block$[ebp], ecx

; 138  : 			size_type _Off = _Myoff & (_DEQUESIZ - 1);	// assume power of 2

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 0
	mov	DWORD PTR __Off$[ebp], eax

; 139  : 			_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator@9
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@9:

; 140  : 			_SCL_SECURE_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Getmycont()))->_Myoff + ((_Mydeque *)(this->_Getmycont()))->_Mysize);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	edx, DWORD PTR [esi+24]
	add	edx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], edx
	jb	SHORT $LN2@operator@9
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@9:

; 141  : 			if (static_cast<const _Mydeque *>(this->_Getmycont())->_Mapsize <= _Block)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Block$[ebp]
	ja	SHORT $LN1@operator@9

; 142  : 				_Block -= static_cast<const _Mydeque *>(this->_Getmycont())->_Mapsize;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	edx, DWORD PTR __Block$[ebp]
	sub	edx, DWORD PTR [eax+20]
	mov	DWORD PTR __Block$[ebp], edx
$LN1@operator@9:

; 143  : 			return ((static_cast<const _Mydeque *>(this->_Getmycont())->_Map)[_Block][_Off]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	eax, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR __Off$[ebp]
	imul	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR __Block$[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	eax, ecx

; 144  : 			}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEABVErrorInfo@Reader@Json@@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++, COMDAT
; _this$ = ecx

; 153  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 154  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

	xor	eax, eax
	je	SHORT $LN4@operator@10
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@operator@10
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN4@operator@10:

; 155  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Myoff < ((_Mydeque *)(this->_Getmycont()))->_Myoff + ((_Mydeque *)(this->_Getmycont()))->_Mysize);

	xor	edx, edx
	je	SHORT $LN2@operator@10
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR [esi+24]
	add	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], ecx
	jb	SHORT $LN2@operator@10
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@10:

; 156  : 
; 157  :  #if _HAS_ITERATOR_DEBUGGING
; 158  : 		if (this->_Mycont == 0
; 159  : 			|| ((_Mydeque *)this->_Mycont)->_Myoff
; 160  : 				+ ((_Mydeque *)this->_Mycont)->_Mysize == _Myoff)
; 161  : 			_DEBUG_ERROR("deque iterator not incrementable");
; 162  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 163  : 
; 164  : 		++_Myoff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
tv128 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-, COMDAT
; _this$ = ecx

; 225  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 
; 227  :  #if _HAS_ITERATOR_DEBUGGING
; 228  : 		_Compat(_Right);
; 229  :  #else
; 230  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	xor	eax, eax
	je	SHORT $LN3@operator@11
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator@11
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@11
$LN1@operator@11:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@11:

; 231  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 232  : 
; 233  : 		return (_Right._Myoff <= _Myoff ? _Myoff - _Right._Myoff
; 234  : 			: -(difference_type)(_Right._Myoff - _Myoff));

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	ja	SHORT $LN6@operator@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN7@operator@11
$LN6@operator@11:
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	neg	eax
	mov	DWORD PTR tv128[ebp], eax
$LN7@operator@11:
	mov	eax, DWORD PTR tv128[ebp]

; 235  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEHABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator-
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator==, COMDAT
; _this$ = ecx

; 243  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 
; 245  :  #if _HAS_ITERATOR_DEBUGGING
; 246  : 		_Compat(_Right);
; 247  : 		return (_Myoff == _Right._Myoff);
; 248  : 		}
; 249  : 
; 250  :  #elif _SECURE_SCL
; 251  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	xor	eax, eax
	je	SHORT $LN3@operator@12
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator@12
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Same_container@_Iterator_base_aux@std@@QBE_NABV12@@Z ; std::_Iterator_base_aux::_Same_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@12
$LN1@operator@12:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@operator@12:

; 252  : 		return (_Myoff == _Right._Myoff);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	sete	cl
	mov	al, cl

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator==
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Json::Reader::ErrorInfo * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Json::Reader::ErrorInfo * *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
PUBLIC	??$_Iter_cat@PAPAVErrorInfo@Reader@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVErrorInfo@Reader@Json@@@Z ; std::_Iter_cat<Json::Reader::ErrorInfo * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@@Z
_TEXT	SEGMENT
$T65045 = -2						; size = 1
$T65044 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@@Z PROC ; stdext::unchecked_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T65044[ebp], al
	movzx	ecx, BYTE PTR $T65044[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T65045[ebp]
	push	eax
	call	??$_Iter_cat@PAPAVErrorInfo@Reader@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVErrorInfo@Reader@Json@@@Z ; std::_Iter_cat<Json::Reader::ErrorInfo * *>
	add	esp, 8
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
	add	esp, 20					; 00000014H

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@stdext@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@@Z ENDP ; stdext::unchecked_fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<Json::Value * * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<Json::Value * * *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
PUBLIC	??$_Iter_cat@PAPAPAVValue@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAVValue@Json@@@Z ; std::_Iter_cat<Json::Value * * *>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_fill_n@PAPAPAVValue@Json@@IPAPAV12@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@@Z
_TEXT	SEGMENT
$T65051 = -2						; size = 1
$T65050 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAPAPAVValue@Json@@IPAPAV12@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@@Z PROC ; stdext::unchecked_fill_n<Json::Value * * *,unsigned int,Json::Value * *>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T65050[ebp], al
	movzx	ecx, BYTE PTR $T65050[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T65051[ebp]
	push	eax
	call	??$_Iter_cat@PAPAPAVValue@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAVValue@Json@@@Z ; std::_Iter_cat<Json::Value * * *>
	add	esp, 8
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
	add	esp, 20					; 00000014H

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAPAPAVValue@Json@@IPAPAV12@@stdext@@YAXPAPAPAVValue@Json@@IABQAPAV12@@Z ENDP ; stdext::unchecked_fill_n<Json::Value * * *,unsigned int,Json::Value * *>
_TEXT	ENDS
PUBLIC	?_Checked_iterator_base@?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@2@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Checked_iterator_base
; Function compile flags: /Odtp
;	COMDAT ??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__It$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1138 : 	{

	push	ebp
	mov	ebp, esp

; 1139 : 		return _It._Checked_iterator_base();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Checked_iterator_base@?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@2@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Checked_iterator_base
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1140 : 	}

	pop	ebp
	ret	0
??$_Checked_base@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@AAV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>,std::_Different_checked_iterator_base_type_tag>
_TEXT	ENDS
PUBLIC	??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
; Function compile flags: /Odtp
;	COMDAT ??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Dest$ = 28						; size = 8
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
___formal$ = 44						; size = 1
??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
$LN2@Copy_backw:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Copy_backw

; 2676 : 		*--_Dest = *--_Last;

	lea	ecx, DWORD PTR __Last$[ebp]
	call	??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
	mov	ecx, eax
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
	mov	ecx, eax
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
	mov	ecx, eax
	call	??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z
	jmp	SHORT $LN2@Copy_backw
$LN1@Copy_backw:

; 2677 : 	return (_Dest);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2678 : 	}

	pop	ebp
	ret	0
??$_Copy_backward_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Dest$ = 28						; size = 8
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
___formal$ = 44						; size = 1
??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt
$LN2@Copy_opt:
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator++
$LN3@Copy_opt:
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Copy_opt

; 2472 : 		*_Dest = *_First;

	lea	ecx, DWORD PTR __First$[ebp]
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??D?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QBEAAVErrorInfo@Reader@Json@@XZ ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator*
	mov	ecx, eax
	call	??4ErrorInfo@Reader@Json@@QAEAAV012@ABV012@@Z
	jmp	SHORT $LN2@Copy_opt
$LN1@Copy_opt:

; 2473 : 	return (_Dest);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2474 : 	}

	pop	ebp
	ret	0
??$_Copy_opt@V?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@V12@Uforward_iterator_tag@2@@std@@YA?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@0@V10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\deque
;	COMDAT ?_Checked_iterator_base@?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@2@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Base$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?_Checked_iterator_base@?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@2@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 363  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 364  : 		_Deque_iterator<_Ty, _Alloc, false> _Base(this->_Myoff, this->_Getmycont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	ecx, DWORD PTR __Base$[ebp]
	call	??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>

; 365  : 		return _Base;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Base$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Base$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 366  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Checked_iterator_base@?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$00@std@@QBE?AV?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@2@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,1>::_Checked_iterator_base
_TEXT	ENDS
PUBLIC	??F?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
; Function compile flags: /Odtp
;	COMDAT ??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--, COMDAT
; _this$ = ecx

; 408  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 		--*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??F?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--

; 410  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 411  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
_TEXT	ENDS
PUBLIC	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
; Function compile flags: /Odtp
;	COMDAT ??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBV_Container_base_aux@1@@Z PROC ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>, COMDAT
; _this$ = ecx

; 381  : 		{	// construct with offset _Off in *_Pdeque

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pdeque$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBV_Container_base_aux@1@@Z ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>

; 382  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBV_Container_base_aux@1@@Z ENDP ; std::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??F?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--, COMDAT
; _this$ = ecx

; 176  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());

	xor	eax, eax
	je	SHORT $LN4@operator@13
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base_aux@std@@QBE_NXZ ; std::_Iterator_base_aux::_Has_container
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@operator@13
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN4@operator@13:

; 178  : 		_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Myoff > ((_Mydeque *)(this->_Getmycont()))->_Myoff);

	xor	edx, edx
	je	SHORT $LN2@operator@13
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base_aux@std@@QBEPBV_Container_base_aux@2@XZ ; std::_Iterator_base_aux::_Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+24]
	ja	SHORT $LN2@operator@13
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN2@operator@13:

; 179  : 
; 180  :  #if _HAS_ITERATOR_DEBUGGING
; 181  : 		if (this->_Mycont == 0
; 182  : 			|| _Myoff == ((_Mydeque *)this->_Mycont)->_Myoff)
; 183  : 			_DEBUG_ERROR("deque iterator not decrementable");
; 184  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 185  : 
; 186  : 		--_Myoff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 187  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 188  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAEAAV01@XZ ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::operator--
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBV_Container_base_aux@1@@Z PROC ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>, COMDAT
; _this$ = ecx

; 125  : 		_Deque_const_iterator(size_type _Off, const _Mydequebase *_Pdeque)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VErrorInfo@Reader@Json@@HPBV123@ABV123@@std@@QAE@XZ

; 126  : 			{	// construct with offset _Off in *_Pdeque
; 127  : 			_SCL_SECURE_TRAITS_VALIDATE(
; 128  : 				_Pdeque != NULL &&
; 129  : 				((_Mydeque *)_Pdeque)->_Myoff <= _Off && _Off <= (((_Mydeque *)_Pdeque)->_Myoff + ((_Mydeque *)_Pdeque)->_Mysize));

	xor	eax, eax
	je	SHORT $LN3@Deque_cons@3
	cmp	DWORD PTR __Pdeque$[ebp], 0
	je	SHORT $LN1@Deque_cons@3
	mov	ecx, DWORD PTR __Pdeque$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	cmp	edx, DWORD PTR __Off$[ebp]
	ja	SHORT $LN1@Deque_cons@3
	mov	eax, DWORD PTR __Pdeque$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR __Pdeque$[ebp]
	add	ecx, DWORD PTR [edx+28]
	cmp	DWORD PTR __Off$[ebp], ecx
	jbe	SHORT $LN3@Deque_cons@3
$LN1@Deque_cons@3:
	call	DWORD PTR __imp___invalid_parameter_noinfo
$LN3@Deque_cons@3:

; 130  : 				
; 131  : 			this->_Set_container(_Pdeque);

	mov	eax, DWORD PTR __Pdeque$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Set_container@_Iterator_base_aux@std@@QAEXQBV_Container_base_aux@2@@Z ; std::_Iterator_base_aux::_Set_container

; 132  : 			_Myoff = _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 133  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Deque_const_iterator@VErrorInfo@Reader@Json@@V?$allocator@VErrorInfo@Reader@Json@@@std@@$0A@@std@@QAE@IPBV_Container_base_aux@1@@Z ENDP ; std::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>::_Deque_const_iterator<Json::Reader::ErrorInfo,std::allocator<Json::Reader::ErrorInfo>,0>
; Function compile flags: /Odtp
; File f:\tools\vs2008\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAPAVErrorInfo@Reader@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVErrorInfo@Reader@Json@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAVErrorInfo@Reader@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVErrorInfo@Reader@Json@@@Z PROC ; std::_Iter_cat<Json::Reader::ErrorInfo * *>, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAPAVErrorInfo@Reader@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVErrorInfo@Reader@Json@@@Z ENDP ; std::_Iter_cat<Json::Reader::ErrorInfo * *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
;	COMDAT ??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T65072 = -5						; size = 1
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>, COMDAT

; 3250 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T65072[ebp], al
	movzx	ecx, BYTE PTR $T65072[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVErrorInfo@Reader@Json@@@std@@YAPAPAVErrorInfo@Reader@Json@@AAPAPAV123@@Z ; std::_Checked_base<Json::Reader::ErrorInfo * *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
	add	esp, 16					; 00000010H

; 3255 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAPAPAVValue@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAVValue@Json@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAPAVValue@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAVValue@Json@@@Z PROC ; std::_Iter_cat<Json::Value * * *>, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAPAPAVValue@Json@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAVValue@Json@@@Z ENDP ; std::_Iter_cat<Json::Value * * *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
; Function compile flags: /Odtp
;	COMDAT ??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T65077 = -5						; size = 1
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>, COMDAT

; 3250 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T65077[ebp], al
	movzx	ecx, BYTE PTR $T65077[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAPAVValue@Json@@@std@@YAPAPAPAVValue@Json@@AAPAPAPAV12@@Z ; std::_Checked_base<Json::Value * * *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
	add	esp, 16					; 00000010H

; 3255 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>, COMDAT

; 3196 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n
$LN2@Fill_n:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n

; 3198 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill_n
$LN4@Fill_n:

; 3199 : 	}

	pop	ebp
	ret	0
??$_Fill_n@PAPAVErrorInfo@Reader@Json@@IPAV123@@std@@YAXPAPAVErrorInfo@Reader@Json@@IABQAV123@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<Json::Reader::ErrorInfo * *,unsigned int,Json::Reader::ErrorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>, COMDAT

; 3196 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n@2
$LN2@Fill_n@2:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n@2:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n@2

; 3198 : 		*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@Fill_n@2
$LN4@Fill_n@2:

; 3199 : 	}

	pop	ebp
	ret	0
??$_Fill_n@PAPAPAVValue@Json@@IPAPAV12@@std@@YAXPAPAPAVValue@Json@@IABQAPAV12@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<Json::Value * * *,unsigned int,Json::Value * *>
_TEXT	ENDS
END
